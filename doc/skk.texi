\input texinfo @c -*- mode: texinfo; coding: utf-8 -*-
@setfilename skk.info
@settitle SKK Manual
@documentlanguage ja
@documentencoding utf-8
@iftex
@usedvipdfmx
@end iftex
@paragraphindent 1
@c メモ
@c 1 makeinfo でコンパイルすることもできます。一瞬で終わり、リンク切れを含む
@c   エラーの検出に便利です。(make info はリンク切れを検出しません)
@c   方法は、このファイルを utf-8 で保存し、makeinfo skk.texi とします。
@c   生成される info は、make info のそれとは異なります。特に改行は
@c   変になります。
@c 2 @ref などのコマンドは、改行されると正常に働きません。 @w の中に入れて下さい。
@c   あるいは、3 つ引数を渡すのも良いでしょう。
@c 3 @footnote は、そのページの一つ目では、texi の改行/非改行がそのまま
@c   info の改行/非改行になり、二つ目以降は他の文と同様、自動的に改行されます。
@c   ただし、例外もあるようです。
@c   また、@footnote 以外にも、改行が編集されないケースがあるようです。
@c
@c  Author: Masahiko Sato <masahiko@kuis.kyoto-u.ac.jp>
@c          Yukiyoshi Kameyama <kameyama@@kuis.kyoto-u.ac.jp>
@c          NAKAJIMA Mikio <minakaji@namazu.org>
@c          IRIE Tetsuya <irie@t.email.ne.jp>
@c          Kitamoto Tsuyoshi <tsuyoshi.kitamoto@gmail.com>
@c          Teika Kazura  <teika@lavabit.com>
@c          Tsukamoto Tetsuo <czkmt@remus.dti.ne.jp>
@c          Tsuyoshi AKIHO <akiho@sky.email.ne.jp>
@c          SAKAI Kiyotaka <ksakai@kso.netwk.ntt-at.co.jp>
@c          Satoshi Harauchi <satoshi@sys.sdl.melco.co.jp>
@c  Maintainer: SKK Development Team <skk@ring.gr.jp>
@c  Keywords: japanese
@c
@set SKK-VERSION 16.0.50
@set UPDATED $Date: 2014/12/20 03:41:15 $

@dircategory Emacs
@dircategory GNU Emacs Lisp
@direntry
* SKK: (skk).           Simple Kana to Kanji conversion program.
@end direntry

@c Texinfo に追加できたら良いなぁと思う点を述べます。中島は単なる LaTeX
@c ユーザで、Plain TeX マクロの組み方なんて全然知りませんので、ユー
@c ザーの立場でやりたいことを卒直に、また無責任に述べるに留めます。あし
@c からず。実現できる方法をご存知の方がいらっしゃいましたら、是非教えて
@c 下さい。
@c
@c (1)日本語の用語についてゴシック体でプリントアウトし、info では "「"
@c    と "」" を自動的に付けるような@jdfn{}が欲しい。本書では、日本語
@c    の用語定義をとりあえず`「',`」' で囲み、@b コマンドでゴシック体を
@c    出力するようにしている。
@c
@c (2)アスキー文字と全角文字を連接して書いたとしても pTeX がその間に適切
@c    に空白を挿入して印刷してくれる。一方 info は連接したままで空白は挿
@c    入されないので少し見にくい気がする。info ではアスキー文字と全角文
@c    字との間に半角スペースを挿入してはどうか?
@c
@c (3)LaTeX の表を書くコマンドを実装して欲しい (なら Latexinfo を使えと
@c    は言わないでね。互換性が大きく損なわれるから嫌なんです)。

@synindex pg cp
@footnotestyle end
@iftex
@afourpaper
@end iftex
@ifinfo
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the author.
@end ifinfo
@titlepage
@sp 10
@comment The title is printed in a large font.
@title SKK Manual
@subtitle This edition is for SKK version @value{SKK-VERSION}
@c @subtitle @value{UPDATED-MONTH}
@subtitle @value{UPDATED}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{}1991-2007 @w{Masahiko Sato}（佐藤雅彦）, @*
@w{Yukiyoshi Kameyama}（亀山幸義）, @w{NAKAJIMA Mikio}（中島幹夫）,
@w{IRIE Tetsuya}（入江）, @w{Kitamoto Tsuyoshi}（北本剛）,
@w{Teika Kazura}（定家）, @w{Tsukamoto Tetsuo}（塚本徹雄）
and @w{Tsuyoshi AKIHO}（秋保強）.  Revised by @w{Kiyotaka Sakai}（酒井清隆）
and @w{Satoshi Harauchi}（原内聡）.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the author.

@end titlepage
@page
@ifinfo
@node Top
@top SKK

この @cite{SKK マニュアル} は SKK のバージョン @value{SKK-VERSION} に対
応しています。

@menu
* はじめに::
* インストール::
* はじめの設定::
* 基本的な使い方::
* 便利な応用機能::
* ローマ字入力以外の入力方式::
* そのほかの拡張機能::
* SKKに関する情報::
* よくある質問とその回答(FAQ)::
* 事項索引::
* 変数索引::
* 関数索引::
* キー索引::

@detailmenu
 --- 以下は各章の項目です。 ---

はじめに

* このバージョンのSKKについて::
* SKKとはなにか::

インストール

* APEL のインストール::
* DDSKK のインストール::
* 辞書について::
* 辞書の入手::
* 辞書を DDSKK と同時にインストールする::
* 辞書サーバの入手::

はじめの設定

* 最も基本的な設定::
* インクリメント検索の設定::
* 辞書サーバを使いたいときの設定::

基本的な使い方

* 起動と終了::
* 入力モード::                  文字種別毎のモード
* 変換モード::                  辞書を用いた変換の状態毎のモード
* インクリメンタル・サーチ::
* チュートリアル::

便利な応用機能 -- 予備知識

* ファイル構成::                応用機能を使いこなすための予備知識。
* ユーザオプションの設定方法::

便利な応用機能 -- 入力関係

* カタカナ、英字入力の便法::     これと次の項は絶対、便利です。
* 補完::                      「かしたん」 + Tab -> 「かしたんぽせきにん」
* 便利な変換、その他の変換::    単漢字、接頭辞、漢数字、等々。

便利な応用機能 -- 様々な設定

* キー設定::                   ローマ字のルールなども変更できます。
* 変換、確定の前後::            誤変換の訂正、一発確定、確定のタイミングなど
* 送り仮名関連::                送り仮名の処理について。
* 候補の順序::                 関連のある語は上位に表示など、効率を求めて
* 辞書関連::                    辞書にまつわる設定及び機能。

便利な応用機能 -- 他

* 注釈 (アノテーション)::
* 文字コード関連::              文字コードにまつわる機能。
* DDSKK 以外のツールを用いた辞書変換::
* 飾りつけ::                    様々な表示の設定。
* ユーザガイダンス関連::
* I-search関連::                インクリメンタル・サーチにまつわる機能。
* VIP/VIPERとの併用::
* picture-modeとの併用::        picture-mode との併用の際の問題点。
* Org-modeとの併用::            Org-mode との併用の際の問題点。

ローマ字入力以外の入力方式

* AZIK::
* ACT::
* TUT-code::
* かな入力と親指シフト::

SKKに関する情報

* 最新情報::
* SKKメーリングリスト::
* SKK関連ソフトウェア::
* SKK辞書について::
* 辞書ツール::
* SKKの作者::
* SKKの歴史::
* このマニュアルについて::
* 謝辞::

よくある質問とその回答(FAQ)

* Introduction::                SKK のなぜなに。
* Installation::                SKK の入手から導入まで。
* Customization::               SKK の基本設定からお好みのカスタマイズまで。
* Dictionaries::                SKK 辞書関連。
* Miscellaneous::               SKK の活用法その他。

@end detailmenu
@end menu
@end ifinfo

@node はじめに
@chapter はじめに
@cindex はじめに

@menu
* このバージョンのSKKについて::
* SKKとはなにか::
@end menu

@node このバージョンのSKKについて
@section このバージョンのSKKについて

Daredevil SKK （以下、このマニュアルにおいて @samp{DDSKK} と呼びます。）は、
動作が早くて効率的な日本語入力環境を提供するソフトウェアです。

GNU General Public License に基づいて配布されているフリー・ソフトウェアです。
DDSKK @value{SKK-VERSION} が動作すると思われる Emacsen のバージョンは、次のと
おりです。

@itemize @bullet
@item GNU Emacs 22.1 以降 (推奨)
@item GNU Emacs 23.1 以降 (推奨)
@item GNU Emacs 24.1 以降 (推奨)
@item Mule 機能付きでコンパイルされた XEmacs 21.4 の最新版
@item Mule 機能付きでコンパイルされた XEmacs 21.5 の最新版
@end itemize

XEmacs に関しては、XEmacs 本体とは別に配布されているパッケージ群は最新版が要
求されます。少なくとも xemacs-base パッケージが最新であることに加えて、fsf-compat パ
ッケージが必須です。

総論として、現在は XEmacs よりも GNU Emacs での動作がよくテストされてお
り、最近では XEmacs でのテストは充分行われていません。
GNU Emacs 22 以上での利用が最も推奨されます。

現時点で Emacs のバージョンごとに少なくとも以下の制限があります。

@table @b
@item GNU Emacs 20.x

DDSKK 14.2 以降は GNU Emacs 20 はサポート対象外です。
GNU Emacs 20 のユーザーは DDSKK 14.1 をお使いください。

@item GNU Emacs 21.4

DDSKK 15.1 以降は GNU Emacs 21 はサポート対象外です。
GNU Emacs 21 のユーザーは DDSKK 14.4 をお使いください。

@item GNU Emacs 22.3

@itemize @bullet
@item JIS X 0213 対応には Mule-UCS の導入が必要です。
@item X Window System 上でのメニューバーの日本語表示は GTK 対応版のみです。
@end itemize

@item GNU Emacs 23.3

@itemize @bullet
@item X Window System 上でのメニューバーの日本語表示は GTK 対応版のみです。
@end itemize

@item GNU Emacs 24.3

GNU Emacs 24.3 と DDSKK 14 の組み合わせで isearch 使用時の不具合が発見されています。
GNU Emacs 24.3 のユーザーは DDSKK 15 をお使いください。

@url{http://mail.ring.gr.jp/skk/201211/msg00000.html}

@url{http://mail.ring.gr.jp/skk/201212/msg00000.html}

@item GNU Emacs 24.4

@itemize @bullet
@item coding tag を明示していないファイルは utf-8 と取り扱われます@footnote{@code{2013-06-11 international/mule-conf.el (file-coding-system-alist)}}。DDSKK 15.2 で対策済みです。
@item NTEmacs は 24.3 と比べてディレクトリ構成が異なります@footnote{Emacs News: Changes in Emacs 24.4 on Non-Free Operating Systems}。DDSKK 15.2 で対策済みです。
@end itemize

@item XEmacs 21.4

@itemize @bullet
@item @file{skk-kcode.el} の機能を含む JIS X 0213 対応が機能しません。
@item インライン候補表示は機能しません。
@item 動的補完における複数候補表示は機能しません。
@item ツールティップ表示が機能しません。
@item 日本語メニュー表示は X リソースによる方法のみテストされています。
@item GNU Emacs 標準添付辞書 ja-dic は利用できません。
@end itemize

@item XEmacs 21.5 (beta)

@itemize @bullet
@item @file{skk-kcode.el} の機能を含む JIS X 0213 対応が機能しません。
@item インライン候補表示は機能しません。
@item 動的補完における複数候補表示は機能しません。
@item 日本語メニュー表示は X リソースによる方法のみテストされています。
@item GNU Emacs 標準添付辞書 ja-dic は利用できません。
@end itemize

@end table

@node SKKとはなにか
@section SKKとはなにか

SKK は、かな漢字変換プログラムです。
Simple Kana to Kanji conversion program にちなんで名付けられ、その名
は Combinatory Logic での有名な等式 @samp{SKK = I} にも由来していま
す @footnote{@samp{SKK = I} について詳しくは @url{http://openlab.jp/skk/SKK.html} を
ご参照下さい。}。

Daredevil SKK (DDSKK) は、 SKK の更なる拡張版です @footnote{@samp{Daredevil} の名の由来については @ref{Q1-1 Daredevil SKK って SKK とは違うのですか?} を参照して下さい。}。

ただし、@samp{SKK モード}、@samp{SKK 辞書}、@samp{SKK サーバ} といった歴
史的な用語は引き続き使用しており、DDSKK と呼ばない場合もあります。また、
SKK 方式の入力方法を採用したプログラムなど、広く SKK family を意味する場
合も同様です。

DDSKK の主な特徴は、次のとおりです。

@itemize @bullet
@item 多彩な入力方式をサポート。ローマ/かな 両対応のかな入力のほか、AZIK、ACT、TUT-code の各方式による入力も可能。
@item 文法的知識を用いない高速な「かな → 漢字」変換。
@item シームレスかつ再帰的な単語登録モード。
@item 確定語を個人辞書へ自動登録することによって、変換候補を効率的に表示する。
@item マイナーモードとして実装されているので、メジャーモードにほとんど影響を与えない。つまり、Emacs との親和性が高い。
@item DDSKK 本体 (Emacs Lisp) と辞書ファイルのみで動作可能。つまり、辞書サーバは必須ではなく、辞書サーバがダウンしていても使用できる。
@item 辞書サーバを使うことで、使用メモリの削減が可能。
@item ディスク容量に応じて選べる辞書ファイル。
@item Emacs のオリジナル操作と同様に行える日本語インクリメンタル・サーチ。
@item Emacs Lisp で書かれたプログラムが返す値を変換候補に挙げることができる。
@item 入力モードの自動切り替え @file{context-skk.el}
@item 多彩なアノテーション表示 (ユーザ・アノテーション、EPWING 辞書、Apple OS X 辞書、Wikipedia/Wiktionary)
@item 見出し語の動的補完
@item 総画数変換、部首変換、文字コード入力
@end itemize

@node インストール
@chapter インストール
@cindex インストール

@menu
* APEL のインストール::
* DDSKK のインストール::
* 辞書について::
* 辞書の入手::
* 辞書を DDSKK と同時にインストールする::
* 辞書サーバの入手::
@end menu

@node APEL のインストール
@section APEL のインストール
@cindex APEL

DDSKK 14.2 からは、GNU Emacs 22 以上を利用する場合
においては APEL を別途インストールする必要がなくなりました。APEL に依存し
ている他の elisp プログラムを使用していなければ、インストール済の APEL は
削除することが可能です。

XEmacs をお使いの場合は、 DDSKK をインストールする前に
APEL (APEL 10.8 以上を推奨) をインストールして下さい。
APEL は次のサイトから入手できます。

@uref{http://git.chise.org/elisp/apel/, APEL}

@node DDSKK のインストール
@section DDSKK のインストール

ここでは、UNIX 上で @command{make} コマンドが利用できる環境を想定します
@footnote{Microsoft Windows 環境では、@command{makeit.bat} を使用することで
同様の操作でインストールできます。@url{https://github.com/skk-dev/ddskk/READMEs/README.w32.ja}

cygwin 環境をインストールされている方は @command{make} コマンドが使用できる
ので、本文の解説がそのまま当てはまります。

Apple OS X 環境の方は @url{https://github.com/skk-dev/ddskk/READMEs/README.MacOSX.ja} を参照してください。
}。

まず、DDSKK のアーカイブ @file{ddskk-VERSION.tar.gz} を @command{tar} コ
マンドと @command{gzip} コマンドを使用して展開します。

@example
% gzip -cd ddskk-@value{SKK-VERSION}.tar.gz | tar xvf -
@end example

次に、DDSKK のトップディレクトリ@footnote{@file{ChangeLog} や @file{Makefile} が置かれているディレクトリです。}をカレントディレクトリにします。

@example
% cd ddskk-@value{SKK-VERSION}
@end example

@menu
* GNU Emacs へのインストール::
* XEmacs へのインストール::
* 対話的なインストール::
* MELPA によるインストール::
@end menu

@node GNU Emacs へのインストール
@subsection GNU Emacs へのインストール

まずは、DDSKK がどのディレクトリにインストールされるのか確認するため
に @option{what-where} を引数に @command{make} コマンドを実行しましょう。

@example
@group
% make what-where
@print{}emacs -batch -q -no-site-file -l SKK-MK -f SKK-MK-what-where
@print{}Loading /home/USER/temp/ddskk-@value{SKK-VERSION}/SKK-CFG...

@print{}Running in:
@print{}  GNU Emacs 25.0.50.10 (x86_64-unknown-linux-gnu, GTK+ Version 3.10.9) @dots{}

@print{}SKK modules:
@print{}  skk-cursor, skk-viper, @dots{}
@print{}  -> /path/to/emacs/site-lisp/skk

@print{}SKK infos:
@print{}  skk.info
@print{}  -> /path/to/share/info

@print{}SKK tutorials:
@print{}  SKK.tut, SKK.tut.E, NICOLA-SKK.tut, skk.xpm
@print{}  -> /path/to/share/skk
@end group
@end example

emacs の実体ファイルを特定することもできます。

@example
$ make what-where EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
@end example

また、DDSKK のインストール先ディレクトリを変更したい場合
は @file{SKK-CFG} ファイルを編集してください。編集後は必ず @command{make what-where} を
実行して表示内容を確認してください。

つぎにスーパーユーザになって、

@example
$ su
% make install
@end example

@noindent
と実行すると、実際に DDSKK がインストールされます。

あるいは、一般ユーザが自分の home directory を root directory として DDSKK を
インストールするには、

@example
% make install PREFIX=~/
@end example

@noindent
と、PREFIX を指定して @command{make} を実行します。

特定の Emacs を指定する場合は、

@example
% make install EMACS=mule
@end example

@noindent
と指定します。

@node XEmacs へのインストール
@subsection XEmacs へのインストール

XEmacs でパッケージとしてインストールする場合は、
まず、@option{what-where-package} を引数に @command{make} コマンドを実行
してパッケージのインストール先を確認しましょう。

@example
@group
% make what-where-package EMACS=/usr/bin/xemacs
@print{}xemacs -batch -q -no-site-file -l SKK-MK -f SKK-MK-what-where-package

@print{}  Loading /home/user/temp/ddskk-@value{SKK-VERSION}/SKK-CFG...

@print{}Running in:
@print{}  XEmacs 21.5  (beta29) garbanzo [Lucid] (i386-redhat-linux, Mule) of @dots{}

@print{}SKK modules:
@print{}  skk-cursor, skk-viper, @dots{}
@print{}  -> /usr/share/xemacs/site-packages/lisp/skk

@print{}SKK infos:
@print{}  skk.info
@print{}  -> /usr/share/xemacs/site-packages/info

@print{}SKK tutorials:
@print{}  SKK.tut, SKK.tut.E, NICOLA-SKK.tut, skk.xpm
@print{}  -> /usr/share/xemacs/site-packages/etc/skk
@end group
@end example

つぎに、スーパーユーザになって @option{install-package} を引数
に @command{make} を実行すると、実際にインストールされます。

@example
@group
% make install-package EMACS=/usr/bin/xemacs
@print{}xemacs -batch -q -no-site-file -l SKK-MK -f SKK-MK-install-package
@print{}  Loading /home/user/temp/ddskk-@value{SKK-VERSION}/SKK-CFG@dots{}
@dots{}
@end group
@end example

@node 対話的なインストール
@subsection 対話的なインストール

DDSKK 14.3 では「対話的インストーラ」が追加されました。

まず、@kbd{M-x dired} とタイプして dired を起動してください。このとき、デ
ィレクトリを問われますので、先に述べた「DDSKK のアーカイブを展開したディ
レクトリ」を指定してください。

@example
@group
------ Minibuffer -------
Dired (directory): ~/temp/ddskk-@value{SKK-VERSION} @key{RET}
------ Minibuffer -------
@end group
@end example

次に、表示されたディレクトリ一覧の @file{SKK-MK} にカーソルをあわせ
て @kbd{L} （@key{SHIFT} を押しながらアルファベットのエル）をタイプしてく
ださい。

@example
@group
------ Dired -------
-rw-r--r-- 1 user user  99999 2011-00-00 00:00 SKK-CFG
-rw-r--r-- 1 user user  99999 2011-00-00 00:00@point{}SKK-MK    @kbd{L}
drwxr-xr-x 1 user user  99999 2011-00-00 00:00 bayesian
------ Dired -------
@end group
@end example

プロンプト @samp{Load SKK-MK?} には @kbd{y} をタイプしてください。

以降、インストーラが表示する質問に答えながら DDSKK のインストールを進めて
ください。なお、パーミッションは一切考慮していませんので、インストール先
は書き込み権限を有するディレクトリを指定してください。

@node MELPA によるインストール
@subsection MELPA によるインストール
@cindex MELPA
@cindex @file{package.el}
@vindex package-archives
@findex package-initialize

2014年12月、MELPA@footnote{@uref{http://melpa.org/, Milkypostman's Emacs Lisp Package Archive}}
に DDSKK が登録されたことにより GNU Emacs でも @file{package.el} 
@footnote{GNU Emacs 24 以降で標準で搭載されています。GNU Emacs 23 以前では手動でインストール必要があります。@*
@url{http://wikemacs.org/wiki/Package.el}}
によるインストールが可能となりました。

詳細については、次のドキュメントを参照してください。

@url{https://github.com/skk-dev/ddskk/blob/master/READMEs/INSTALL.MELPA.md}

@node 辞書について
@section 辞書について

DDSKK を使用するには、いわゆる辞書 (主にかなと漢字の対応を記述したデータ)
が必要です。

DDSKK 14.2 からは、 GNU Emacs 同梱の辞書データ @file{ja-dic} を利用した
かな漢字変換に対応しましたので、SKK 辞書ファイルを別途インストールしなく
ても最低限の使用ができます（XEmacs では @file{ja-dic} は利用できませんの
で、後述する SKK 辞書をインストールする必要があります）。

しかし、@file{ja-dic} は、 Emacs の入力メソッド LEIM のために @file{SKK-JISYO.L} か
ら変換して生成されたものであり、英数変換や数値変換などのエントリ、および
「大丈夫」など複合語とみなし得る語が大幅に削除されています。
そのため、@file{SKK-JISYO.L} を利用したかな漢字変換と同等の結果は得られま
せん。

有志の知恵を結集して作られている各種 SKK 辞書は便利ですから、是非入手し
てインストールしましょう。

@node 辞書の入手
@section 辞書の入手

@table @b
@item SKK 各辞書の解説とダウンロード
@url{http://openlab.jp/skk/wiki/wiki.cgi?page=SKK%BC%AD%BD%F1}

このサイトには様々な辞書が用意されています。以下は一例です。
@end table

@table @code
@item SKK-JISYO.S
S 辞書（主に単漢字が登録。最小限必要な語を収録）

@item SKK-JISYO.M
M 辞書（普通に使う分には足りる程度）

@item SKK-JISYO.ML
M 辞書と L 辞書の中間のサイズの辞書。L 辞書収録語の内、EPWING 辞書やオン
ライン辞書で正しいと判別された語をベースにして加除。

@item SKK-JISYO.L
L 辞書（あらゆる単語を収録）

@item zipcode
郵便番号辞書

@item SKK-JISYO.JIS2
JIS X 0208 で定められている第２水準の文字を、部首の読みを見出し語として
単漢字を収録した辞書

@item SKK-JISYO.JIS3_4
JIS 第３水準、第４水準の文字に代表される、JIS X 0208 には含まれない
が JIS X 0213 には含まれる文字及びそれらを含む語録を収録した辞書

@item SKK-JISYO.public+
public+ 辞書

@item SKK-JISYO.edict
edict 辞書(英和辞書)

@item SKK-JISYO.lisp
候補に Emacs Lisp 関数を含むエントリーを集めた辞書。見出し語を変換する過
程でEmacs Lisp 関数を評価し、その値を候補として表示します。

@xref{プログラム実行変換}.

@item SKK-JISYO.wrong
間違い辞書（S, M, L 辞書に既に登録されていたが、間違いであったので削除さ
れた単語を収録）
@end table

一部の辞書は、著作権が GNU GPL v2 ではありませんのでご注意下さい。
詳細は、次の資料を参照して下さい。

@url{http://openlab.jp/skk/skk/dic/READMEs/committers.txt}

@node 辞書を DDSKK と同時にインストールする
@section 辞書を DDSKK と同時にインストールする

DDSKK のソースを展開すると、中に @file{dic} というディレクトリが存在しま
す。@file{SKK-JISYO.L} などをこのディレクトリにコピーしてから @command{make install} を
実行すると、辞書ファイルがチュートリアル (@file{SKK.tut}) と同じディ
レクトリ (@file{/usr/share/skk} や @file{c:/emacs-24.2/etc/skk} など) に
インストールされます。

@c さらに、@file{SKK-JISYO.L} を DDSKK ソースの @file{dic} ディレクトリにコ
@c ピーしてから @command{make cdb} を実行すると、CDB 形式辞書ファイル @file{SKK-JISYO.L.cdb} が
@c 生成されます@footnote{CDB 形式辞書ファイルの生成には python スクリプト @file{etc/skk2cdb.py}
@c が実行されるので、あらかじめ python 処理系をインストールしておく必要があ
@c ります。}。
@c この状態で @command{make install} を実行すると @file{SKK-JISYO.L.cdb} も
@c @file{SKK-JISYO.L} と共にインストールされます。

@node 辞書サーバの入手
@section 辞書サーバの入手

辞書サーバはオプションです。
辞書サーバが無くても DDSKK は動作しますが、特に辞書のサイズが大きい場合は
辞書サーバを利用することで省メモリ効果を得られます。また、辞書サーバによ
っては複数辞書の検索、EPWING 辞書の検索ができたりするものもあります。

DDSKK は特定の辞書サーバの実装に依存していませんので、下記の辞書サーバの
いずれでも動作可能です。ソースやバイナリの入手、インストールについてはそ
れぞれのウェブサイトをご参照下さい。

@table @b
@item 辞書サーバの説明とリンク

@url{http://openlab.jp/skk/skkserv-ja.html}
@end table

@node はじめの設定
@chapter はじめの設定
@cindex @file{leim-list.el}

標準的にインストールした場合は、特段の設定なしに Emacs を起動するだけ
で DDSKK が使える状態になります。
自動的に @file{skk-setup.el} というファイルが読み込まれ、設定されます
@footnote{Emacs が起動する過程（関数@code{normal-top-level}）で @file{SKK_LISPDIR/leim-list.el} が読み込まれます。

@file{leim-list.el} は @file{skk-autoloads.el} と @file{skk-setup.el} を @code{require} します。

@findex register-input-method
@file{skk-autoloads.el} は DDSKK の @command{make} 時に自動的に生成されるファイル
であり、各関数を自動ロード(autoload)するよう定義するほか @code{register-input-method} も
行います。

@file{skk-setup.el} はキーバインド（@kbd{C-x C-j} @result{} @code{'skk-mode}）、変数 @code{skk-tut-file} の定義及びインクリメンタル・サーチの定義を行っています。}。

この自動設定によらずに手動で設定したい場合は、以下の説明を参照してください。

@menu
* 最も基本的な設定::
* インクリメント検索の設定::
* 辞書サーバを使いたいときの設定::
* DDSKK を Emacs の Input Method とする::
@end menu

@node 最も基本的な設定
@section 最も基本的な設定
@vindex skk-cdb-large-jisyo

自動設定によらず手動で設定する場合は、次の内容を @file{~/.emacs.d/init.el} に書きま
す@footnote{サンプルとして、配布物に @file{etc/dot.emacs}、@file{etc/dot.skk} フ
ァイルがあります。参考にして下さい。}。

@lisp
@group
(require 'skk-autoloads) ; @b{XEmacs でパッケージとしてインストールした場合は不要}
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-xj" 'skk-auto-fill-mode)
(global-set-key "\C-xt" 'skk-tutorial)
@end group
@end lisp

辞書サーバを使わない場合は、辞書ファイルを指定する必要があります。

@lisp
(setq skk-large-jisyo "/your/path/to/SKK-JISYO.L")
@end lisp

@noindent
辞書サーバを使わない場合は Emacs のバッファに @code{skk-large-jisyo} が指
すファイルを取り込んで使用するためメモリ使用量が増加します。これが支障と
なる場合は、上記の @file{SKK-JISYO.L} を @file{SKK-JISYO.M}、@file{SKK-JISYO.ML} 又
は @file{SKK-JISYO.S} に変更してください。

@cindex CDB 形式辞書ファイル

DDSKK 14.1 以降は辞書サーバを経由せずとも CDB 形式@footnote{constant database の
こと。詳しくは @url{http://cr.yp.to/cdb.html} 又は @url{http://ja.wikipedia.org/wiki/Cdb} を参照のこと。}
の辞書ファイルを直接利用できるようになりました。CDB 形式辞書ファイル@footnote{
SKK 辞書 の @file{Makefile} 中の cdb ターゲットを実行することで @file{SKK-JISYO.L} か
ら @file{SKK-JISYO.L.cdb} を生成することができます。}
を利用する場合は、以下のように指定してください。

@lisp
(setq skk-cdb-large-jisyo "/your/path/to/SKK-JISYO.L.cdb")
@end lisp

@noindent
変数 @code{skk-large-jisyo} と 変数 @code{skk-cdb-large-jisyo} を同時に指
定した場合は、標準では CDB 形式辞書ファイルの方が先に検索されます。これに関して
は @w{@ref{辞書検索の設定の具体例}} も参照してください。

@node インクリメント検索の設定
@section インクリメント検索の設定
@vindex isearch-mode-hook
@vindex isearch-mode-end-hook

基本的な設定は @file{skk-setup.el} が読み込まれた時点で完了しています
@footnote{@file{skk-setup.el} では、関数 @code{isearch-mode-hook} に @code{skk-isearch-setup-maybe} を、
関数 @code{isearch-mode-end-hook} に @code{skk-isearch-cleanup-maybe} を
、それぞれ hook に追加しています。
@code{skk-isearch-@{setup|cleanup@}-maybe} とも @file{skk-setup.el} で定義されており、
実態は、関数 @code{skk-isearch-mode-@{setup|cleanup@}} です。}。

@defvr {ユーザ変数} skk-isearch-mode-enable

@code{Non-nil} なら SKK が ON になっているバッファで @code{skk-isearch} を有効
にします。デフォルトは @code{t} です。

@code{nil} に設定すると @code{skk-isearch} を無効にすることができます
@footnote{変数 @code{skk-isearch-mode-enable} は @file{~/.emacs.d/init.el} か @kbd{M-x customize-variable} で設定してください。}。

@lisp
(setq skk-isearch-mode-enable nil)
@end lisp

この変数の値をシンボル @code{'always} に設定すると、 SKK が ON になってい
ないバッファでも @code{skk-isearch} を有効にします。

@lisp
(setq skk-isearch-mode-enable 'always)
@end lisp
@end defvr

@node 辞書サーバを使いたいときの設定
@section 辞書サーバを使いたいときの設定

辞書サーバを使いたいときは、@file{~/.skk} で以下のように設定します。

@lisp
@group
(setq skk-server-host "example.org")
(setq skk-server-portnum 1178)
@end group
@end lisp

@defvr {ユーザ変数} skk-server-host

辞書サーバが起動しているホスト名又は IP アドレス。
@end defvr

@defvr {ユーザ変数} skk-server-portnum

辞書サーバが使うポート番号。@file{/etc/services} に skkserv のエントリが
記述されていれば @code{skk-server-portnum} を指定する必要は無い。
@end defvr

@vindex skk-server-inhibit-startup-server
辞書サーバが起動していなかったときに Emacs から skkserv プロセスを立ち上げる
事もできます。@code{skk-server-inhibit-startup-server} を @code{nil} に
する事でこの機能が有効になります。@ref{サーバ関連} も参照してください。

Emacs から立ち上げて利用する事ができる辞書サーバは、

@example
skkserv [-p port] [jisyo]
@end example

@noindent
のようなオプションを受け付け、inetd などを経由せず直接起動するものに限ら
れます。

辞書サーバプログラムと辞書ファイルは、次のように設定します。

@lisp
@group
(setq skk-server-prog "/your/path/to/skkserv")
(setq skk-server-jisyo "/your/path/to/SKK-JISYO.L")
@end group
@end lisp

@defvr {ユーザ変数} skk-server-prog

辞書サーバプログラムをフルパスで指定する。
@end defvr

@defvr {ユーザ変数} skk-server-jisyo

辞書サーバに渡す辞書をフルパスで指定する。辞書サーバによっては独自の方法
で辞書ファイルを指定して emacs からの指定を無視するものもあります。
詳しくは各辞書サーバの説明書を読んで下さい。
@end defvr

@noindent
これらの設定は、環境変数を利用して下記のようにすることもできます。
@cindex @code{SKKSERVER}
@cindex @code{SKKSERV}
@cindex @code{SKK_JISYO}

@table @b
@item B シェルの場合 (sh, bash, ksh, zsh など)

@example
export SKKSERVER=example.org
export SKKSERV=/your/path/to/skkserv
export SKK_JISYO=/your/path/to/SKK-JISYO.L
@end example

@item C シェルの場合 (csh, tcsh など)

@example
setenv SKKSERVER example.org
setenv SKKSERV /your/path/to/skkserv
setenv SKK_JISYO /your/path/to/SKK-JISYO.L
@end example
@end table

関連項目: @w{@ref{辞書サーバの入手}}、@w{@ref{サーバ関連}}

@node DDSKK を Emacs の Input Method とする
@section DDSKK を Emacs の Input Method とする
@cindex LEIM
@cindex input method
@cindex @file{skk-leim.el}
@kindex C-\
@kindex M-x list-input-methods
@kindex M-x set-input-method

Emacs の標準キーバインドでは @kbd{C-\} をタイプすると
関数 @code{toggle-input-method} を実行します。
この関数は、変数 @code{default-input-method} が指す input method をトグル切り替えします。

変数 @code{default-input-method} の値はおそらく @code{"Japanese"} であり、
結果として @kbd{C-\} のタイプで LEIM @footnote{Library of Emacs Input Method} を on/off します。

使用可能な input method は @kbd{M-x list-input-methods} で確認することができ、
コマンド @code{set-input-method} を実行する @footnote{@kbd{M-x set-input-method} また
は @kbd{C-x @key{RET} C-\}} ことで input method を切り替えることができます。

ファイル @file{skk-leim.el} から生成されるファイル @file{skk-autoloads.el} で input method をふたつ追加しています。

@table @b
@item "japanese-skk"

内容は @code{(skk-mode 1)} です。

@item "japanese-skk-auto-fill"

内容は @code{(skk-auto-fill-mode 1)} です。
@end table


@defvr {ユーザ変数} default-input-method

Emacs 起動時の input method を DDSKK とするには、@file{~/.emacs.d/init.el} に

@lisp
(setq default-input-method "japanese-skk")
@end lisp

と記述してください。

@end defvr

@node 基本的な使い方, 便利な応用機能, はじめの設定, Top
@comment  node-name,  next,  previous,  up
@chapter 基本的な使い方

本章では、DDSKK の基本的な使用方法を説明します。これを読めば、とりあえず
DDSKK を使ってみるには充分です。

DDSKK を使った入力方法に慣れるには、付属のチュートリアルが最適なので、お
試しください。

@xref{チュートリアル}.

なお、次章の「便利な応用機能」は、興味のある個所のみをピックアップして
お読みになるのがいいでしょう。

@menu
* 起動と終了::
* 入力モード::                  文字種別毎のモード
* 変換モード::                  辞書を用いた変換の状態毎のモード
* インクリメンタル・サーチ::
* チュートリアル::
@end menu

@node 起動と終了
@section 起動と終了
@kindex C-x C-j
@kindex C-x j

SKK モードに入るには @kbd{C-x C-j}、もしくは @kbd{C-x j} とタイプします。
モードラインの左端には、下記のように @w{@samp{--かな:}} が追加されます
@footnote{@file{skk.el} の @code{skk-setup-modeline} にて、@code{mode-line-format} に @code{skk-icon} と @code{skk-modeline-input-mode} を追加しています}。

@example
--かな:MULE/7bit----- Buffer-name (Major-mode)---
@end example

また、カーソルの色が変化します
@footnote{カラーディスプレイを使用し、カラー表示をサポートしている
Window System 下で対応する Emacs を使用している場合。

@w{@xref{入力モードを示すカーソル色に関する設定}.}}。

@kbd{C-x C-j}、もしくは @kbd{C-x j} を再度タイプすることで、SKK モードに
入る前のモードに戻り、カーソル色も元に戻ります
@footnote{ただし、@b{「アスキーモード」}を利用すれば SKK モードから抜ける
必要はほとんどありません。

@xref{入力モード, , アスキーモード}.}。

@defvr {ユーザ変数} skk-status-indicator

デフォルトはシンボル @code{'left} です。この変数をシンボル @code{'minor-mode} と
設定すれば、インジケータはモードラインのマイナーモードの位置に表示されます。

@example
-MULE/7bit----- Buffer-name (Major-mode かな)---
@end example

@end defvr

@defvr {ユーザ変数} skk-preload

@file{~/.emacs.d/init.el} にて変数 @code{skk-preload} を @code{non-nil} と設定するこ
とにより、DDSKK の初回起動を速くすることができます。

@lisp
(setq skk-preload t)
@end lisp

これは、SKK 本体プログラムの読み込みと変数 @code{skk-search-prog-list} に
指定された辞書の読み込みを Emacs の起動時に済ませてしまうことにより実現し
ています。そのため、Emacs の起動そのものは遅くなりますが、DDSKK を使い始
めるときのレスポンスが軽快になります。
@end defvr

@findex skk-restart
@kindex M-x skk-restart

@defun {コマンド} skk-restart

@kbd{M-x skk-restart} と実行すると SKK を再起動します。
@file{~/.skk} は再ロードしますが、@file{~/.emacs.d/init.el} は再ロードしません。

@end defun

@kindex M-x skk-version

@defun {コマンド} skk-version

@kbd{M-x skk-version} と実行すると エコーエリアに SKK のバージョンを表示します。
@w{@ref{エラーなどの日本語表示}}

@example
-------------------- Echo Area --------------------
Daredevil SKK/16.0.50 (Futamata)
-------------------- Echo Area --------------------
@end example

@end defun

@menu
* SKKオートフィルモード::
* 辞書の保存::
@end menu

@node SKKオートフィルモード
@subsection SKKオートフィルモード
@cindex オートフィル
@cindex Auto Fill
@kindex C-x j

@kbd{C-x j} とタイプすれば、SKK モードに入ると同時にオートフィルモード
(@pxref{Auto Fill, , Auto Fill, emacs, GNU Emacs Manual})
をオンにします。

既にオートフィルモードがオンになっているバッファで @kbd{C-x j} をタイプす
ると、オートフィルモードは逆にオフになるので注意してください。

@kindex M-1 C-x j
@kindex C-u C-x j
バッファの状態にかかわらず強制的にオートフィルモード付で SKK モードに入
りたい場合は、@kbd{M-1 C-x j} や @kbd{C-u C-x j} などとタイプし、このコ
マンドに正の引数を渡します
@footnote{「引数」については、

@display
@ref{Arguments, , Arguments, emacs, GNU Emacs Manual}.
@end display

@noindent
を参照のこと。}。

@kindex C-u -1 C-x j
@kindex M-- C-x j
オートフィルモードをオフにし、かつ SKK モードも終了したい場合には
@w{@kbd{M-- C-x j}} や @w{@kbd{C-u -1 C-x j}} などとタイプし、このコマン
ドに負の引数を渡します。

@node 辞書の保存
@subsection 辞書の保存
@vindex skk-backup-jisyo
@vindex skk-jisyo

Emacs を終了するときは、保存前の個人辞書を @file{~/.skk-jisyo.BAK} に退避
してから、個人辞書 (@pxref{辞書の種類, , 個人辞書})の内容を @file{~/.skk-jisyo} に
保存します。

@file{~/.skk-jisyo} や @file{~/.skk-jisyo.BAK} のファイル名を変更したけ
れば、それぞれ @code{skk-jisyo} や @code{skk-backup-jisyo} の値を変更して
下さい。

@findex  skk-kill-emacs-without-saving-jisyo
@kindex  M-x skk-kill-emacs-without-saving-jisyo

個人辞書を保存せずに Emacs を終了させたい場合には、

@example
@kbd{M-x skk-kill-emacs-without-saving-jisyo}
@end example

@noindent
とタイプします。

個人辞書の保存動作について更に詳しくは、@ref{個人辞書の保存動作} を参照
してください。

@node 入力モード
@section 入力モード

SKK モードは、文字種類による４種類の@b{「入力モード」}と、辞書を用いた
変換の状態により３つの@b{「変換モード」}を持ちます。

@menu
* 入力モードの説明::
* 入力モードを切り替えるキー::
@end menu

@node 入力モードの説明
@subsection 入力モードの説明

@table @b
@cindex かなモード
@item 「かなモード」

アスキー小文字をひらがなに変換するモード。

マイナーモードの表示: @samp{かな}

カーソル色: 赤系

@cindex カナモード
@item 「カナモード」

アスキー小文字をカタカナに変換するモード。

マイナーモードの表示: @samp{カナ}

カーソル色: 緑系

@cindex 全英モード
@item 「全英モード」

アスキー小文字／大文字を全角アルファベット@footnote{JIS X 0208 英字のこと。
このマニュアルでは「全角アルファベット」と表記する。}に変換するモード。

マイナーモードの表示: @samp{全英}

カーソル色: 黄系

@cindex アスキーモード
@item 「アスキーモード」

文字を変換しないモード。入力されたキーは @kbd{C-j} を除いて通常の Emacs の
コマンドとして解釈される。

マイナーモードの表示: @samp{SKK}

カーソル色: 背景によりアイボリーかグレイ。
@end table

入力モードに伴うカーソル色の変更方法については、
@ref{入力モードを示すカーソル色に関する設定} を参照してください。

@node 入力モードを切り替えるキー
@subsection 入力モードを切り替えるキー

@table @kbd
@item q
「かなモード」、「カナモード」間をトグルする。

@item l
「かなモード」又は「カナモード」から「アスキーモード」へ。

@item L
「かなモード」又は「カナモード」から「全英モード」へ。

@item C-j
「アスキーモード」又は「全英モード」から「かなモード」へ。
@end table

実際にはカナモードや全英モードで長時間入力を続けることはほとんどないの
で、かなモードのままでカナ文字や全英文字を入力する便法が用意されています。

@itemize @bullet
@item
@w{@pxref{かなモードからカタカナを入力}}

@item
@w{@pxref{全英文字の入力}}
@end itemize

@kindex M-x skk-show-mode
@defvr {ユーザ変数} skk-show-mode-show

現在の入力モードは、モードラインに表示されています。

@ref{起動と終了}

この変数を @code{Non-nil} とすると、入力モードを切り替えたときにカーソル
付近にも一瞬表示するようになります。

@kbd{M-x skk-show-mode} でトグル可能です。

@ref{入力モードを示すモードラインの文字列の変更}

@end defvr

@defvr {ユーザ変数} skk-show-mode-style

デフォルトは @code{'inline} です。@code{'tooltip} を指定することも可能です。

@ref{インジケータ}

@end defvr

@defvr {ユーザ変数} skk-show-mode-inline-face

@code{'inline} 利用時の face

@end defvr

@node 変換モード
@section 変換モード

変換モードは、次の 3 種類のいずれかです。

@table @b
@item 「■モード(確定入力モード)」

あるキー入力に対応する文字列を、辞書を用いた文字変換を行わずに直接バッ
ファへ入力するモード。入力モードに応じてローマ字からひらがな、ローマ字か
らカタカナ、あるいはアスキー文字から全角アルファベットへ文字を変換する。

@item 「▽モード」

辞書変換の対象となる文字列「見出し語」を入力するモード。

@item 「▼モード」

見出し語について、辞書変換を行うモード。
@end table

また、▽モードの変種として @dfn{SKK abbrev mode} があり、▼モードのサブモー
ドとして、@b{「辞書登録モード」}があります。

@menu
* ■モード::                    辞書変換を行わない確定入力のモード。
* ▽モード::                    辞書変換のため見出し語の入力を行うモード。
* ▼モード::                    辞書変換を行うモード。
* 辞書登録モード::              個人辞書へ単語を登録するモード。
@end menu

@node ■モード
@subsection ■モード

@cindex 確定入力
@cindex 確定入力モード
@cindex ■モード
確定入力モードを@b{「■モード」}と呼びます。■モードでは、あるキー入力に
対応した特定の文字列への変換を行うだけで、辞書変換は行いません。アスキー
文字列から、入力モードに応じて、ひらがな、カタカナ、あるいは全角アルファ
ベットへ文字を変換します。カレントバッファにこのモード特有のマークは表示
されません。

@cindex ローマ字入力
かなモード、カナモードで、かつ ■モードである場合、デフォルトの入力方法
はいわゆるローマ字入力です。訓令式、ヘボン式のどちらによっても入力するこ
とができます。主な注意点は以下のとおりです。

@itemize @bullet
@item
@samp{ん} は @kbd{n n} 又は @kbd{n '} で入力する。直後に @samp{n}、
@samp{y} 以外の子音が続くときは @kbd{n} だけで入力できる。

@item
促音は、@kbd{c h o t t o} @result{} @samp{ちょっと}、@kbd{m o p p a r a}
@result{} @samp{もっぱら} のように次の子音を重ねて入力する。

@item
促音や拗音(ひらがなの小文字)を単独で入力するときは、@kbd{x a} @result{}
@samp{ぁ}、@kbd{x y a} @result{} @samp{ゃ} などのように @kbd{x} を用いる。

@item
長音は、@kbd{-} で入力する。@kbd{-} @result{} @samp{ー}。
@end itemize

@node ▽モード
@subsection ▽モード

@cindex 辞書変換対象の文字列の決定
@cindex ▽モード
@b{「▽モード」}では、辞書変換の対象となる文字列を入力します。かなモード、
もしくはカナモード@footnote{@xref{入力モード, , かなモード、カナモード}.}
で、かつ、■モードであるときに、キー入力を大文字で開始することで、▽モー
ドに入ります。例えば、

@example
@kbd{K a n j i}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group
@end example

@noindent
のようにタイプすることで▽モードに入り、続けて辞書変換の対象となる文字
列「見出し語」を入力します。@samp{▽}マークは「▽モードである」
という表示ですが、見出し語の開始点を示す表示でもあります。

@menu
* 後から▽モードに入る方法::
* ▽モードを抜ける方法::
@end menu

@node 後から▽モードに入る方法
@subsubsection 後から▽モードに入る方法
@cindex 後から▽モードに入る方法
@kindex Q

辞書変換の対象としたい文字列であったにも関わらず、先頭の文字を大文字で入力し忘れた場
合は、その位置までポイント@footnote{@xref{Point, ,ポイント, emacs, GNU Emacs Manual}.}
を戻してから @kbd{Q} をタイプすることで、▽モードに入ることができます。例えば、
下記のように操作します (@point{} の地点にカーソルがあります)。

@example
@kbd{k a n j i}

@group
------ Buffer: foo ------
かんじ@point{}
------ Buffer: foo ------
@end group

@kbd{C-u 3 C-b}

@group
------ Buffer: foo ------
@point{}かんじ
------ Buffer: foo ------
@end group

@kbd{Q}

@group
------ Buffer: foo ------
▽@point{}かんじ
------ Buffer: foo ------
@end group

@kbd{C-e}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group
@end example

@cindex 数字から始まる見出し語の入力
@samp{7がつ24にち} のように大文字から始めることができない文字列を見出し語
としたい場合は、 @kbd{Q} をタイプして▽モードにしてから @samp{7がつ24にち} の
文字列を入力します。

なお、▽モードでは、文字列の間に空白を含めることはできません。
これは、辞書エントリの見出し語に空白を含めることができない制限からきています。

@node ▽モードを抜ける方法
@subsubsection ▽モードを抜ける方法

@kindex C-g
@kindex C-j
誤って▽モードに入ってしまったときは、 @kbd{C-j} とタイプして■モードに戻
るか、 @kbd{C-g} とタイプして見出し語を消去するか、どちらかの方法があります。
具体例を下記に示します。

@example
@kbd{K a n j i}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group

@kbd{C-j}

@group
------ Buffer: foo ------
かんじ@point{}
------ Buffer: foo ------
@end group
@end example

@noindent
あるいは、

@example
@kbd{K a n j i}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group

@kbd{C-g}

@group
------ Buffer: foo ------
@point{}
------ Buffer: foo ------
@end group
@end example

@node ▼モード
@subsection ▼モード
@cindex Overlays
@cindex ハイライト
@cindex 暗黙の確定
@cindex 変換開始

@b{「▼モード」} では、▽モードで入力した見出し語を、辞書に従って変換する作
業を行います。▽モードで見出し語を入力した後に @key{SPC} をタイプするこ
とで▼モードに入ります。@samp{▽} マークから @key{SPC} をタイプしたとき
のポイントまでの文字列が見出し語として確定され、 @samp{▽} マークは
@samp{▼} マークで置き換えられ、この見出し語が辞書の中で検索されます。

@menu
* 送り仮名が無い場合::
* 次候補・前候補::
* 送り仮名が有る場合::
@end menu

@node 送り仮名が無い場合
@subsubsection 送り仮名が無い場合

仮に、辞書に

@example
かんじ /漢字/幹事/
@end example

@noindent
というエントリ
@footnote{本マニュアルでは、見出し語と候補群を合わせた一行を「エントリ」
と呼びます。詳細は、@ref{送りありエントリと送りなしエントリ}を参照してく
ださい。}を含むとして、例を示します。

@example
@kbd{K a n j i}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼漢字@point{}
------ Buffer: foo ------
@end group
@end example

@noindent
この例では、▽モードにおける @samp{▽} マークからポイントまでの間の文字列
@samp{かんじ} を辞書変換の対象文字列として確定し、それについて辞書内での
検索を行っています。実際の変換動作では、候補部分がハイライト表示されます
@footnote{ハイライト表示は FSF Emacs の Overlays、XEmacs の extent の機能を使
用しています。}。

@samp{漢字} が求める語であれば @kbd{C-j} をタイプしてこの変換を
確定します。ハイライト表示も @samp{▼} マークも消えます。

また、 @kbd{C-j} をタイプせずに新たな確定入力を続けるか又は新たな変換
を開始すると、直前の変換は自動的に確定されます。これを @b{「暗黙の確定」} と
呼んでいます。副作用として確定を伴うキーは、印字可能な文字
全てと @key{RET} です。詳細は @ref{暗黙の確定のタイミング} を参照してく
ださい。

@node 次候補・前候補
@subsubsection 次候補・前候補

求める語がすぐに表示されなければ、更に続けて @key{SPC} をタイプすることで、
次候補を検索します。

@example
@group
------ Buffer: foo ------
▼漢字@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼幹事@point{}
------ Buffer: foo ------
@end group
@end example

候補が５つ以上あるときは、５番目以降の候補は７つずつまとめてエコーエリ
アに表示されます。例えば、辞書が

@example
@group
きょ /距/巨/居/裾/嘘/拒/拠/虚/挙/許/渠/据/去/
@end group
@end example

@noindent
というエントリを含むときに @kbd{K y o} の後に @key{SPC} を５回続けて
タイプすれば

@example
@group
-------------------- Echo Area --------------------
A:嘘  S:拒  D:拠  F:虚  J:挙  K:許  L:渠  [残り 2]
-------------------- Echo Area --------------------
@end group
@end example

@noindent
がエコーエリア
@footnote{エコーエリアとミニバッファは視覚的には同一の場所にありますが、
エコーエリアが単にユーザへのメッセージを表示するのみであるのに対し、ミ
ニバッファは独立したバッファとして機能する点が異なります。}に表示されます。
ここで仮に @samp{許} を選択したければ @kbd{k} を入力します。

@samp{A}, @samp{S}, @samp{D}, @samp{F}, @samp{J}, @samp{K}, @samp{L} の
各文字は、押し易さを考慮してキーボードのホームポジションから横方向に一直
線に配置されているキーが選ばれています。また、候補の選択のために押すキー
は、大文字、小文字のいずれでも構いません。候補の選択に用いるキーの変更に
ついては、@w{@ref{候補の選択に用いるキー}} を参照してください。

@key{SPC} を連打してしまい求める候補を誤って通過してしまったときは 
@kbd{x} をタイプすれば前候補／前候補群に戻ることができます
@footnote{@samp{x} は小文字で入力する必要があります}。

候補を次々と探しても求める語がなければ、自動的に辞書登録モードになります
(辞書登録モードは▼モードのサブモードです) 。
@ref{辞書登録モード}にて説明します。

@defvr {ユーザ変数} skk-previous-candidate-keys
前候補／前候補群に戻る関数 @code{skk-previous-candidate} を割り当てるオブ
ジェクトのリストを指定する。
オブジェクトにはキーを表す文字列または event vector が指定できます。

デフォルトは @code{(list "x" "\C-p")} です。
@end defvr

@defvr {ユーザ変数} skk-search-excluding-word-pattern-function
詳しくは docstring を参照のこと。
@end defvr

@node 送り仮名が有る場合
@subsubsection 送り仮名が有る場合

次に送り仮名のある単語について説明します。

@samp{動く} を変換により求めたいときは @kbd{U g o K u} のように、まず ▽
モード に入るために @kbd{U} を大文字で入力し、次に送り仮名の開始を DDSKK
に教えるために @kbd{K} を大文字で入力します。送り仮名の @kbd{K} をタイプ
した時点で @key{SPC} をタイプすることなく、▼モード に入り辞書変換が行わ
れます。

送り仮名の入力時（ローマ字プレフィックスが挿入された瞬間）、プレフィック
スの直前に @samp{*} を一瞬挿入し、送り仮名の開始時点を明示します。プレ
フィックスに続くキー入力で、かな文字が完成した時点で @samp{*} は消えます。

キー入力を分解して追いながらもう少し詳しく説明します。

@example
@kbd{U g o}

@group
------ Buffer: foo ------
▽うご@point{}
------ Buffer: foo ------
@end group

@kbd{K}

@group
------ Buffer: foo ------
▽うご*k@point{}
------ Buffer: foo ------
@end group

@kbd{u}

@group
------ Buffer: foo ------
▼動く@point{}
------ Buffer: foo ------
@end group
@end example

このように、DDSKK では送り仮名の開始地点をユーザが明示的に入力するので、
システム側で送り仮名を分解する必要がありません。これにより、高速でヒット
効率が高い変換が可能になります。@xref{送り仮名の自動処理}.

ただし、サ変動詞の変換では、サ変動詞の語幹となる名詞を @b{「送りなし変換」}
@footnote{詳細は、@ref{送り仮名が無い場合}を参照してください。}
として変換し、その後 @samp{する} を■モードで入力した方が効率が良くなり
ます。@xref{サ変動詞の辞書登録に関する注意, , サ変動詞の入力}.

@node 辞書登録モード
@subsection 辞書登録モード

@cindex 辞書登録
DDSKK には独立した辞書登録モードはありません。その代わり、辞書にない単語に
関して変換を行った場合に、自動的に辞書登録モードに入ります。例えば辞書に

@example
へんかんちゅう /変換中/
@end example

@noindent
のエントリがない場合に、@samp{変換中} を入力しようとして、@w{@kbd{H e n
k a n t y u u @key{SPC}}} とタイプすると、下記のように、カレントバッファ
は ▼モード のまま @samp{へんかんちゅう} に対して変換ができない状態で休
止し、同時にミニバッファに @samp{へんかんちゅう} というプロンプトが表示
されます。

@example
@group
------ Buffer: foo ------
▼へんかんちゅう
------ Buffer: foo ------

------ Minibuffer -------
[辞書登録] へんかんちゅう: @point{}
------ Minibuffer -------
@end group
@end example

@menu
* 送り仮名が無い場合の辞書登録::
* 送り仮名が有る場合の辞書登録::
* サ変動詞の辞書登録に関する注意::
* 再帰的辞書登録::
* 改行文字を含む辞書登録::
@end menu

もちろん、誤って登録した単語は削除できます。
(@w{@pxref{誤った登録の削除}}, @w{@pxref{個人辞書ファイルの編集}})

@defvr {ユーザ変数} skk-read-from-minibuffer-function
この変数に「文字列を返す関数」を収めると、その文字列を辞書登録モードに入
ったときのプロンプトに初期表示します。関数 @code{read-from-minibuffer} の
引数 INITIAL-CONTENTS に相当します。

@lisp
@group
(setq skk-read-from-minibuffer-function
      (lambda () skk-henkan-key))
@end group
@end lisp

@end defvr

@defvr {ユーザ変数} skk-jisyo-registration-badge-face

変数 @code{skk-show-inline} が @code{non-nil} であれば、辞書登録モードに
移ったことを明示するためにカレントバッファに「@b{↓辞書登録中↓}」とイン
ライン表示します。この「↓辞書登録中↓」に適用するフェイスです。

@end defvr

@node 送り仮名が無い場合の辞書登録
@subsubsection 送り仮名が無い場合の辞書登録

@noindent
辞書登録モードでは、キー入力はミニバッファに対して行われます。仮に辞書に

@example
@group
へんかん /変換/
ちゅう /中/
@end group
@end example

@noindent
のようなエントリがあるとして、ミニバッファで @samp{変換中} の文字列を
@samp{変換} と @samp{中} とに分けて作ります。

@example
@group
@kbd{H e n k a n @key{SPC} T y u u @key{SPC}}

----------- Minibuffer ------------
[辞書登録] へんかんちゅう: 変換▼中@point{}
----------- Minibuffer ------------
@end group
@end example

@cindex 暗黙の確定
@noindent
ここで @key{RET} をタイプすれば @samp{変換中} が個人辞書に登録され、辞書
登録モードは終了します
@footnote{ここでは「暗黙の確定」が行われるので @kbd{C-j} をタイプする必要
はありません。ただし、@ref{▼モードでのRET} を参照してください。}。
同時に、変換を行っているカレントバッファには @samp{変換中} が挿入され確定
されます。@xref{辞書の種類, , 個人辞書}.

辞書登録モードを抜けたいときは @kbd{C-g} をタイプするか、または何も登録
せず @key{RET} をタイプすると▽モードに戻ります。

@node 送り仮名が有る場合の辞書登録
@subsubsection 送り仮名が有る場合の辞書登録

送り仮名のある単語の登録では、ミニバッファで作る候補に送り仮名そのものを
登録しないように注意しなければいけません。仮に辞書に

@example
うごk /動/
@end example

@noindent
というエントリがないとして、例を挙げて説明します。

@example
@group
@kbd{U g o K u}

@end group
@group
------ Buffer: foo ------
▼うごく
------ Buffer: foo ------

------ Minibuffer -------
[辞書登録] うご*く: @point{}
------ Minibuffer -------
@end group
@end example

@noindent
ミニバッファで辞書登録すべき文字列は @samp{動} だけであり、送り仮名の
@samp{く} は含めてはいけません。 @samp{動く} と登録してしまうと、次に
@kbd{U g o K u} とタイプしたときに出力される候補が @samp{動くく} になっ
てしまいます。

@example
@group
@kbd{D o u @key{SPC}}

@end group
@group
------ Minibuffer -------
[辞書登録] うご*く: 動@point{}
------ Minibuffer -------

@end group
@key{RET}
@group

------ Buffer: foo ------
動く@point{}
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-check-okurigana-on-touroku

デフォルトは @code{nil} です。@code{non-nil} であれば、辞書登録時に送り仮
名のチェックを行います。

シンボル @code{ask} を設定すれば、ユーザに確認を求め、送り仮名と認められ
れば送り仮名を取り除いてから登録します。

シンボル @code{auto} を設定すれば、ユーザに確認を求めず、勝手に送り仮名を
判断して削除してから登録します。

@end defvr

@node サ変動詞の辞書登録に関する注意
@subsubsection サ変動詞の辞書登録に関する注意
@cindex サ変動詞の辞書登録に関する注意

サ変動詞（名詞の後に @samp{する} を付けた形で構成される動詞）については
@samp{する} を送り仮名とした送りあり変換 (@w{@pxref{送り仮名が有る場合}})
をしないで、@samp{運動} と @samp{する} とに分けて入力することを前提として
います。@footnote{@file{SKK-JISYO.L} など共有辞書のメンテナンス上、原則と
してサ変動詞を送りありエントリに追加していません。そのため、@samp{する} を
送り仮名とした送りあり変換では、辞書に候補がなく辞書登録モードに入ってし
まうので、名詞として分解して入力することが一般的です。ただし、DDSKK 13 以
降では暫定的にサ変動詞の送りあり変換を可能にする機能を用意しました。
(@w{@pxref{サ変動詞変換}})}

例えば @samp{運動する} は @kbd{U n d o u @key{SPC} s u r u} とタイプする
ことにより入力できます。名詞から作られる形容詞等も同様です。

@node 再帰的辞書登録
@subsubsection 再帰的辞書登録

@cindex 再帰的辞書登録
ミニバッファを再帰的に使って辞書登録を再帰的に行うことができます。

仮に辞書に

@example
@group
さいきてき /再帰的/
さいき /再帰/
@end group
@end example

@noindent
のようなエントリがなく、かつ

@example
@group
さい /再/
き /帰/
てき /的/
@end group
@end example

@noindent
のようなエントリがあるとします。

ここで @kbd{S a i k i t e k i @key{SPC}} とタイプすると、見出し語 @samp{さ
いきてき} に対する候補を見つけられないので、ミニバッファに @samp{さいき
てき} というプロンプトを表示して辞書登録モードに入ります。

@samp{さいきてき} に対する辞書エントリを作るため @kbd{S a i k i @key{SPC}}
とタイプすると、更にこの候補も見つけられないので、ミニバッファに
@samp{さいき} というプロンプトを表示して、再帰的に @samp{さいき} の辞書
登録モードに入ります。

@kbd{S a i @key{SPC} K i @key{SPC}} とタイプすると、ミニバッファは、

@example
------ Minibuffer -------
[[辞書登録]] さいき: 再▼帰
------ Minibuffer -------
@end example

@noindent
となります。プロンプトが @samp{[[辞書登録]]} となり、@samp{[]} がひとつ増
えていますが、この @samp{[]} の数が再帰的な辞書登録モードの深さを表わして
います。ここで @key{RET} をタイプすると、個人辞書には

@example
さいき /再帰/
@end example

@noindent
というエントリが登録され、ミニバッファは @samp{さいきてき} の辞書登録モー
ドに戻り、プロンプトは @samp{さいきてき} となります。

今度は @samp{再帰} が変換可能なので @kbd{S a i k i @key{SPC} T e k i
@key{SPC}} とタイプすると、

@example
------ Minibuffer -------
[辞書登録] さいきてき: 再帰▼的
------ Minibuffer -------
@end example

@noindent
となります。ここで @key{RET} をタイプすることで、@samp{さいきてき} の辞
書登録モードから抜け、個人辞書に

@example
さいきてき /再帰的/
@end example

@noindent
というエントリが登録されます。カレントバッファのポイントには、@samp{再帰
的} が挿入されます。

@node 改行文字を含む辞書登録
@subsubsection 改行文字を含む辞書登録
@kindex C-q C-j

@cindex 改行文字を含む文字列の辞書登録
改行文字を含む文字列を辞書に登録するには、辞書登録モードで改行文字を
@kbd{C-q C-j} により入力します。例えば、

@example
@group
〒980
仙台市青葉区片平2-1-1
東北大学電気通信研究所
@end group
@end example

@noindent
を辞書に登録するには、辞書登録モードで、

@example
@group
@samp{〒980}
@kbd{C-q C-j}
@samp{仙台市青葉区片平2-1-1}
@kbd{C-q C-j}
@samp{東北大学電気通信研究所}
@key{RET}
@end group
@end example

@noindent
と入力します。

@node インクリメンタル・サーチ
@section インクリメンタル・サーチ
@cindex @file{isearch.el}
@cindex I-search
@cindex Incremental search

DDSKK では、専用のインクリメンタル・サーチプログラムを Emacs 添付の
@file{isearch.el} のラッパーとして実装しているため、日本語文字列のイ
ンクリメンタル・サーチをアスキー文字と同様の操作で行うことができます。

@menu
* skk-isearchの操作性::
* skk-isearchと入力モード::
@end menu

@node skk-isearchの操作性
@subsection skk-isearchの操作性

大部分の動作は、Emacs オリジナルのインクリメンタル・サーチのままですから、
Emacs オリジナルのインクリメンタル・サーチ
@footnote{@w{@ref{Incremental Search, ,Incremental Search, emacs, GNU Emacs Manual}.}}
のコマンド
@footnote{@kbd{M-y} の @code{isearch-yank-kill} や @kbd{M-p} の
@code{isearch-ring-retreat}, @kbd{M-n} の @code{isearch-ring-advance} な
ど}やユーザ変数でのカスタマイズ @footnote{@code{search-highlight} など}
もそのまま利用できます。

インクリメンタル・サーチ中の入力方法は、通常のバッファにおける各入力モー
ド、変換モードでの入力方法と同一です。

@kindex C-r
@kindex C-s
@kindex M-C-s
@kindex M-C-r
@kbd{C-s} や @kbd{C-r}、あるいは @kbd{M-C-s} や @kbd{M-C-r} でインクリメ
ンタル・サーチを起動すると、インクリメンタル・サーチを起動したバッファの
入力モードと同一の入力モードで、キーとなる文字の入力が可能となります。

@node skk-isearchと入力モード
@subsection skk-isearchと入力モード

@vindex skk-isearch-mode-string-alist

入力モードに合わせて、インクリメンタル・サーチのプロンプトが表示されます。
プロンプトの種類は、以下の 6 つです@footnote{変数 @code{skk-isearch-mode-string-alist} を適宜設定することにより変更が可能です。}。

@table @samp

@item I-search: [か]
かなモード

@item I-search: [カ]
カナモード

@item I-search: [英]
全英モード

@item I-search: [aa]
アスキーモード

@item I-search: [aあ]
Abbrev モード

@item I-search: [--]
インクリメンタル・サーチモードで @kbd{C-x C-j} などをタイプして DDSKK を
終了した場合は、このプロンプトが表示されます。

@end table

@node チュートリアル
@section チュートリアル

@cindex チュートリアル
@vindex skk-tut-file
@findex skk-tutorial
@kindex M-x skk-tutorial
DDSKK には、基本的な操作方法を学習できるチュートリアルが附属しています。
日本語版チュートリアルは @kbd{M-x skk-tutorial} で、英語版チュートリアルは
@kbd{C-u M-x skk-tutorial @key{RET} English @key{RET}} で実行します。

@defvr {ユーザ変数} skk-tut-file

チュートリアルファイルが標準の場所に置かれていない場合は、 @file{~/.emacs.d/init.el} で

@lisp
(setq skk-tut-file "/usr/local/share/skk/SKK.tut")
@end lisp

@noindent
と書くことにより、指定したチュートリアルファイルを使用させることが
できます。英語版のチュートリアルファイルは、 @samp{skk-tut-file} に @file{.E}
が付いたファイル名です。この場合であれば、
@file{/usr/local/share/skk/SKK.tut.E} になります。

@end defvr

@defvr {ユーザ変数} skk-tut-lang
チュートリアルで用いる言語を文字列（@code{"Japanese"} 又
は @code{"English"}）で指定します。
この変数よりも @kbd{C-u M-x skk-tutorial} による言語指定が優先されます。

@end defvr

@defvr {ユーザ変数} skk-tut-use-face

@code{Non-nil} であれば、チュートリアルで face を利用して表示する。

@end defvr

@node 便利な応用機能
@chapter 便利な応用機能

@menu
予備知識
* ファイル構成::                応用機能を使いこなすための予備知識。
* ユーザオプションの設定方法::

@noindent
入力関係
* カタカナ、英字入力の便法::     これと次の項は絶対、便利です。
* 補完::                      「かしたん」 + Tab -> 「かしたんぽせきにん」
* 便利な変換、その他の変換::    単漢字、接頭辞、漢数字、等々。

@noindent
様々な設定
* キー設定::                   ローマ字のルールなども変更できます。
* 変換、確定の前後::            誤変換の訂正、一発確定、確定のタイミングなど
* 送り仮名関連::                送り仮名の処理について。
* 候補の順序::                 関連のある語は上位に表示など、効率を求めて
* 辞書関連::                    辞書にまつわる設定及び機能。

@noindent
他
* 注釈 (アノテーション)::
* 文字コード関連::              文字コードにまつわる機能。
* DDSKK 以外のツールを用いた辞書変換::
* 飾りつけ::                    様々な表示の設定。
* ユーザガイダンス関連::
* I-search関連::                インクリメンタル・サーチにまつわる機能。
* VIP/VIPERとの併用::
* picture-modeとの併用::        picture-mode との併用の際の問題点。
* Org-modeとの併用::            Org-mode との併用の際の問題点。
@end menu

@node ファイル構成
@section ファイル構成
@cindex @file{ccc.el}
@cindex @file{leim-list.el}
@cindex @file{skk.el}

SKK の基本的な機能は、@file{skk.el} に収められています。一方、
DDSKK で応用機能を提供するプログラムのほとんどは @file{skk.el} と
は別のファイルに収めています。これらは、必要に応じてオートロードするよう
に設計されています。各応用機能の概略と該当のファイル名について説明します。

@cindex @file{skk-vars.el}
また、DDSKK の変数は @file{skk-vars.el} に集約されていますので、カスタマ
イズしたい場合などには、このファイルを見ると参考になるかもしれません。

@table @file
@item context-skk.el
@cindex @file{context-skk.el}

編集の文脈に応じて自動的に skk のモードを切り替えたり、SKK の各種設定を変
更する機能を提供します。

@xref{文脈に応じた自動モード切り替え}.

@item skk-abbrev.el
@cindex @file{skk-abbrev.el}

SKK abbrev モードの機能を提供するプログラムを集めたファイル。

@xref{アスキー文字を見出し語とした変換, , SKK abbrev mode}.

@item skk-act.el
@cindex @file{skk-act.el}

dvorak 配列での拡張ローマ字入力 "ACT" を SKK で使うための設定を提供しま
す。

@xref{ACT}.

@item skk-annotation.el
@cindex @file{skk-annotation.el}

個人辞書に付けたアノテーション (注釈) を活用するプログラムを集めたファイ
ル。

@xref{注釈 (アノテーション)}.

@item skk-auto.el
@cindex @file{skk-auto.el}

送り仮名の自動処理を行うプログラムを集めたファイル。

@xref{送り仮名の自動処理}.

@item skk-autoloads.el
@cindex @file{skk-autoloads.el}

オートロードの設定を記述したファイル。@code{register-input-method} も行う。

@xref{はじめの設定}.

XEmacs で DDSKK をパッケージとしてインストールした場合
は @file{auto-autoloads.el} というファイルがこれに相当します。

@item skk-azik.el
@cindex @file{skk-azik.el}

拡張ローマ字入力 "AZIK" の設定を提供します。

@xref{AZIK}.

@item skk-bayesian.el
@cindex @file{bayesian/skk-bayesian.el}

SKK の学習機能のひとつで、ユーザの過去の入力から変換候補を予測します。

@url{https://github.com/skk-dev/ddskk/bayesian/README.ja}

@item skk-cdb.el
@cindex @file{skk-cdb.el}

CDB 形式辞書ファイルを辞書サーバなしに直接利用できるプログラム。

@xref{最も基本的な設定}.

@item skk-comp.el
@cindex @file{skk-comp.el}

見出し語の補完を行うプログラムを集めたファイル。

@xref{補完}.

@item skk-cursor.el
@cindex @file{skk-cursor.el}

カーソルの色を制御するプログラムを集めたファイル。

@xref{入力モードを示すカーソル色に関する設定}.

@item skk-cus.el
@cindex @file{skk-cus.el}
@kbd{M-x customize-group} による対話的な設定変更機能の簡易版を提供します。

@xref{Customize による設定変更}.

@item skk-dcomp.el
@cindex @file{skk-dcomp.el}

skk-comp による補完を自動的に実行して見出し語入力を支援します。

@xref{動的補完}.

@item skk-develop.el
@cindex @file{skk-develop.el}

バグレポートのメールバッファを用意するプログラムファイル。

@item skk-emacs.el
@cindex @file{skk-emacs.el}

（DDSKK 14.1 以前のファイル名: @file{skk-e21.el}）

GNU Emacs 21 以降の拡張機能を利用するプログラムを集めたファイル。
インジケータのカラー化や画像表示、ツールティップ利用など。

@item skk-gadget.el
@cindex @file{skk-gadget.el}

プログラム実行変換を行うプログラムを集めたファイル。

@xref{プログラム実行変換}.

@item skk-hint.el
@cindex @file{skk-hint.el}

SKK の変換候補が多いときにヒントを与えて絞りこむ機能を提供します。

@xref{候補の絞り込み}.

@item skk-inline.el
@cindex @file{skk-inline.el}

変換候補のインライン表示機能を集めたファイル。

@xref{変換候補一覧の表示方法}.

@item skk-isearch.el
@cindex @file{skk-isearch.el}

DDSKK を併用したインクリメンタル・サーチ機能を提供します。

@xref{I-search関連}.

@item skk-jisx0201.el
@cindex @file{skk-jisx0201.el}

JIS X 0201 カナ@footnote{いわゆる半角カナ。以下、このマニュアルでは「半角
カナ」と記述します。}を利用する機能を提供します。

@item skk-jisx0213.el
@cindex @file{skk-jisx0213.el}

JIS X 0213 文字集合を扱うプログラムです。この機能は Emacs 23 では標準で
利用できます。それ未満のバージョンの Emacs においては、Mule-UCS を導入す
るなどの対策が必要です。Mule-UCS については 
@uref{http://tats.haun.org/mule-ucs/, Mule-UCS Unofficial Site} を参照
してください。

@item skk-jisyo-edit-mode.el
@cindex @file{skk-jisyo-edit-mode.el}

SKK 辞書を編集するためのメジャーモードを提供します。

@item skk-kakasi.el
@cindex @file{skk-kakasi.el}

KAKASI インターフェイスプログラムを集めたファイル。

@xref{領域の操作}.

@item skk-kanagaki.el
@cindex @file{skk-kanagaki.el}

キーボードのかな配列などに対応する枠組みを提供します。
現段階では旧 JIS 配列のかなキーボード及び NICOLA 規格の親指シフト配
列に対応しています。

@xref{かな入力と親指シフト}.

@item skk-kcode.el
@cindex @file{skk-kcode.el}

文字コードまたはメニューによる文字入力を行うプログラムを集めたファイル。

@xref{文字コードまたはメニューによる文字入力}.

@item skk-leim.el
@cindex @file{skk-leim.el}

LEIM 関連プログラムファイル。DDSKK を Emacs の input method として利用で
きるようにします。

@xref{DDSKK を Emacs の Input Method とする}.

@item skk-look.el
@cindex @file{skk-look.el}

@command{look} コマンドとのインターフェイスプログラムを集めたファイル。

@xref{skk-look}.

@item skk-lookup.el
@cindex @file{skk-lookup.el}

Lookup で検索できる辞書を使って単語の候補を出力するプログラム。

@xref{skk-lookup}.

@item skk-macs.el
@cindex @file{skk-macs.el}

他のファイルで共通して使用するマクロなどを中心にまとめたファイル。

@item skk-num.el
@cindex @file{skk-num.el}

数値変換を行うプログラムを集めたファイル。

@xref{数値変換}.

@item skk-server-completion.el
@cindex @file{skk-server-completion.el}

拡張された辞書サーバによる見出し語補完機能を利用できます。

@xref{サーバコンプリージョン}.

@item skk-server.el
@cindex @file{skk-server.el}

辞書サーバと通信して変換する機能を提供します。

@xref{サーバ関連}.

@item skk-setup.el
@cindex @file{skk-setup.el}

自動的に個人設定を行うためのファイル。

@xref{はじめの設定}.

@item skk-show-mode.el
@cindex @file{skk-show-mode.el}

カーソル付近に入力モードを表示する機能を提供します。

@xref{入力モードを切り替えるキー}.

@item skk-sticky.el
@cindex @file{skk-sticky.el}

変換開始位置及び送り開始位置の指定方法を変更可能にする。

@xref{変換位置の指定方法}.

@item skk-study.el
@cindex @file{skk-study.el}

直前に確定したいくつかの語との関連性を確認し、候補順を操作する学習効果
を提供するプログラム。

@xref{変換の学習}.

@item skk-tankan.el
@cindex @file{skk-tankan.el}

SKK を使って単漢字変換を行うプログラムです。

@xref{単漢字変換}.

@item skk-tut.el
@cindex @file{skk-tut.el}

SKK チュートリアルプログラム。

@xref{チュートリアル}.

@item skk-tutcode.el
@cindex @file{skk-tutcode.el}

SKK で TUT-code 入力を実現します。

@xref{TUT-code}.

@item skk-version.el
@cindex @file{skk-version.el}

DDSKK のバージョン情報を提供するプログラムファイル。

@item skk-viper.el
@cindex @file{skk-viper.el}

VIPER インターフェイスプログラムを集めたファイル。

@xref{VIP/VIPERとの併用}.

@item skk-xemacs.el
@cindex @file{skk-xemacs.el}

XEmacs の拡張機能を利用するプログラムを集めたファイル。
インジケータのカラー化や画像表示、ツールティップ利用など。
@end table

@node ユーザオプションの設定方法
@section ユーザオプションの設定方法

@cindex @file{~/.emacs.d/init.el}
@cindex @file{~/.xemacs/init.el}
@cindex @file{~/.skk}
DDSKK のカスタマイズは、@file{~/.emacs.d/init.el} あるいは @file{~/.skk} に記述し
ます。また、各ファイルの提供するフックも利用します。上記のファイルやフッ
クを利用した設定がいつ有効になるのか、という点についてここで説明します
@footnote{以前のバージョンでは、どのようなカスタマイズが行われている場合
でもチュートリアル使用時に標準設定に戻す目的で、変数の宣言に
@code{defconst} を使用していたので、全てのカスタマイズは @file{~/.skk}
で行う必要がありましたが、DDSKK 11 以降では、@code{defcustom} を使用した
宣言を行っているので、この制限はなくなりました。}。

@menu
* 設定ファイル::
* フック::
* Customize による設定変更::  このマニュアルで解説されていない変数も設定できます。
* skk-customize による設定変更::
@end menu

@node 設定ファイル
@subsection 設定ファイル

@table @file
@item ~/.emacs.d/init.el
@itemx ~/.xemacs/init.el

Emacs を起動したときに一度だけ読み込まれます。
このマニュアルは @file{~/.emacs.d/init.el} という記述で統一しています。

@xref{Init File, ,Emacs Initialization File, emacs, GNU Emacs Manual}.

@item ~/.skk

DDSKK を起動した最初の一度だけ読み込まれます。ファイル名のデフォルトは、OS
の種類により異なりますが、実際は Emacs の関数
@code{convert-standard-filename} により加工されます。
@findex convert-standard-filename
@file{~/.skk} のファイル名は変数 @code{skk-init-file} で変更することがで
きます。また、DDSKK にはこのファイルを自動的にバイトコンパイルする機能が
あります。

@xref{skk-init-fileの自動コンパイル}.
@end table

@defvr {ユーザ変数} skk-user-directory
DDSKK は、@file{~/.skk} や @file{~/.skk-jisyo} といった複数のファイルを
使用します。これらのファイルをひとつのディレクトリにまとめて置きたい場合
は、変数 @code{skk-user-directory} にそのディレクトリ名を設定します。

この変数のデフォルトは @code{nil} です。この変数は @file{~/.emacs.d/init.el} で設定
してください。DDSKK 起動時に @code{skk-user-directory} が指すディレクトリ
が存在しない場合は、自動的に作られます。

@lisp
(setq skk-user-directory "~/.ddskk")
@end lisp

この変数を設定した場合（例えば上記 @code{~/.ddskk}）、以下に挙げる各変
数のデフォルト値が変更されます。

@example
@group
影響を受ける変数          デフォルト値      変更後のデフォルト値
skk-init-file             ~/.skk            ~/.ddskk/init
skk-jisyo                 ~/.skk-jisyo      ~/.ddskk/jisyo
skk-backup-jisyo          ~/.skk-jisyo.BAK  ~/.ddskk/jisyo.bak
skk-emacs-id-file         ~/.skk-emacs-id   ~/.ddskk/emacs-id
skk-record-file           ~/.skk-record     ~/.ddskk/record
skk-study-file            ~/.skk-study      ~/.ddskk/study
skk-study-backup-file     ~/.skk-study.BAK  ~/.ddskk/study.bak
skk-bayesian-history-file ~/.skk-bayesian   ~/.ddskk/bayesian
@end group
@end example

なお、@code{skk-user-directory} を設定した場合でも、各変数を個別に設定し
ている場合はその個別の設定が優先されます。

@end defvr

@menu
* skk-init-fileの自動コンパイル::
@end menu

@node skk-init-fileの自動コンパイル
@subsubsection skk-init-fileの自動コンパイル

@defvr {ユーザ変数} skk-byte-compile-init-file

@cartouche
@smallformat
ここでは
@itemize @minus
@item 「DDSKK の設定ファイル」を @code{el} と、
@item 「DDSKK の設定ファイルをバイトコンパイルしたファイル」を @code{elc} と
@end itemize

それぞれ呼ぶこととします。
@end smallformat
@end cartouche

DDSKK の起動時に、

@itemize @bullet
@item この変数の値が @code{non-nil} であれば、

@itemize @minus
@item @code{elc} が存在しないか、又は
@item @code{elc} よりも @code{el} が新しいとき
@end itemize

は、@code{el} をバイトコンパイルした @code{elc} を生成します。

@item この変数の値が @code{nil} であれば、

@code{elc} よりも @code{el} が新しいときは、@code{elc} を消去します。
@end itemize

以上の機能を有効にしたい場合は、@file{~/.emacs.d/init.el} に

@lisp
(setq skk-byte-compile-init-file t)
@end lisp

@noindent
と記述します。この変数は @file{~/.skk} が読み込まれる前に調べられるた
め、@file{~/.skk} に上記の設定を記述してもこの機能は有効になりません。
@end defvr

@node フック
@subsection フック

@table @code
@item skk-mode-hook
@vindex skk-mode-hook

@kbd{C-x C-j} と入力して SKK モードに入る度に呼ばれます。主にバッファロー
カルの設定などを行います。

@item skk-auto-fill-mode-hook
@vindex skk-auto-fill-mode-hook

@kbd{C-x j} と入力してオートフィルモード付きで SKK モードに入る度に呼ば
れます。主にバッファローカルの設定などを行います。

@item skk-load-hook
@vindex skk-load-hook

@file{skk.el} の読み込みを完了した時点で呼ばれます。@file{~/.skk} は SKK
モードを起動しなければ読み込まれないのに対し、このフックは、
@file{skk.el} を読み込んだら SKK モードを起動しなくとも呼ばれます。

@item  skk-act-load-hook
@itemx skk-auto-load-hook
@itemx skk-azik-load-hook
@itemx skk-comp-load-hook
@itemx skk-gadget-load-hook
@itemx skk-kakasi-load-hook
@itemx skk-kcode-load-hook
@itemx skk-num-load-hook
@itemx skk-server-load-hook
@c @itemx skk-viper-load-hook
@vindex skk-act-load-hook
@vindex skk-auto-load-hook
@vindex skk-azik-load-hook
@vindex skk-comp-load-hook
@vindex skk-gadget-load-hook
@vindex skk-kakasi-load-hook
@vindex skk-kcode-load-hook
@vindex skk-num-load-hook
@vindex skk-server-load-hook
@c @vindex skk-viper-load-hook

@file{skk-act.el}, @file{skk-auto.el}, @file{skk-azik.el}, @file{skk-comp.el},
@file{skk-gadget.el}, @file{skk-kakasi.el}, @file{skk-kcode.el}, 
@file{skk-num.el}, @file{skk-server.el}
@c , @file{skk-viper.el} 
の各ファイルの読み込みが完了した直後に呼ばれるフック。
@end table

@findex eval-after-load
@code{load-hook} が提供されていないプログラムであっても、ロード完了後に何らか
の設定を行いたい場合は、関数 @code{eval-after-load} を使用します。例え
ば、

@lisp
@group
(eval-after-load "skk-look"
  '(
    @dots{}
    ))
@end group
@end lisp

@noindent
のように記述します。

@node Customize による設定変更
@subsection Customize による設定変更
@cindex Customize

Emacs 標準の Customize 機能を使って SKK を設定することもできます。
ただし、 Customize での設定は @file{~/.emacs.d/init.el} での設定と同様、
@file{~/.skk} による設定で上書きされてしまいますので注意してください。

@kindex M-x customize-group
@kindex M-x skk-emacs-customize

@kbd{M-x customize-group} を実行すると skk の設定を対話的に変更することができます。ミニバッファに ``Customize group:'' とプロンプトが表示されます。

@example
@group
------ Minibuffer -------
Customize group: (default emacs) @point{}
------ Minibuffer -------
@end group
@end example

ここで ``skk'' と答えると、SKK グループの画面へ展開します。

@kbd{M-x skk-emacs-customize} と実行するのも同様です。

あるいは、モードラインの SKK インジケータをマウスの右ボタン（第３ボタン）
でクリックすると表示されるメニューから ``SKKをカスタマイズ'' を選んでも同
じ画面となります。

カスタマイズの使い方は以下を参照してください。

@display
@xref{Easy Customization, , Easy Customization, emacs, GNU Emacs Manual}.
@end display

skk で設定できる変数の中には、まだこのマニュアルで解説されていないものも
あります。 Customize を使うと、それらについても知ることができます。

@node skk-customize による設定変更
@subsection skk-customize による設定変更

@kindex M-x skk-customize

前述の「Emacs 標準の Customize 機能 (@kbd{M-x customize-group}) 」による
設定が複雑すぎると感じるユーザのために、簡易版として @kbd{M-x skk-customize} を
用意しています。これは SKK グループのユーザオプションのうち、よく使うもの
だけ抜粋して設定できるようにしたものです。

これは、モードラインの SKK インジケータをマウスの右ボタン（第３ボタン）で
クリックして表示されるメニューから ``SKK をカスタマイズ (簡易版)'' を選ん
で呼び出すこともできます。

@node カタカナ、英字入力の便法
@section カタカナ、英字入力の便法

この節では、カタカナや全英文字を入力するための、便利な方法を説明します。
単純に各モードを用いる方法については前述しました。
(@w{@pxref{入力モード, , カナモード、全英モード}})

@menu
* かなモードからカタカナを入力::
* 全英文字の入力::
* 領域の操作::  領域の中の文字種を変換
* カタカナの見出し語::
* 文脈に応じた自動モード切り替え::  プログラムでは、コメントの中だけ skk
@end menu

@node かなモードからカタカナを入力
@subsection かなモードからカタカナを入力
@kindex q
@cindex トグル変換

まず、かなモードに入ります。@kbd{Q} キーでいったん▽モードにして何かひらがなを入力し、
最後に @kbd{q} をタイプすると、カタカナに変換され確定されます。

実際には、ひらがな以外からも変換できます。以下のようになります。

@itemize @bullet
@item カタカナはひらがなへ
@item ひらがなはカタカナへ
@item 全英文字はアスキー文字へ
@item アスキー文字は全英文字へ
@end itemize

細かく言えば、@samp{▽} とポイント間の文字列の
種類@footnote{正確には @samp{▽} の次の位置にある文字列によって文字種を
判別しているので、途中で文字種類の違う文字が混在していても無視されます。} を
キーとして変換が行われます。
かなモード、カナモード、どちらでも同じです。

このような変換を、トグル変換と呼びます。以下はトグル変換の例です。

@example
@kbd{K a t a k a n a}

@group
------ Buffer: foo ------
▽かたかな@point{}
------ Buffer: foo ------
@end group

@kbd{q}

@group
------ Buffer: foo ------
カタカナ@point{}
------ Buffer: foo ------
@end group
@end example

このトグル変換を上手く利用することにより、かなモードのまま一時的にカタカ
ナを入力したり、またその逆を行うことができます。こうすると、例えばひらが
な／カタカナが混在した文章を書くときに、その都度 @kbd{q} キーを押して入力
モードを切り換える必要がありません
@footnote{全英文字とアスキー文字のトグルでの変換を行うこともできます。
ただし、全英モードやアスキーモードでは @kbd{Q} やその他の大文字により▽
モードに入ることができないので、かな ⇔ カナ のときと同様にトグル変換で
きるわけではありません。かなモード/カナモードにおいて、既に入力さ
れた全英文字、アスキー文字に対してトグル変換をするような設計になっていま
す。}。

領域を対象としたコマンドでも「かな←→カナ」のトグル変換を行うことができ
ます。(@w{@pxref{領域の操作}})

@node 全英文字の入力
@subsection 全英文字の入力
@kindex /
@kindex C-q

まず、かなモードに入ります。次に @kbd{/} をタイプすると SKK abbrev モー
ド@footnote{SKK abbrev モードでは @samp{is} @result{} @samp{インクリメン
タル・サーチ} のような変換を行うことができます。他の変換と同様、
@key{SPC} を押すと変換モードに入ってしまいますので、 SKK abbrev モードか
らアスキー文字を入力するのは、一語のみの場合以外は不便です。
(@w{@pxref{アスキー文字を見出し語とした変換}})}
に入りますのでアルファベット (アスキー文字) を入力します。
アルファベットの入力後に
@kbd{C-q} @footnote{@kbd{C-q} は @code{skk-abbrev-mode-map} にて
特別な動作をするように定義されています。
@xref{アスキー文字を見出し語とした変換}.}をタイプすることで @samp{▽}マー
クから @kbd{C-q} をタイプした位置までの間にあるアルファベットが全角アルフ
ァベットに変換されて確定されます。

@example
@kbd{/ f i l e}

@group
------ Buffer: foo ------
▽file@point{}
------ Buffer: foo ------
@end group

@kbd{C-q}

@group
------ Buffer: foo ------
ｆｉｌｅ@point{}
------ Buffer: foo ------
@end group
@end example

なお、この変換を行うために、

@example
file /ｆｉｌｅ/
@end example

@noindent
のような辞書エントリを持つ必要はありません。なぜなら、辞書を参照せずにア
スキー文字を 1 文字ずつ全英文字に変換しているからです。

@node 領域の操作
@subsection 領域の操作

以下のコマンドを @kbd{M-x} により呼ぶことで、領域内の文字列を一括変換する
ことができます
@cindex Menu Bars
@cindex メニューバー
@footnote{メニューバーが使用できる環境では、メニューバーを使ってこれらの一括変換
コマンドを呼び出すことができます。ただし @command{kakasi} がインストールされていない
場合は @command{kakasi} を利用する機能が灰色になり使用できません。
@w{@xref{Menu Bars, ,メニューバー, emacs, GNU Emacs Manual}.}}。

@table @kbd
@item M-x skk-hiragana-region
@kindex M-x skk-hiragana-region
@findex skk-hiragana-region

カタカナをひらがなへ変換。

@item M-x skk-katakana-region
@kindex M-x skk-katakana-region
@findex skk-katakana-region

ひらがなをカタカナへ変換。

@item M-x skk-latin-region
@kindex M-x skk-latin-region
@findex skk-latin-region

全英文字をアスキー文字へ変換。

@item M-x skk-jisx0208-latin-region
@kindex M-x skk-jisx0208-latin-region
@findex skk-jisx0208-latin-region

アスキー文字を全英文字へ変換。
@end table

@cindex 逆引き
以下に紹介する「漢字から読みを求めるコマンド」は、外部プログラム @command{KAKASI}
@footnote{@uref{http://kakasi.namazu.org/, KAKASI - 漢字→かな(ローマ字)変換プログラム}} が必要です。
@command{KAKASI} がインストールされていなければ使用することができません。

@table @kbd
@item M-x skk-gyakubiki-region
@kindex M-x skk-gyakubiki-region
@findex skk-gyakubiki-region

漢字をひらがなへ変換。具体的な変換例をあげると、

@example
``漢字をひらがなへ変換。''@expansion{}``かんじをひらがなへへんかん。''
@end example

@noindent
のようになります。引数を渡して、

@kbd{C-u M-x skk-gyakubiki-region}

のようにすると、複数の候補がある場合に、`@{@}' で囲って表示します。例え
ば

@example
``中島''@expansion{}``@{なかしま|なかじま@}''
@end example

@noindent
のようになります。

送り仮名がある語は、送り仮名まで含めて領域に指定します (さもないと誤変換
の原因となります)。 例えば、@samp{五月蝿い} について、送り仮名 @samp{い}
を含めずにこのコマンドを実行すると、@samp{ごがつはえ} に変換されてしまい
ます。

@item M-x skk-gyakubiki-and-henkan
@kindex M-x skk-gyakubiki-and-henkan
@findex skk-gyakubiki-and-henkan

領域の漢字をひらがなへ変換し、これで得たひらがなを見出し語として
漢字変換を実行します。

@item M-x skk-gyakubiki-katakana-region
@kindex M-x skk-gyakubiki-katakana-region
@findex skk-gyakubiki-katakana-region

漢字をカタカナへ変換。

引数を渡して、@kbd{C-u M-x skk-gyakubiki-katakana-region} のようにすると、
複数の候補がある場合に、`@{@}' で囲って表示します。

@item M-x skk-hurigana-region
@kindex M-x skk-hurigana-region
@findex skk-hurigana-region

漢字にふりがなを付ける。例えば、

@example
``漢字の脇に''@expansion{}``漢字[かんじ]の脇[わき]に''
@end example

@noindent
のようになります。引数を渡して @kbd{C-u M-x skk-hurigana-region} のよう
にすると、複数の候補がある場合に、`@{@}' で囲って表示します。

@item M-x skk-hurigana-katakana-region
@kindex M-x skk-hurigana-katakana-region
@findex skk-hurigana-katakana-region

漢字にカタカナのふりがなを付ける。

引数を渡して、@kbd{C-u M-x skk-hurigana-katakana-region} のようにすると、
複数の候補がある場合に、`@{@}' で囲って表示します。

@item M-x skk-romaji-region
@kindex M-x skk-hurigana-region
@findex skk-romaji-region

漢字、ひらがな、カタカナをローマ字へ、全英文字をアスキー文字へ変換。標準
では、ローマ字への変換様式はヘボン式です。例えば、

@example
``し'' @expansion{} ``shi''
@end example

@noindent
となります。

@end table

以下のコマンドは、領域内の文字列を置き換える代わりに、変換結果をエコーエ
リアに表示します。

@itemize @bullet
@item @kbd{M-x skk-gyakubiki-message}
@kindex M-x skk-gyakubiki-message
@findex skk-gyakubiki-message
@item @kbd{M-x skk-gyakubiki-katakana-message}
@kindex M-x skk-gyakubiki-katakana-message
@findex skk-gyakubiki-katakana-message
@item @kbd{M-x skk-hurigana-message}
@kindex M-x skk-hurigana-message
@findex skk-hurigana-message
@item @kbd{M-x skk-hurigana-katakana-message}
@kindex M-x skk-hurigana-katakana-message
@findex skk-hurigana-katakana-message
@item @kbd{M-x skk-romaji-message}
@kindex M-x skk-romaji-message
@findex skk-romaji-message
@end itemize

@c http://mail.ring.gr.jp/skk/200110/msg00005.html
@defvr {ユーザ変数} skk-gyakubiki-jisyo-list

関数 @code{skk-gyakubiki-region} はコマンド @command{kakasi} を呼び出し
ています。
@command{kakasi} には漢字をひらがなへ変換する機能があり、この変換には環
境変数 @env{KANWADICTPATH} で指定されている辞書を利用しています。

変数 @code{skk-gyakubiki-jisyo-list} を設定することによっ
て @command{kakasi} へ与える辞書を任意に追加することができます。
以下のように設定して @command{kakasi} へ個人辞書 @code{skk-jisyo} を与え
ることによって辞書登録モードで登録したばかりの単語も @command{kakasi} に
よる逆引き変換の対象とすることができます。

@lisp
(setq skk-gyakubiki-jisyo-list (list skk-jisyo))
@end lisp
@end defvr

@defvr {ユーザ変数} skk-romaji-*-by-hepburn

この変数の値を @code{nil} に設定すると、
コマンド @code{skk-romaji-@{region|message@}} によるローマ字への変換様式
に訓令式を用います。デフォルトは @code{t} です。

例えば、

@example
``し'' @expansion{} ``si''
@end example

@noindent
のようになります
@footnote{昭和 29 年 12 月 9 日付内閣告示第一号によれば、原則的に訓令式
(日本式) を用いるかのように記載されていますが、今日一般的な記載方法は、
むしろヘボン式であるようです。}。

@end defvr

@node カタカナの見出し語
@subsection カタカナの見出し語

@kbd{q} のタイプでかなモード、カナモードを度々切り替えて入力を続けていると、
カナモードで誤って▼モードに入ってしまうことがあります。そのため、カナ
モードで▼モードに入った場合は、まず見出し語をひらがなに変換してから辞
書の検索に入るよう設計されています。なお、この場合の送りあり変換での送
り仮名は、カタカナになります。

@node 文脈に応じた自動モード切り替え
@subsection 文脈に応じた自動モード切り替え
@cindex 文脈に応じた自動モード切り替え
@cindex @file{context-skk.el}
@kindex M-x context-skk-mode

@file{context-skk.el} は、編集中の文脈に応じて SKK の入力モードを自動的に
アスキーモードに切り替える等の機能を提供します。

@file{context-skk.el} をロードするには、@file{~/.emacs.d/init.el} に

@lisp
@group
(add-hook 'skk-load-hook
	  (lambda ()
	    (require 'context-skk)))
@end group
@end lisp

と書いてください。

あるプログラミング言語のプログラムを書いているとき、日本語入力の必要があ
るのは一般に、そのプログラミング言語の文字列中かコメント中に限られます。
たとえば Emacs Lisp で日本語入力の必要があるのは
@lisp
@group
"文字列"
;; コメント
@end group
@end lisp
といった個所だけでしょう。
文字列・コメントの「外」を編集するときは、多くの場合は日本語入力は必要あ
りません。

現在の文字列・コメントの「外」で編集開始と同時に（skk がオンであれば）
skk の入力モードをアスキーモードに切り替えます。
エコーエリアに

@example
@group
-------------------- Echo Area --------------------
[context-skk] 日本語入力 off
-------------------- Echo Area --------------------
@end group
@end example

と表示され、アスキーモードに切り替わったことが分かります。
これにより、文字列・コメントの「外」での編集を開始するにあたって、日本語
入力が on になっていたために発生する入力誤りとその修正操作を回避すること
ができます。

上記の機能は context-skk-mode というマイナーモードとして実装されており
@kbd{M-x context-skk-mode} でオン／オフを制御できます。
オンの場合、モードラインのメジャーモード名の隣に「;▽」と表示されます。

@defvr {ユーザ変数} context-skk-programming-mode
context-skk が「プログラミングモード」と見做すメジャーモード。
@end defvr

@defvr {ユーザ変数} context-skk-mode-off-message
アスキーモードに切り替わった瞬間にエコーエリアに表示するメッセージ。
@end defvr

@node 補完
@section 補完
@cindex 見出し語の補完
@cindex 読みの補完
@cindex 補完

読みの前半だけを入力して @key{TAB} を押せば残りを自動的に補ってくれる、
これが補完です。 Emacs ユーザにはおなじみの機能が DDSKK でも使えます。

@menu
* 読みの補完::           「かか」 + Tab -> 「かかみがはらし」 !
* 補完しながら変換::      「かしたん」 + M-SPC -> 「瑕疵担保責任」 !!
* 動的補完::             入力しながら候補を表示
@end menu

よく使う長い語を効率良く入力するには、アルファベットの略語を登録する方法もあります。
(@w{@pxref{アスキー文字を見出し語とした変換}})

@node 読みの補完
@subsection 読みの補完

@kindex @key{TAB}
▽モードで @key{TAB} を押すと、見出し語（▽マークから、ポイントまでの文字
列）に対する補完が行われます@footnote{細かい説明です。 @key{TAB} を押す直
前に▽モードで入力された文字列を X と呼ぶことにします。このとき、個人辞書
の送りなしエントリの中から「先頭が X と一致し」かつ「長さが X よりも長い
見出し語」を検索して、そのような語が該当すれば X の代わりに表示します。}。
見出し語補完は、個人辞書の内、送りなしエントリに対して行われます。
個人辞書に限っているのは、共有辞書では先頭の文字を共通にする見出し語が多すぎて、
望みの補完が行える確率が低いためです。

@kindex ,
@kindex .
次の読みの候補を表示するには、@kbd{.} (ピリオド) を、戻る時には @kbd{,} 
(コンマ)を押します。その読みで別の語を出すには、いつものように @key{SPC} を
押します。

例を見てみましょう。実際の動作は、個人辞書の内容によって異なります。

@example
@kbd{S a}

@group
------ Buffer: foo ------
▽さ@point{}
------ Buffer: foo ------
@end group

@key{TAB}

@group
------ Buffer: foo ------
▽さとう@point{}
------ Buffer: foo ------
@end group

@kbd{.}

@end example

@example
@group
------ Buffer: foo ------
▽さいとう@point{}
------ Buffer: foo ------
@end group

@kbd{,}

@group
------ Buffer: foo ------
▽さとう@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼佐藤@point{}
------ Buffer: foo ------
@end group

@kbd{C-j}

@group
------ Buffer: foo ------
佐藤@point{}
------ Buffer: foo ------
@end group
@end example

補完される見出し語がどのような順で表示されるかと言うと「最近使われた語から」
となります。例えば、@samp{斉藤}、@samp{佐藤} の順で変換した後、@samp{さ} をキー
にして見出し語の補完を行うと、最初に @samp{さとう} が、その次に
@samp{さいとう} が補完されます。これは、個人辞書では、最近使われたエントリほど
上位に来るようになっているためです。@footnote{@ref{辞書の書式}}

いったん @key{SPC} を入力して▼モードに入ると、以後は見出し語補完は行われません。

@kindex @kbd{C-u @key{TAB}}
また、@kbd{.} の代わりに @kbd{C-u @key{TAB}} を入力
すると、現在の候補に対して補完をします。上の例では @samp{さ} に対し、
@samp{さとう} が補完された時に @kbd{C-u @key{TAB}} を押すと、
以後の補完は、@samp{さとう} を含む語 (例えば、@samp{さとうせんせい}など)
について行われます。

@defvr {ユーザ変数} skk-comp-circulate
@kbd{.} （ピリオド）で次の見出し語候補を、@kbd{,} （コンマ）で前の見出し
語候補を表示するところ、候補が尽きていればデフォルト @code{nil} では「○
○で補完すべき見出し語は他にありません」とエコーエリアに表示して動作が止
まります。この変数が @code{non-nil} であれば当初の見出し語を再び表示して
見出し語補完を再開します。
@end defvr

@defvr {ユーザ変数} skk-try-completion-char
見出し語補完を開始するキーキャラクタです。デフォルトは @key{TAB} です。
@end defvr

@defvr {ユーザ変数} skk-next-completion-char
次の見出し語候補へ移るキーキャラクタです。デフォルトはピリオド @kbd{.} です。
@end defvr

@defvr {ユーザ変数} skk-previous-completion-char
前の見出し語候補へ戻るキーキャラクタです。デフォルトはコンマ @kbd{,} です。
@end defvr

@cindex backtab
@kindex SHIFT TAB
@defvr {ユーザ変数} skk-previous-completion-use-backtab
@code{Non-nil} であれば、前の見出し語候補へ戻る動作を @kbd{@key{SHIFT}+@key{TAB}} で
も可能とします。デフォルトは @code{t} です。
この機能の有効化／無効化の切り替えは、ファイル @file{~/.skk} を書き換えて Emacs を
再起動してください。
@end defvr

@defvr {ユーザ変数} skk-previous-completion-backtab-key
@kbd{@key{SHIFT}+@key{TAB}} が発行する key event です。Emacs の種類／実行環境
によって異なります。
@end defvr

@defun skk-comp-lisp-symbol &optional PREDICATE
この関数をリスト @code{skk-completion-prog-list} へ追加すると、Lisp symbol 名
の補完を行います。

@lisp
@group
(add-to-list 'skk-completion-prog-list
             '(skk-comp-lisp-symbol) t)
@end group
@end lisp

@end defun

@node 補完しながら変換
@subsection 補完しながら変換
@kindex M-@key{SPC}

前節で見出し語の補完について述べました。本節では、見出し語の補完動作を行
った後、@key{SPC} を入力し、▼モードに入るまでの動作を一回の操作で行
う方法について説明します。

やり方は簡単。@key{TAB}・@key{SPC} と打鍵していたところを @kbd{M-@key{SPC}} に
換えると、見出し語を補完した上で変換を開始します。

この方法によると、補完される見出し語があらかじめ分かっている状況では、キー
入力を一回分省略できるので、読みが長い見出し語の単語を連続して入力する場合
などに威力を発揮します。

@example
@group
@kbd{K a s i t a n n p o s e k i n i n n}

------ Buffer: foo ------
▽かしたんぽせきにん@point{}
------ Buffer: foo ------
@end group

@group
@key{SPC}, @key{RET}

------ Buffer: foo ------
瑕疵担保責任@point{}
------ Buffer: foo ------
@end group

@group
@kbd{K a}

------ Buffer: foo ------
▽か@point{}
------ Buffer: foo ------
@end group

@group
@kbd{M-@key{SPC}}

------ Buffer: foo ------
▼瑕疵担保責任@point{}
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-start-henkan-with-completion-char

デフォルトは @kbd{M-@key{SPC}} です。

@end defvr

@node 動的補完
@subsection 動的補完
@cindex @file{skk-dcomp.el}

▽モードでは、@key{TAB} を押さなくとも、文字を入力する都度、自動的に見
出し語補完の読みを表示させる事ができます。この機能を以下「動的補完」と呼
びます。類似の機能としては、ウェブブラウザの URL の入力や、Microsoft Excel の
セル入力の自動補完@footnote{同じ列に既に入力している文字列があったときに
それを参照して補完しようとする機能}をイメージすると分かりやすいかも知れ
ません。動的補完も、個人辞書の送りなしエントリに対してのみ行なわれます。

動的補完を利用するには @file{~/.skk} に次の式を書きましょう。

@lisp
(setq skk-dcomp-activate t)
@end lisp

例を見てみましょう。実際の動作は、個人辞書の内容によって左右されます。 @point{} は
ポイント位置を表します。

@example
@group

@kbd{H o}

---------------- Buffer: foo ------------------
▽ほ@point{}んとう
---------------- Buffer: foo ------------------

@end group
@end example

face が使える環境では、@samp{んとう}の部分が異なる face で表示され、動的
補完機能によって補完された部分であることを示します。

自動的に補完された見出し語が自分の意図したものであれば、 @key{TAB} を押
すことでポイント位置を動かし、補完された見出し語を選択することができます。

@example
@group
@key{TAB}

---------------- Buffer: foo ------------------
▽ほんとう@point{}
---------------- Buffer: foo ------------------
@end group
@end example

この状態から @key{SPC} を押して変換するなり、@kbd{q} を押してカタカナに
するなり、DDSKK 本来の動作を何でも行うことができます。

補完された見出し語が自分の意図したものでない場合は、かまわず次の入力を続
けて下さい。補完された部分を無視したかのように動作します。

@example
@group

@kbd{H o}

---------------- Buffer: foo ------------------
▽ほ@point{}んとう
---------------- Buffer: foo ------------------

@kbd{k a}

---------------- Buffer: foo ------------------
▽ほか@point{}ん
---------------- Buffer: foo ------------------

@end group
@end example

補完されない状態が自分の意図したものである場合も、補完された部分を単に無
視するだけで OK です。下記の例では、@samp{ほ} を見出し語とした変換を行っ
ています。

@example
@group

@kbd{H o}

---------------- Buffer: foo ------------------
▽ほ@point{}んとう
---------------- Buffer: foo ------------------

@key{SPC}

---------------- Buffer: foo ------------------
▼保
---------------- Buffer: foo ------------------
@end group
@end example

補完された状態から @key{BS} を押すと、消された補完前の見出し語から再度補
完動作を行います。

@example
@group

@kbd{H o}

---------------- Buffer: foo ------------------
▽ほ@point{}んとう
---------------- Buffer: foo ------------------

@kbd{k a}

---------------- Buffer: foo ------------------
▽ほか@point{}ん
---------------- Buffer: foo ------------------

@key{BS}

---------------- Buffer: foo ------------------
▽ほ@point{}んとう
---------------- Buffer: foo ------------------
@end group
@end example


@defvr {ユーザ変数} skk-dcomp-activate

この変数の値が @code{Non-nil} であれば、カーソル位置に関わらず常に動的補完が有効となります。
値がシンボル @code{eolp} であれば、カーソルが行末にあるときに限って動的補完が有効となります。
値が @code{nil} であれば、動的補完機能は無効となります。

@end defvr

@defvr {ユーザ変数} skk-dcomp-face

この変数の値はフェイスであり、このフェイスによって動的に補完された部分が
装飾されます。標準は ``DarkKhaki'' です。

@end defvr

@defvr {ユーザ変数} skk-dcomp-multiple-activate

@b{XEmacs では動作しません。}

@code{Non-nil} であれば、動的補完の候補をインラインに複数表示します
@footnote{現在は候補群の右側1カラムのフェイスがデフォルトに戻る、という制約があります。}。

@example
@group
---------------- Buffer: foo ------------------
▽ほ@point{}んとう
　ほんとう
　ほかん
　ほっかいどう
　ほうほう
　@dots{}
---------------- Buffer: foo ------------------
@end group
@end example

@kindex @key{TAB}
@kindex ,
@kindex .
@kindex SHIFT TAB

候補の選択には @key{TAB} 又は @kbd{@key{SHIFT}+@key{TAB}} を押します。また、
普通の補完と同様に @kbd{.} (ピリオド) と @kbd{,} (コンマ) も利用できま
す。@w{@ref{読みの補完}}

@end defvr

@defvr {ユーザ変数} skk-dcomp-multiple-rows

動的補完の候補を複数表示する場合の表示行数。標準は 7。

@end defvr

@defvr {ユーザ変数} skk-dcomp-multiple-face

動的補完の複数表示群のフェイス。上記例では「ほ」のフェイス。

@end defvr

@defvr {ユーザ変数} skk-dcomp-multiple-trailing-face

動的補完の複数表示郡の補完部分のフェイス。上記例では「んとう」、「かん」
「っかいどう」、「うほう」のフェイス。

@end defvr

@defvr {ユーザ変数} skk-dcomp-multiple-selected-face

動的補完の複数表示郡の選択対象のフェイス。上記例では @key{TAB} を押すたび
に「ほんとう」、「ほかん」、「ほっかいどう」と選択位置が移ります。その現在
選択位置に適用するフェイスです。

@end defvr

@node 便利な変換、その他の変換
@section 便利な変換、その他の変換

@menu
* 単漢字変換::                 一文字だけ漢字に変換
* 候補の絞り込み::              「わ」だけど「魏志倭人伝」の「倭」が欲しい
* 接頭辞・接尾辞::               接頭辞・接尾辞だけを変換
* 数値変換::                    数を含む文字列の変換。
* アスキー文字を見出し語とした変換::  「wg」 -> 「ワーキンググループ」
* 今日の日付の入力::             今日の日付を一発入力。
* プログラム実行変換::           Emacs Lisp プログラムを使った変換。
* 空白・改行・タブを含んだ見出し語の変換::
* カタカナ変換::                個人辞書でカタカナ語を育てられます。
* サ変動詞変換::                サ行変格活用動詞の送りあり変換が可能です
* 異体字へ変換する::
* ファンクションキーの使い方::
@end menu

@node 単漢字変換
@subsection 単漢字変換
@cindex @file{skk-tankan.el}
@cindex 単漢字

ファイル @file{skk-tankan.el} を読み込むことによって単漢字変換が可能とな
ります。候補は総画数の昇順でソートして表示します。

@menu
* 検索キーの設定::
* 辞書の設定::
* 総画数による単漢字変換::
* 部首による単漢字変換::
* 部首の読みによる単漢字変換::
@end menu

単漢字変換を使うには設定が必要ですが、先に例を見てみましょう。

▽モードの最後の文字に @kbd{@@} を付加してから変換を開始してください。

@example
T a n @@

@group
----- Buffer: foo -----
▽たん@@@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼丹@point{}
----- Buffer: foo -----
@end group

@group
----- Echo Area -----
4画(丶部3画)
----- Echo Area -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼反@point{}
----- Buffer: foo -----
@end group

@group
----- Echo Area -----
4画(又部2画)
----- Echo Area -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼旦@point{}
----- Buffer: foo -----
@end group

@group
----- Echo Area -----
5画(日部1画)
----- Echo Area -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼但@point{}
----- Buffer: foo -----
@end group

@group
----- Echo Area -----
7画(人部5画)
----- Echo Area -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼@point{}
----- Buffer: foo -----
@end group

@group
----- Buffer: *候補* -----
A:坦;8画(土部5画)
S:担;8画(手部5画)
D:単;9画(十部7画)
F:彖;9画(彑部6画)
J:炭;9画(火部5画)
K:眈;9画(目部4画)
L:胆;9画(肉部5画)
[残り 50+++++]
----- Buffer: *候補* -----
@end group
@end example

以上のとおり、総画数の昇順でソートされた候補が次々に表示されます。

@node 検索キーの設定
@subsubsection 検索キーの設定

デフォルトの検索キーは @kbd{@@} です。
DDSKK の標準設定ではキー @kbd{@@} は関数 @code{skk-today} の実行に割り
当てられていますが、DDSKK 14.2 からは特段の設定なしに▽モードで @kbd{@@} の
タイプが可能となりました。

@defvr {ユーザ変数} skk-tankan-search-key
単漢字変換の検索キーは、変数 @code{skk-tankan-search-key} で変更できます。
以下は、検索キーを @kbd{!} へと変更する例です。

@lisp
(setq skk-tankan-search-key ?!)
@end lisp

@end defvr

@node 辞書の設定
@subsubsection 辞書の設定

@findex skk-tankan-search

DDSKK 14.2 からは、標準で変数 @code{skk-search-prog-list} に
@code{skk-tankan-search} が含まれています。
DDSKK 14.1 を利用の方、ご自身で @code{skk-search-prog-list} を設定する方は
以下の解説を参考にしてください。

@file{skk-tankan.el} には、漢字の部首とその中での画数の
データのみが入っています。読みのデータは、普通の辞書ファイルを使います。

単漢字変換の辞書の設定は、変数 @code{skk-search-prog-list} に以下の形式で
要素を追加します。

@lisp
(skk-tankan-search 'function . args) 
@end lisp

@b{「確定変換」}を併用する場合は、@code{skk-search-prog-list} の
先頭の要素は @code{skk-search-kakutei-jisyo-file} でなければいけませんので、
@code{skk-search-prog-list} の２番目の要素に @code{skk-tankan-search} を追加します。

@lisp
@group
;; skk-search-prog-list の２番目の要素に skk-tankan-search を追加する
(setq skk-search-prog-list
      (cons (car skk-search-prog-list)
            (cons '(skk-tankan-search 'skk-search-jisyo-file
                                      skk-large-jisyo 10000)
                  (cdr skk-search-prog-list))))
@end group
@end lisp

なお、確定変換を使用しない場合は、 @code{skk-search-prog-list} の要素
の先頭が @code{skk-tankan-search} でも大丈夫です。

@lisp
@group
(add-to-list 'skk-search-prog-list
             '(skk-tankan-search 'skk-search-jisyo-file
                                 skk-large-jisyo 10000))
@end group
@end lisp

@xref{辞書の検索方法の設定}.

@node 総画数による単漢字変換
@subsubsection 総画数による単漢字変換
@cindex 画数変換
@kindex C-u 総画数 M-x skk-tankan

▽モードで総画数を入力して最後に @kbd{@@} を付加してから変換を開始します
@footnote{@kbd{C-u 総画数 M-x skk-tankan} でも可。}。

@example
Q 1 0 @@

@group
----- Buffer: foo -----
▽10@@@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: *候補* -----
A:倹;10画(人部8画)
S:倦;10画(人部8画)
D:個;10画(人部8画)
F:候;10画(人部8画)
J:倖;10画(人部8画)
K:借;10画(人部8画)
L:修;10画(人部8画)
[残り 532+++++++]
----- Buffer: *候補* -----
@end group

@end example

@node 部首による単漢字変換
@subsubsection 部首による単漢字変換
@cindex 部首変換
@kindex M-x skk-tankan

▽モードで @kbd{@@} を２つ重ねて変換を開始すると、部首による単漢字変換が
できます@footnote{@kbd{M-x skk-tankan} でも可。}。

@example
Q @@ @@

@group
----- Buffer: foo -----
▽@@@@@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
------ Minibuffer -------
部首を番号で選択（TABで一覧表示）: @point{}
------ Minibuffer -------
@end group

@key{TAB}

@group
------ *Completions* -------
Click <mouse-2> on a completion to select it.
In this buffer, type RET to select the completion near point.

Possible completions are:
001 一 (いち)                      002 ｜ (ぼう、たてぼう)
003 丶 (てん)                      004 丿 (の)
005 乙 (おつ)                      006 亅 (はねぼう)
 ：                                 ：
------ *Completions* -------
@end group

@kindex M-v
@kbd{0 1 8 @key{RET}} @footnote{@kbd{M-v} の打鍵で、カーソルを *Completions* バッファへ移すこともできます。}

@group
----- Buffer: *候補* -----
A:切;4画(刀部2画)
S:刈;4画(刀部2画)
D:刊;5画(刀部3画)
F:刋;5画(刀部3画)
J:刎;6画(刀部4画)
K:刑;6画(刀部4画)
L:刔;6画(刀部4画)
[残り 51+++++++]
----- Buffer: *候補* -----
@end group

@end example

@defvr {ユーザ変数} skk-tankan-face

@kbd{M-x skk-tankan} を実行したときに表示される「単漢字バッファ」で使用
するフェイスです。

@end defvr

@defvr {ユーザ変数} skk-tankan-radical-name-face

部首の読みに適用するフェイスです。

@end defvr

@node 部首の読みによる単漢字変換
@subsubsection 部首の読みによる単漢字変換

直前の小々節「部首による単漢字変換」にて、部首番号を入力するプロンプトで
単に @key{RET} をタイプすると、部首の読みを入力するプロンプトに替わります。

@example

@group
------ Minibuffer -------
部首を読みで選択（TABで一覧表示）: @point{}
------ Minibuffer -------
@end group

@key{TAB}

@group
------ Completion List -------
In this buffer, type RET to select the completion near point.

Possible completions are:
あいくち         (021) 匕          あお             (174) 青
あか             (155) 赤          あくび           (076) 欠
あさ             (200) 麻          あさかんむり     (200) 麻
 ：                                 ：
------ Completion List -------
@end group

@end example

@node 候補の絞り込み
@subsection 候補の絞り込み
@cindex @file{skk-hint.el}

@file{skk-hint.el} は、２つの読みの積集合みたいなものを取ることによって
候補の絞り込みを行うプログラムです。
インストールは @file{~/.skk} に以下を記入します。

@lisp
(require 'skk-hint)
@end lisp

例えば、読み ``かんどう'' に対する変換は L 辞書によると

@example
感動、勘当、完動、間道、官道、貫道
@end example

と複数の候補があります。

一方、これに ``あいだ'' という「他の読み」(ヒント)を与えると候補は
``間道'' に一意に決まります。
ヒントは @kbd{;} に続けて入力します。

@example
@kbd{K a n d o u ; a i d a}

※ @samp{;} 自体は表示されません。

----- Buffer: foo -----
▽かんどうあいだ
----- Buffer: foo -----

@key{SPC}

----- Buffer: foo -----
▼間道
----- Buffer: foo -----
@end example

@file{skk-hint.el} は、２つの読みの厳密な積集合を取っているわけではなく、
通常の変換候補のなかでヒントとして与えられた読みを含んだ漢字を持つものに
候補を絞ります。この実例として ``感動'' と ``感圧'' を挙げます。

@example
@kbd{K a n d o u ; k a n n a t u}

----- Buffer: foo -----
▽かんどうかんあつ
----- Buffer: foo -----

@key{SPC}

----- Buffer: foo -----
▼感動
----- Buffer: foo -----
@end example

@file{skk-hint.el} は単漢字の候補がたくさんある場合に、そこから候補を絞
りこむ手段としても非常に有効です。例えば

@example
▽わ
@end example

を変換すると、輪、環、話、和、羽、@dots{}と大量に候補が出てきます。
この中から ``和'' を選びたいとします。普通に変換していても
そのうち ``和'' が表示されますが、これを @kbd{W a ; h e i w a} と入力し
変換すると、「▼へいわ」の候補である「平和」に含まれる

@example
▼和
@end example

が唯一の候補となります。

@example
@kbd{W a ; h e i w a}

----- Buffer: foo -----
▽わへいわ
----- Buffer: foo -----

@key{SPC}

----- Buffer: foo -----
▼和
----- Buffer: foo -----
@end example

@defvr {ユーザ変数} skk-hint-start-char
ヒント変換を開始するキーを character で指定します。
@end defvr

@node 接頭辞・接尾辞
@subsection 接頭辞・接尾辞
@cindex 接頭辞
@cindex 接尾辞

接頭辞 (prefix)、接尾辞 (suffix)の入力のために特別な方法が用意されていま
す。たとえば、「し」の候補は沢山あり、「し」から「氏」を変換するのは、そのままでは
効率が悪いです。接尾辞の「し」ならば、「氏」や「市」が優先されるでしょう。

接頭辞・接尾辞は辞書の中では、@samp{>} などで示されます。

@example
>し /氏/
@end example

@noindent
というエントリがあるとき、@samp{小林氏}を接尾辞入力を用いて、以下のよう
に入力することができます。

@example
@kbd{K o b a y a s h i}

@group
------ Buffer: foo ------
▽こばやし@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼小林@point{}
------ Buffer: foo ------
@end group

@kbd{>}

@group
------ Buffer: foo ------
小林▽>@point{}
------ Buffer: foo ------
@end group

@kbd{s i}

@group
------ Buffer: foo ------
小林▽>し@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
小林▼氏@point{}
------ Buffer: foo ------
@end group

@kbd{C-j}

@group
------ Buffer: foo ------
小林氏@point{}
------ Buffer: foo ------
@end group
@end example

接頭辞も同様です。辞書に

@example
ちょう> /超/
@end example

@noindent
というエントリがあるとき、@samp{超大型} を接頭辞入力を用いて、以下のよう
に入力することができます。

@example
@kbd{T y o u}

@group
------ Buffer: foo ------
▽ちょう@point{}
------ Buffer: foo ------
@end group

@kbd{>}

@group
------ Buffer: foo ------
▼超@point{}
------ Buffer: foo ------
@end group

@kbd{O o g a t a}

@group
------ Buffer: foo ------
超▽おおがた@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
超▼大型@point{}
------ Buffer: foo ------
@end group

@kbd{C-j}

@group
------ Buffer: foo ------
超大型@point{}
------ Buffer: foo ------
@end group
@end example

キー @kbd{>} を押しただけで、@key{SPC} が押されたかのように変換されます。
他の接頭辞を選びたいときは、@key{SPC} を押して下さい。

@defvr {ユーザ変数} skk-special-midashi-char-list

▽モードまたは▼モードにおいて、この変数の値に含まれる文字の入力があった
場合、接頭辞・接尾辞の入力を開始します。この変数のデフォルトは、

@lisp
(?> ?< ??)
@end lisp

@noindent
です。つまり、@samp{>} と @samp{<} と @samp{?} を入力した時に接頭辞・接尾辞入
力を行います。@samp{?} を入力したときに接頭辞・接尾辞入力を行わない場合は
@samp{?} を外して

@lisp
(setq skk-special-midashi-char-list '(?> ?<))
@end lisp

@noindent
とします。

L 辞書の接頭・接尾辞は、昔は @samp{<}, @samp{?} も使われていましたが、
現在は @samp{>} に統一されています。
@end defvr

@node 数値変換
@subsection 数値変換
@cindex #0
@cindex #1
@cindex #2
@cindex #3
@cindex #4
@cindex #5
@cindex #8
@cindex #9
@cindex 数をパラメータとする語の変換
@cindex 数値再変換
@cindex 大字
@cindex 漢数字
@cindex 金額

DDSKK は、@b{数字を含む見出し語}を様々な候補に変換することができます。
例えば、見出し語 @samp{だい12かい} を変換すると @samp{第１２回}、
@samp{第一二回}、@samp{第十二回} といった候補を挙げます。

この節では、このような候補を辞書に登録する方法を説明します。基本は、
数字の部分を @samp{#} で置き替えることです。辞書 @file{SKK-JISYO.L} のエ
ントリーから具体例を見てみましょう。

@example
だい#かい /第#1回/第#0回/第#2回/第#3回/第 #0 回/
@end example

@noindent
@samp{だい12かい} のような@b{数字を含む見出し語}を変換した場合、見出し
語の中の数字の部分は自動的に @samp{#} に置き換えられますの
で、辞書エントリーの左辺（つまり見出し語） @samp{だい#かい} にマッチします。

辞書エントリーの右辺の @samp{#1}、@samp{#2} などは「どのように数字を加工
するか」のタイプを表します。以下、各タイプについて説明します。

@table @samp
@item #0

タイプ 0。無変換。入力されたアスキー文字をそのまま出力します。例えば、
@samp{第12回} のような変換を得るために使います。

@item #1

タイプ 1。全角文字の数字。@samp{12} を @samp{１２} に変換します。

@item #2

タイプ 2。漢数字で位取りあり。@samp{1024} を @samp{一〇二四} に変換しま
す。

@item #3

タイプ 3。漢数字で位取りなし。@samp{1024} を @samp{千二十四} に変換しま
す。

@item #4

タイプ 4。数値再変換。見出し語中の数字そのもの
@footnote{@samp{p125} という見出し語であれば、その数値部分である
@samp{125} が再変換の見出し語となります。}をキーとして辞書を再検索し、
@samp{#4} の部分を再検索の結果の文字列で入れ替えます。これについては後で
例を挙げて説明します。

@item #5

タイプ 5。小切手や手形の金額記入の際用いられる表記で変換します。例えば、
@samp{1995} を @samp{壱阡九百九拾伍} に変換します。(これを大字と言います。)

@item #8

タイプ 8。桁区切り。@samp{1234567} を @samp{1,234,567} に変換します。

@item #9

タイプ 9。将棋の棋譜の入力用。@samp{全角数字 + 漢数字} に変換します。こ
れについては後で例を挙げて説明します。
@end table

以下にいくつか例を示します。辞書に

@example
# /#3/
@end example

@noindent
というエントリがあるときに、

@example
@group
@kbd{Q 1 0 0 2 0 0 3 0 0 4 0 0 5 0 0 @key{SPC}}
@end group
@end example

@noindent
と入力@footnote{または @kbd{/ 1 0 0 2 0 0 3 0 0 4 0 0 5 0 0 @key{SPC}}}
すれば、@samp{百兆二千三億四十万五百} と変換されます
@footnote{SHIFT キーを伴って数字を入力し始めることはできないので、@kbd{Q} または
@kbd{/} で▽モードに入る必要があります。}。

辞書に

@example
#m#d /#0月#0日/
@end example

@noindent
というエントリがあるときに、@kbd{/ 2 m 2 5 d @key{SPC}} と入力すれば、
@samp{2月25日}と変換されます
@footnote{@samp{m} や @samp{d} などアスキー文字を見出し語として入
力する場合は @kbd{/} キーを最初に入力して SKK abbrev モードに入ってから
入力する必要があります。
@w{@xref{アスキー文字を見出し語とした変換, , SKK abbrev mode}.}}。

辞書に

@example
#kin /#9金/
@end example

@noindent
というエントリがあるときに、@kbd{/ 3 4 k i n @key{SPC}} と入力すれば、
@samp{３四金}と変換されます。

辞書に

@example
@group
p# /#4/
125 /東京都葛飾区/
@end group
@end example

@noindent
というエントリがあるときに、@kbd{/ p 1 2 5 @key{SPC}} と入力すれば、見出
し語 @samp{p125} の候補が @samp{#4} なので、見出し語の数字部分の
@samp{125} に対し辞書が再検索され、@samp{東京都葛飾区} と変換されます。

最後に、実際に登録する例を 1 つ挙げます。@samp{２月２５日}を得るために、

@example
@kbd{Q 2 g a t u 2 5 n i t i @key{SPC}}
@end example

@noindent
と入力したときに、辞書に見出し語

@example
#がつ#にち /#1月#1日/
@end example

@noindent
がないときは、辞書登録モードのプロンプトは、@w{@samp{#がつ#にち}}となります。
全角数字のタイプは、@samp{#1} なので、 @w{@samp{#1月#1日}} をミニバッファで作り登
録します。

タイプを覚えている必要はありません。ちゃんと、ウィンドウが開かれて説明が
表示されます。

@defvr {ユーザ変数} skk-num-convert-float

この変数の値を @code{non-nil} に設定すると、浮動小数点数を使った見出し語
に対応して数値変換を行います。ただし、辞書において

@example
#.# /#1．#1/#0月#0日/
@end example

などの見出し語が使用できなくなります。

@end defvr

@defvr {ユーザ変数} skk-show-num-type-info

@code{Non-nil} であれば、辞書登録モードに入るのと同時に変換タイプの案内を
表示する。デフォルトは @code{t} です。

@end defvr

@defvr {ユーザ変数} skk-num-grouping-separator

タイプ 8 (@samp{#8}) で使用する記号。デフォルトは @samp{,}。

@end defvr

@defvr {ユーザ変数} skk-num-grouping-places

タイプ 8 (@samp{#8}) について、何桁毎に区切るのかを数値で指定する。デフォルトは 3。

@end defvr

@defvr {ユーザ変数} skk-use-numeric-conversion

この変数を @code{nil} に設定すると、本節で説明した数値変換の機能を全て
無効にします。

@end defvr

@node アスキー文字を見出し語とした変換
@subsection アスキー文字を見出し語とした変換

@cindex SKK abbrev mode
かなモードで @kbd{/} をタイプすると @dfn{SKK abbrev mode} に入り、以後の
入力はアスキー文字になります。普通に @key{SPC} を押すと、その見出し語に係
る変換が得られます。

仮に、辞書に

@example
is /インクリメンタル・サーチ/
@end example

@noindent
というエントリがあるとして、以下に例を示します。

@example
@kbd{/}

@group
------ Buffer: foo ------
▽@point{}
------ Buffer: foo ------
@end group

@kbd{i s}

@group
------ Buffer: foo ------
▽is@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼インクリメンタル・サーチ@point{}
------ Buffer: foo ------
@end group

@kbd{C-j}

@group
------ Buffer: foo ------
インクリメンタル・サーチ@point{}
------ Buffer: foo ------
@end group
@end example

候補を確定すると SKK abbrev モードを抜けてかなモードに戻ります。

SKK abbrve モードで使われる辞書は、普通のかな漢字変換と同じです。見出し語
がアスキー文字で書かれているだけで、特殊な点はありません。

上記の例において @key{SPC} の代わりに @kbd{C-q} をタイプすることで、入力
したアスキー文字をそのまま全角アルファベットに変換することもできます。
(@w{@ref{全英文字の入力}})

なお、SKK abbrev モードにおいても @key{TAB} による「見出し語の補完」を行
うことができます。(@w{@pxref{補完}})

@node 今日の日付の入力
@subsection 今日の日付の入力
@kindex @@
@cindex プログラム実行変換

かな/カナモードで @kbd{@@} を入力すれば、今日の日付が入力されます。

日付の形式は以下の変数により決定されます。

@defvr {ユーザ変数} skk-date-ad

この変数の値が @code{non-nil} であれば西暦で、@code{nil} であれば元号で
表示します。デフォルトは @code{nil} です。

@end defvr

@defvr {ユーザ変数} skk-number-style

この変数の値は以下のように解釈されます。デフォルトは @samp{1} です。

@table @code
@item 0
@itemx nil

ASCII 数字。@samp{1996年7月21日(日)} のようになります。

@item 1
@itemx t

全角数字。@samp{１９９６年７月２１日(日)} のようになります。

@item 2

漢数字(位取)。@samp{一九九六年七月二一日(日)} のようになります。

@item 3

漢数字。@samp{千九百九十六年七月二十一日(日)} のようになります。
@end table

上記の @samp{1996年}、@samp{１９９６年}、@samp{一九九六年} の部分は、変
数 @code{skk-date-ad} の値が @code{nil} であれば @samp{平成8年} のよう
に元号で表示されます。
@end defvr

L 辞書
@footnote{@ref{辞書の種類, , L辞書}.}には、見出し語 @samp{today} の候補
として、@code{skk-date-ad} と @code{skk-number-style} の全ての組み合わせが
プログラム実行変換機能@footnote{@ref{プログラム実行変換}.} を用いて登録さ
れています。従って、@kbd{/ t o d a y @key{SPC}} と入力すると、今日の日付
が上記の形式で順次候補として表示されます。

関数 @code{skk-relative-date} を利用すると、昨日、一昨日、明後日など任意
の日付を求めることができます。詳細は @file{skk-gadget.el} のコメントを参
照してください。

なお、@kbd{@@} のタイプで日付を挿入するのではなく、文字どおり @samp{@@} を
挿入したい場合は次のとおり。

@lisp
@group
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("@@" nil "@@"))))
@end group
@end lisp

全角文字の @samp{＠} を挿入したい場合は次のとおり。

@lisp
@group
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("@@" nil "＠"))))
@end group
@end lisp

@node プログラム実行変換
@subsection プログラム実行変換
@cindex @file{skk-gadget.el}

辞書の候補に Emacs Lisp のプログラムが書いてあれば、そのプログラムを
Emacs に実行させ、返り値をカレントバッファに挿入します。これを @b{「プロ
グラム実行変換」}と呼んでいます。例えば、辞書に

@example
now /(current-time-string)/
@end example

@noindent
というエントリがあるとします。このとき @kbd{/ n o w @key{SPC}} と入力す
れば、現在のバッファに @code{current-time-string} の返り値である

@example
Sun Jul 21 06:40:34 1996
@end example

@noindent
のような文字列が挿入されます。

ここで、プログラムの返り値は文字列である必要があります。また、プログラム
実行変換の辞書登録は通常の単語と同様に行うことができますが、その中に改
行を含まないように書く必要があります
@footnote{通常の単語では、改行を含むことが可能です。それは、評価するとその位置に
改行を挿入するような実行変換プログラムに変換して辞書に書き込んでいるからです。
@w{@xref{辞書の種類}.}

しかし、実行変換されるプログラムを辞書登録する際にはこの機能を利用できないため、
改行を含むことができません。}。

今日の日付の入力
@footnote{@xref{今日の日付の入力}.} で説明した @samp{today} の辞書エント
リは、実際は下記のようなプログラムを候補にもっています。

@lisp
@group
today /(let ((skk-date-ad) (skk-number-style t)) (skk-today))/@dots{}/
@end group
@end lisp

@file{skk-gadget.el} には、西暦／元号変換や簡単な計算などプログラム実行変
換用の関数が集められています。

@defun skk-calc operator

skk-calc は、引数を 1 つ取り、見出し語の数字に対しその演算を行う簡単な計算
プログラムです。

@lisp
@group
(defun skk-calc (operator)
  ;;@r{2つの引数を取って operator の計算をする。}
  ;;@r{注意: '/ は引数として渡せないので (defalias 'div '/) などとし、別の形で}
  ;;@r{skk-calc に渡す。}
  ;;@r{辞書見出し例; #*# /(skk-calc '*)/}
  (number-to-string (apply operator
                           (mapcar 'string-to-number 
                                   skk-num-list))))
@end group
@end lisp

この関数を実際にプログラム実行変換で利用するには、辞書に以下のようなエン
トリを追加します
@footnote{@ref{数値変換}.}。

@example
#*# /(skk-calc '*)/
@end example

@noindent
@kbd{Q 1 1 1 * 4 5 @key{SPC}} と入力します。ここで、@samp{111} と
@samp{45} の 2 つの数字は、変換時に @w{@code{("111" "45")}} のような文字
列のリストにまとめられ、変数 @code{skk-num-list} の値として保存されます。
次に関数 @code{skk-calc} が呼ばれます。この中で、@code{skk-num-list} の
各要素に対し演算を行うため、各要素は数に変換されます。その上で、
@code{skk-calc} に与えられた引数 (この場合は @samp{*}) を演算子として演
算を行います。
@end defun

@defun skk-gadget-units-conversion 基準単位 数値 変換単位

数値について、基準単位から変換単位への変換を行います。

@example
@kbd{/ 1 3 m i l e}

@group
------ Buffer: foo ------
▽13mile@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼20.9209km@point{}
------ Buffer: foo ------
@end group

@key{RET}

@group
------ Buffer: foo ------
20.9209km@point{}
------ Buffer: foo ------
@end group
@end example

単位変換の情報は、変数 @code{skk-units-alist} で定義されています。
@end defun

@defvr {ユーザ変数} skk-units-alist

この変数は以下の形式の連想リストです。

@example
(基準となる単位 (変換する単位 . 変換時の倍率)
                (… . …))
@end example

関数 @code{skk-gadget-units-conversion} で利用されています。デフォルトで
は、以下の単位変換の情報を定義しています。

@lisp
@group
("mile" ("km" . 1.6093)
        ("yard" . 1760))

("yard" ("feet" . 3)
        ("cm" . 91.44))

("feet" ("inch" . 12)
        ("cm" . 30.48))

("inch" ("feet" . 0.5)
        ("cm" . 2.54))
@end group
@end lisp
@end defvr

@defun skk-relative-date pp-function format and-time &key (yy 0) (mm 0) (dd 0)

@code{skk-current-date} の拡張版。@code{PP-FUNCTION}, @code{FORMAT}, @code{AND-TIME} の
意味は @code{skk-current-date} の docstring を参照のこと。
キーワード変数 @code{:yy}, @code{:mm}, @code{:dd} に正または負の数値を指定することで
明日、明後日、一昨日などの日付を求めることができる。
詳細は @file{skk-gadget.el} のコメントを参照のこと。

@end defun 

@node 空白・改行・タブを含んだ見出し語の変換
@subsection 空白・改行・タブを含んだ見出し語の変換

変換の際、見出し語の中の空白、改行、タブは無視されます。

@example
@group
---------------- Buffer: foo ------------------
▽じんじょうしょ
うがっこう@point{}
---------------- Buffer: foo ------------------
@end group

@key{SPC}

@group
---------------- Buffer: foo ------------------
▼尋常小学校@point{}
---------------- Buffer: foo ------------------
@end group
@end example

オートフィルモードで折り返された文字列に対し、折り返された状
態のまま変換することもできます。

@example
@group
---------------- Buffer: foo ------------------
仮名漢字変換プログラムをさ
くせいしました。@point{}
---------------- Buffer: foo ------------------
@end group

@kbd{C-u 10 C-b Q}

@group
---------------- Buffer: foo ------------------
仮名漢字変換プログラムを▽@point{}さ
くせいしました。
---------------- Buffer: foo ------------------
@end group

@kbd{C-u 5 C-f}

@group
---------------- Buffer: foo ------------------
仮名漢字変換プログラムを▽さ
くせい@point{}しました。
---------------- Buffer: foo ------------------
@end group

@key{SPC}

@group
---------------- Buffer: foo ------------------
仮名漢字変換プログラムを▼作成@point{}しました。
---------------- Buffer: foo ------------------
@end group
@end example

ここでは改行を越えて見出し語を探し、変換する例を示しました。同様に、空白、
タブ文字を中間に含む文字列に対しても変換を行うことができます。

@defvr {ユーザ変数} skk-allow-spaces-newlines-and-tabs

この変数を @code{nil} に設定すると、本節で説明したような２行以上にまたが
る文字列に対する変換を禁止します。

@end defvr

@node カタカナ変換
@subsection カタカナ変換

@defvr {ユーザ変数} skk-search-katakana

通常、SKK でカタカナ語を入力するには、
@itemize @bullet
@item @kbd{q} でカナモードに移ってからカタカナを入力する
@item ▽モードで @kbd{q} によりカタカナへ変換する@footnote{@ref{かなモードからカタカナを入力}}
@end itemize 
のどちらかです。これらの方法は手軽ですが、個人辞書に登録されないため見出
し語の補完候補にも現れず、何度でも入力しなければいけません。

そこで、ここに紹介する方法ではカタカナ語が普通の変換候補として現れ、個人
辞書にも登録されます。設定するには以下を @file{~/.skk} に記述します
@footnote{@code{skk-search-prog-list} の設定をユーザが変更している場合は
期待どおりに動作しない場合があります。その場合は@code{skk-search-prog-list} の
設定に関数 @code{skk-search-katakana} の呼び出しがあることを確認してくだ
さい。またこの機能の設定は DDSKK 14.1 以前では異なります。詳しくはソース
に付属のドキュメント、設定例をご覧ください。}。

@lisp
(setq skk-search-katakana t)
@end lisp

また、値をシンボル@code{'jisx0201-kana} とすると、カタカナ候補に加え半角
カタカナ候補も変換候補に現れます。

@lisp
(setq skk-search-katakana 'jisx0201-kana)
@end lisp
@end defvr

@node サ変動詞変換
@subsection サ変動詞変換

@defvr {ユーザ変数} skk-search-sagyo-henkaku

通常、SKK では諸般の事情によりサ行変格活用の動詞は送りなし変換をする前提
になっています。このことは共有辞書のメンテナンスにおける便宜上やむをえな
いのですが、個人辞書が育たない (サ変動詞と名詞の区別ができない) という弱
点もあります。(@w{@pxref{サ変動詞の辞書登録に関する注意}})

しかし、ここに紹介する方法では任意の送りなし候補を利用してサ行の送りプレ
フィックスに限定して送りあり変換が可能になり、個人辞書を育てることが可能
になります。設定するには以下を @file{~/.skk} に記述します。
@footnote{@code{skk-search-prog-list} の設定をユーザが変更している場合は
期待どおりに動作しない場合があります。その場合は @code{skk-search-prog-list}
の設定に関数 @code{skk-search-sagyo-henkaku} の呼び出しがあることを確認
してください。またこの機能の設定は DDSKK 14.1 以前では異なります。詳しく
はソースに付属のドキュメント、設定例をご覧ください。}

@lisp
(setq skk-search-sagyo-henkaku t)
@end lisp

例えば @samp{お茶する} の変換は以下のように変化します。

@itemize @bullet
@item 従来 … @kbd{O c h a @key{SPC} s u r u}
@item サ変 … @kbd{O c h a S u r u}
@end itemize

変数の値を @code{anything} に設定すると、サ行に限らず任意の送り仮名を許
可し、送りあり変換をします。これにより、送りあり変換の利用範囲を形容詞・
動詞の変換のみならず、あらゆるひらがな開始点の指定に拡張することができま
す。

このサ変動詞送りあり変換機能は、カタカナ変換機能と組み合わせるとさらに有
効です。(@w{@pxref{カタカナ変換}})
@end defvr

@node 異体字へ変換する
@subsection 異体字へ変換する
@samp{辺} (42区53点) の異体字である @samp{邊} (78区20点) や @samp{邉} (78
区21点) を入力したいときがあります@footnote{辞書が充実していればかな漢字
変換で見出し語 @samp{へん} から @samp{邊} や @samp{邉} を求めることができ
ます。もちろん、文字コードを指定して @samp{邊} や @samp{邉} を直接挿入す
ることもできます。}。

@example
@point{}辺

@kbd{Q}

▽@point{}辺

@kbd{C-f}

▽辺@point{}

@key{SPC}

▼邊@point{}

@key{SPC}

▼邉@point{}

@end example

@defvr {ユーザ変数} skk-itaiji-jisyo

辞書ファイル @file{SKK-JISYO.itaiji} 又は @file{SKK-JISYO.itaiji.JIS3_4} へ
のパスを指定する。

他の辞書ファイルと異なり、この 2 つの辞書ファイルは見出し語が漢字です。

@end defvr

@defun skk-search-itaiji

not documented

@url{http://mail.ring.gr.jp/skk/200303/msg00071.html}

@end defun

@node ファンクションキーの使い方
@subsection ファンクションキーの使い方

@defvr {ユーザ変数} skk-j-mode-function-key-usage

シンボル @code{conversion} ならば、@code{skk-search-prog-list-1} 〜 @code{skk-search-prog-list-9} および @code{skk-search-prog-list-0} を
実行するよう自動設定します。これらのプログラムは▽モード限定でファンクション
キー (@key{[F1]} 〜 @key{[F10]}) に割り当てられます。@key{[F5]} 〜 @key{[F10]} に
ついては本オプションの設定により自動的に割り当てられます。
これらの割り当てはユーザオプション @code{skk-verbose} を設定するとエコー
エリアに表示されるようになります。(@w{@pxref{冗長な案内メッセージの表示}})

@itemize @bullet
@item @key{[F5]}  … 単漢字
@item @key{[F6]}  … 無変換
@item @key{[F7]}  … カタカナ
@item @key{[F8]}  … 半角カナ
@item @key{[F9]}  … 全角ローマ
@item @key{[F10]} … ローマ
@end itemize

シンボル @code{kanagaki} ならば、かなキーボード入力用に自動設定します。

@code{nil} ならば、自動設定しません。

@end defvr

@node キー設定
@section キー設定 
@cindex キー設定

@menu
文字の入力
* かなモード/カナモードのキー設定::
* 全英モードのキー設定::
* 閉じ括弧の自動入力::      
* リージョンを括弧で囲む::

@noindent
変換、確定など
* 確定するキー::                 RET 以外で確定されるには
* 候補の選択に用いるキー::         asdfjkl 以外
* ▼モードでのRET::              改行も同時にする? しない?
* ▼モードでのBS::               削除 vs 前候補
* 送りあり変換中のC-g::
* 変換位置の指定方法::            大文字以外でも変換位置を指定可能に。

@noindent
他
* 1回の取り消し操作(undo)の対象::
@end menu

関連項目: @w{@ref{ローマ字入力以外の入力方式}}

@node かなモード/カナモードのキー設定
@subsection かなモード/カナモードのキー設定

@menu
* ローマ字のルールの設定::
* ローマ字ルールの変更例::        略号なども設定できます。
* ■モードに関連するその他の変数::
* 数字や記号文字の入力::
@end menu

@node ローマ字のルールの設定
@subsubsection ローマ字のルールの設定

@table @code
@item skk-rom-kana-base-rule-list
@vindex skk-rom-kana-base-rule-list
@item skk-rom-kana-rule-list
@vindex skk-rom-kana-rule-list
@end table

DDSKK の■モードにおける文字変換は、これら２つの変数を用いて行われます。
@code{skk-rom-kana-base-rule-list} には基本的なローマ字かな変換のルールが
定められています。一方、@code{skk-rom-kana-rule-list} はユーザが独自のルールを
定めるために用意されており、@code{skk-rom-kana-base-rule-list} よりも優先されます。

これらは「入出力の状態がいかに移り変わるべきか」を決定します。その内容は、

@lisp
@example
(入力される文字列 出力後に自動的に入力に追加される文字列 出力)
@end example
@end lisp

@noindent
という形のリストを列挙したものです。

@itemize @bullet
@item 入力される文字列…変換される前のアスキー文字の文字列をいいます。

@item 出力…次の入力状態に移るときにバッファに挿入される文字列の組み合
わせであり、 @w{@code{("ア" . "あ")}} のようなコンスセルです。

@end itemize

@code{skk-rom-kana-base-rule-list} の一部を見てみましょう。

@lisp
@example
("a"  nil ("ア" . "あ"))
("ki" nil ("キ" . "き"))
("tt" "t" ("ッ" . "っ"))
("nn" nil ("ン" . "ん"))
("n'" nil ("ン" . "ん"))
@end example
@end lisp

@noindent
のような規則があります。これによると

@example
a  @expansion{}あ
ki @expansion{}き
tt @expansion{}っt
nn @expansion{}ん
n' @expansion{}ん
@end example

@noindent
のようになります。

@code{skk-rom-kana-base-rule-list} には、次のような便利な変換ルールも定め
られています。

@example
z  @expansion{} □ （全角スペース）
z* @expansion{} ※
z, @expansion{} ‥
z- @expansion{} 〜
z. @expansion{} …
z/ @expansion{} ・
z0 @expansion{} ○
z@@ @expansion{} ◎
z[ @expansion{} 『
z] @expansion{} 』
z@{ @expansion{} 【
z@} @expansion{} 】
z( @expansion{} （
z) @expansion{} ）
zh @expansion{} ←
zj @expansion{} ↓
zk @expansion{} ↑
zl @expansion{} →
zL @expansion{} ⇒
@end example

@node ローマ字ルールの変更例
@subsubsection ローマ字ルールの変更例

@code{skk-rom-kana-base-rule-list} の規則に従うと

@example
hannou @expansion{}はんおう
han'ou @expansion{}はんおう
hannnou @expansion{}はんのう
@end example

@noindent
のようになります。ここで

@lisp
@group
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("nn" "n" ("ン" . "ん")))))
@end group
@end lisp

@noindent
のような設定にすることで

@example
hannou @expansion{}はんのう
@end example

@noindent
のようにローマ字かな変換が行われるようになります。

他の例として、略号を設定することもできます。

@example
tp @expansion{}東北大学
skk @expansion{}skk
skK @expansion{}SKK
@end example

@noindent
といった変換は、

@lisp
@group
("tp" nil ("東北大学" . "東北大学"))
("sk" nil ("" . ""))
("skk" nil ("skk" . "skk"))
("skK" nil ("SKK" . "SKK"))
@end group
@end lisp

@noindent
のような規則を追加することで実現されます。自分の名前を入力することはよく
あるので、適当な省略形を用いて、このリストに追加しておく、といった利用を
お勧めします。

更に @code{skk-rom-kana-rule-list} を用いれば TUT-code による日本語入力を
実現することもできます。TUT-code による入力についてはソースアーカイブ
の @samp{tut-code} ディレクトリに収録されている各ファイルを参照してくださ
い。@w{(@pxref{ローマ字入力以外の入力方式})}

@node ■モードに関連するその他の変数
@subsubsection ■モードに関連するその他の変数

@defvr {ユーザ変数} skk-kana-input-search-function

ルールリストの中に記せない変換ルールを処理する関数。
これは @code{skk-rom-kana-base-rule-list} と @code{skk-rom-kana-rule-list} の
要素を全て検索した後にコールされます。引数はありません。バッファの文字を、
直接 @code{preceding-char} などで調べて下さい。

初期設定では @kbd{h} で、長音を表すために使われています。次の例を見て下さい。

@example
ohsaka @expansion{} おおさか
ohta @expansion{} おおた
@end example

@noindent
一方で、@kbd{hh} は「っ」になります。

@example
ohhonn @expansion{} おっほん
ohhira @expansion{} おっひら
@end example

@noindent
これは @code{skk-rom-kana-rule-list} のデフォルトに

@lisp
("hh" "h" ("ッ" . "っ"))
@end lisp

@noindent
が入っているためです。これを削除すれば

@example
ohhonn @expansion{} おおほん
ohhira @expansion{} おおひら
@end example

@noindent
となります。
@end defvr

@kindex M-x skk-toggle-kutouten
@defvr {ユーザ変数} skk-kutouten-type
■モードの標準では、キーボードの @kbd{.} をタイプすると「。」が、
@kbd{,} をタイプすると「、」がバッファに入力されます。
変数 @code{skk-kutouten-type} に適切なシンボルを設定することにより、この
組み合せを変更することができます
@footnote{変数 @code{skk-use-kana-keyboard} が @code{non-nil} ならば無効
である。}。そのシンボルとは、次の４つです。

@example
'jp@ @ @ @ @expansion{} 「。」「、」 (デフォルト)
'en@ @ @ @ @expansion{} 「．」「，」
'jp-en @expansion{} 「。」「，」
'en-jp @expansion{} 「．」「、」
@end example

または、変数 @code{skk-kutouten-type} にはコンスセルを指定することも可
能です。その場合は、

@example
(句点を示す文字列 . 読点を示す文字列)
@end example

のように指定します。例として、次のように設定するとキーボード
の @kbd{.} で @code{abc} が、@kbd{,} で @code{def} がバッファに入力され
ます。
@c ↓実用的な例が思い付きませんでした
@lisp
(setq skk-kutouten-type '("abc" . "def"))
@end lisp

なお、変数 @code{skk-kutouten-type} はバッファローカル変数です。すべての
バッファで統一した設定としたい場合は、

@lisp
(setq-default skk-kutouten-type 'en)
@end lisp

のように関数 @code{setq-default} を用いてください。
@end defvr

@defvr {ユーザ変数} skk-use-auto-kutouten

デフォルトは @code{nil}。@code{Non-nil} であれば、カーソル直前の文字種に
応じて句読点を動的に変更します。

@end defvr

@node 数字や記号文字の入力
@subsubsection 数字や記号文字の入力

かなモード/カナモードにおける次のキーは、関数 @code{skk-insert} にバインドされています。

@example
@group
!  #  %  &  '  *  +

-  0  1  2  3  4  5

6  7  8  9  :  ;  <

=  >  ?  "  (  )  [

]  @{  @}  ^  _  `  |

~
@end group
@end example

これらの数字や記号文字のキーに対応し挿入される文字をカスタマイズするため
には、変数 @code{skk-rom-kana-rule-list} を利用します。

@lisp
@group
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("!" nil "!")
                ("," nil ",")
                ("." nil ".")
                (":" nil ":")
                (";" nil ";")
                ("?" nil "?"))))
@end group
@end lisp

@code{skk-insert} は、Emacs のオリジナル関数 @code{self-insert-command}
をエミュレートしています。具体的には、引数を渡すことによって同じ文字を複
数、一度に挿入することが可能です。

@example
@group

@kbd{C-u 2 !}

------ Buffer: foo ------
！！
------ Buffer: foo ------
@end group
@end example

@node 全英モードのキー設定
@subsection 全英モードのキー設定

全英モードにおける印字可能な全てのキーはコマンド
@code{skk-jisx0208-latin-insert} に割り付けられています。また、変数
@code{skk-jisx0208-latin-vector} の値により挿入される文字が決定され、
そのデフォルトは以下のようになっています。

@lisp
@group
[nil  nil  nil  nil  nil  nil  nil  nil
 nil  nil  nil  nil  nil  nil  nil  nil
 nil  nil  nil  nil  nil  nil  nil  nil
 nil  nil  nil  nil  nil  nil  nil  nil
 "　" "！" "”" "＃" "＄" "％" "＆" "’"
 "（" "）" "＊" "＋" "，" "−" "．" "／"
 "０" "１" "２" "３" "４" "５" "６" "７"
 "８" "９" "：" "；" "＜" "＝" "＞" "？"
 "＠" "Ａ" "Ｂ" "Ｃ" "Ｄ" "Ｅ" "Ｆ" "Ｇ"
 "Ｈ" "Ｉ" "Ｊ" "Ｋ" "Ｌ" "Ｍ" "Ｎ" "Ｏ"
 "Ｐ" "Ｑ" "Ｒ" "Ｓ" "Ｔ" "Ｕ" "Ｖ" "Ｗ"
 "Ｘ" "Ｙ" "Ｚ" "［" "＼" "］" "＾" "＿"
 "‘" "ａ" "ｂ" "ｃ" "ｄ" "ｅ" "ｆ" "ｇ"
 "ｈ" "ｉ" "ｊ" "ｋ" "ｌ" "ｍ" "ｎ" "ｏ"
 "ｐ" "ｑ" "ｒ" "ｓ" "ｔ" "ｕ" "ｖ" "ｗ"
 "ｘ" "ｙ" "ｚ" "｛" "｜" "｝" "〜" nil]
@end group
@end lisp

挿入される文字を変更したい場合は、@w{@ref{数字や記号文字の入力}} を参照し
てください。

@code{skk-jisx0208-latin-insert} も Emacs オリジナルの関数
@code{self-insert-command} をエミュレートしています。つまり、引数を渡す
ことにより同じ文字を複数、一度に挿入することができます。
@code{skk-insert} における動作と同じですから、
@w{@ref{数字や記号文字の入力}} の例を参考にしてください。

@node 閉じ括弧の自動入力
@subsection 閉じ括弧の自動入力

@c 次の行、今は当てはまらない? ChangeLog を見たが記述なし。(2009-11-19)
@c @samp{「}や@samp{」}が上手く処理されない...。
通常、`「' を入力したら、`」' を後で入力する必要があります。`「' の入
力時点で、対になる文字を自動挿入してくれると打鍵数を減らすことができます
し、同時に入力忘れの防止にもなるでしょう。

@vindex skk-auto-insert-paren
そのために変数 @code{skk-auto-insert-paren} が用意されています。この値を
@code{non-nil} にすると、上記の自動挿入を行います。

@example
@group
------ Buffer: foo ------
彼はこう言った@point{}
------ Buffer: foo ------

@kbd{[}

------ Buffer: foo ------
彼はこう言った「@point{}」
------ Buffer: foo ------
@end group
@end example

@noindent
@c @samp{「}や@samp{」}が上手く処理されない...。
上記のように `「' の入力時点で対となる`」'を自動挿入し、`「'と`」'の間に
ポイントを再配置するので、その位置からかぎかっこに囲まれた文字列を即始め
ることができます。

@defvr {ユーザ変数} skk-auto-paren-string-alist
自動挿入すべきペアの文字列を指定します。デフォルトは下記のとおり。

@lisp
@group
(("「" . "」") ("『" . "』") ("(" . ")") ("（" . "）") ("@{" . "@}")
 ("｛" . "｝") ("〈" . "〉") ("《" . "》") ("[" . "]") ("［" . "］")
 ("〔" . "〕") ("【" . "】") ("\"" . "\"") ("“" . "”") ("`" . "'"))
@end group
@end lisp

これは、ひと言でまとめると、「開き括弧と閉じ括弧とのコンスセルを集めたリ
スト」です。各コンスセルの @code{car} にある文字列を挿入したときに、
@code{cdr} にある文字列が自動挿入されます。
@vindex skk-rom-kana-rule-list
@footnote{このリストの各要素の @code{car} の文字列は、必ず変数
@code{skk-rom-kana-rule-list} の規則によって入力されなければなりません。
例えば、@samp{(} に対する @samp{)} を自動挿入するには

@lisp
@group
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("(" nil "("))))
@end group
@end lisp

@noindent
のように設定する必要があります。}
@footnote{既に SKK モードになっているバッファで変数
@code{skk-auto-paren-string-alist} を変更した場合は、@kbd{C-x C-j} もし
くは @kbd{C-x j} を 2 度タイプして @code{skk-mode} もしくは
@code{skk-auto-fill-mode} を起動し直す必要があります。}

@end defvr

キーとなる文字が挿入されても、その挿入後のポイントに自動挿入すべき文字が
既に存在している場合には、自動挿入されないように設計されています。

@example
@group
------ Buffer: foo ------
@point{}」
------ Buffer: foo ------

@kbd{[}

------ Buffer: foo ------
「@point{}」
------ Buffer: foo ------

@end group
@end example

対になる文字を複数挿入したい場合は、引数を渡して文字を指定します。

@example
@group

@kbd{C-u 2 [}

------ Buffer: foo ------
「「@point{}」」
------ Buffer: foo ------
@end group
@end example

@vindex yatex-mode
@code{yatex-mode} など、既に同様の機能が付いているモードがあります。その
ようなモードにおいてもこの自動挿入の機能が邪魔になることはないでしょうが、
特定のモードに限って自動入力機能をオフにしたい場合は、当該モードに入った
ときにコールされるフック変数を利用して設定することができます。

@lisp
@group
(add-hook 'yatex-mode-hook
          (lambda ()
              (when skk-auto-insert-paren
                (make-local-variable 'skk-auto-insert-paren)
                (setq skk-auto-insert-paren nil))))
@end group
@end lisp

特定のモードにおいて、自動挿入すべき文字を変更したい場合にも同様にフック
変数を用いて操作できます。

@vindex tex-mode-hook
@lisp
@group
(add-hook 'tex-mode-hook
          (lambda ()
              (when skk-auto-insert-paren
                (make-local-variable 'skk-auto-paren-string-alist)
                (setq skk-auto-paren-string-alist
                      (cons '("$" . "$") skk-auto-paren-string-alist)))))
@end group
@end lisp

@noindent
同様に、特定のペアを削除したい場合は、例えば下記のように設定します。
@c @footnote{何故関数 @code{copy-sequence} を使用するのかについては、
@c @w{@ref{数字や記号文字の入力}} を参照してください。}。

@lisp
@group
(add-hook 'tex-mode-hook
          (lambda ()
              (when skk-auto-insert-paren
                (make-local-variable 'skk-auto-paren-string-alist)
                (setq skk-auto-paren-string-alist
                      (delete
                       '("$" . "$")
                       (copy-sequence skk-auto-paren-string-alist))))))
@end group
@end lisp

@node リージョンを括弧で囲む
@subsection リージョンを括弧で囲む

「閉じ括弧の自動入力」の応用として、リージョンを括弧で囲むことができます。

@example
@group
------ Buffer: foo ------
このマニュアルにおいて@point{}DDSKK@point{}と呼びます
------ Buffer: foo ------

@kbd{`}

------ Buffer: foo ------
このマニュアルにおいて`DDSKK'と呼びます
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-use-auto-enclose-pair-of-region
@code{non-nil} であれば、上記の機能が有効になります。
当然に @code{skk-auto-insert-paren} も @code{non-nil} である必要があります。

なお、@code{delete-selection-mode} の方が優先されます。
@end defvr

@node 確定するキー
@subsection 確定するキー
@kindex C-j

@defvr {ユーザ変数} skk-kakutei-key

この変数の値は、明示的な確定動作を行うキーを指定します。
標準設定では @kbd{C-j} となっています。

@end defvr

関連事項: @w{@ref{暗黙の確定のタイミング}}

@node 候補の選択に用いるキー
@subsection 候補の選択に用いるキー

変換において、候補が５つ以上あるときは、５番目以降の候補は７つずつ
まとめてエコーエリアに下記のように表示されます
@footnote{@ref{▼モード}.}。

@example
@group
-------------------- Echo Area --------------------
A:嘘  S:拒  D:拠  F:虚  J:挙  K:許  L:渠  [残り 2]
-------------------- Echo Area --------------------
@end group
@end example

この際、候補の選択に用いるキーは、次の変数によって決定されます。

@defvr {ユーザ変数} skk-henkan-show-candidates-keys

７つの異なる文字のリスト。文字は必ず小文字とする
@footnote{@kbd{x}, @key{SPC} 及び @kbd{C-g} は、それぞれ候補選択中に
おける前候補群の表示、次候補群の表示、取り止めのために割り付けられている
ので、@code{skk-henkan-show-candidates-keys} の中に含めてはいけません。}。
デフォルトは、以下のとおり。

@lisp
(?a ?s ?d ?f ?j ?k ?l)
@end lisp
@end defvr

@c メニューによる文字入力
@c @footnote{@w{@ref{文字コードまたはメニューによる文字入力}}.}の際に候補の選択
@c に用いられるキーは、次の２つの変数により変更されます。
@c
@c @defvr {ユーザ変数} skk-input-by-code-menu-keys1
@c
@c 第１段階のメニューにおける候補の選択キー。デフォルトは、
@c
@c @lisp
@c (?a ?s ?d ?f ?g ?h ?q ?w ?e ?r ?t ?y)
@c @end lisp
@c
@c @noindent
@c です。このリストには 12 個の異なる文字を含む必要があります。
@c
@c @end defvr
@c
@c @defvr {ユーザ変数} skk-input-by-code-menu-keys2
@c
@c 第２段階のメニューにおける候補の選択キー。デフォルトは、
@c
@c @lisp
@c (?a ?s ?d ?f ?g ?h ?j ?k ?l ?q ?w ?e ?r ?t ?y ?u)
@c @end lisp
@c
@c @noindent
@c です。このリストには 16 個の異なる文字を含む必要があります。
@c @end defvr
@c
@c 上記の２つの変数の要素は@b{全て小文字で指定すること}を強くお勧めします
@c @footnote{小文字が指定された場合は、候補の選択の際に対応する大文字キーが
@c 入力されても候補の選択が可能となるように設計されています。その一方で、大
@c 文字が指定された場合、候補の選択の際に対応する小文字キーが入力されても候
@c 補の選択ができません。これは現在の仕様です。}。
@c
@defvr {ユーザ変数} skk-henkan-show-candidates-keys-face
選択キーを表示する際のフェイスを指定します。
@end defvr

@defvr {ユーザ変数} skk-henkan-rest-indicator
デフォルトは @code{nil}。@code{Non-nil} であれば @samp{[残り 99++]} の表示を右寄せ配置する。
@end defvr

@defvr {ユーザ変数} skk-henkan-rest-indicator-face
@samp{[残り 99++]} の face 属性。デフォルトは @code{default}。
@end defvr

@node ▼モードでのRET
@subsection ▼モードでのRET

標準設定では、

@example
@kbd{K a k u t e i @key{SPC}}

@group
------ Buffer: foo ------
▼確定@point{}
------ Buffer: foo ------
@end group

@key{RET}

@group
------ Buffer: foo ------
確定
@point{}
------ Buffer: foo ------
@end group
@end example

@noindent
のように、▼モードで @key{RET} を入力すると、確定し、かつ改行を行います。
この挙動を変えるためのユーザオプションが用意されています。

@defvr {ユーザ変数} skk-egg-like-newline

この変数の値を @code{non-nil} にすると、▼モードで @key{RET} を入力した
ときに確定のみ行い、改行はしません@footnote{従って、辞書登録モードにおいて▼モードであるときの @key{RET}
入力時の挙動も変化します。標準の確定、登録の動作については、
@w{@ref{辞書登録モード}} を参照してください。}。

@end defvr

@example
@kbd{K a k u t e i @key{SPC}}

@group
------ Buffer: foo ------
▼確定@point{}
------ Buffer: foo ------
@end group

@key{RET}

@group
------ Buffer: foo ------
確定@point{}
------ Buffer: foo ------
@end group
@end example

@node ▼モードでのBS
@subsection ▼モードでのBS
@kindex @key{BS}

標準設定では、▼モードで @key{BS} を押すと、前の一文字を削除した上で確定
します。

@example
@kbd{D e n k i y a @key{SPC}}

@group
------ Buffer: foo ------
▼電気屋@point{}
------ Buffer: foo ------
@end group

@key{BS}

@group
------ Buffer: foo ------
電気@point{}
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-delete-implies-kakutei

この変数の値を @code{nil} に設定すると、▼モードで @key{BS} を押した時
に一つ前の候補を表示します。例えば、

@example
でんき /電気/伝記/
@end example

@noindent
という辞書エントリがあるとき、以下のようになります。

@example
@kbd{D e n k i}

@group
------ Buffer: foo ------
▽でんき@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼電気@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼伝記@point{}
------ Buffer: foo ------
@end group

@key{BS}

@group
------ Buffer: foo ------
▼電気@point{}
------ Buffer: foo ------
@end group

@key{BS}

@group
------ Buffer: foo ------
▽でんき@point{}
------ Buffer: foo ------
@end group
@end example
@end defvr

変数 @code{skk-delete-implies-kakutei} がシンボル @code{dont-update} で
あれば、@code{non-nil} 時と同じ動作のうえで個人辞書を更新しません。

なお、変数 @code{skk-delete-implies-kakutei} の値にかかわらず、*候補*バッファ
を表示している場合は一つ前の候補表示に戻る動作となります。

@node 送りあり変換中のC-g
@subsection 送りあり変換中のC-g
@kindex C-g

送りありの変換中に @kbd{C-g} を入力すると、▼モードを抜け、その見出し語
と送り仮名を現在のバッファに挿入し、▽モードに入ります。

@example
@kbd{N a K u}

@group
------ Buffer: foo ------
▼泣く@point{}
------ Buffer: foo ------
@end group

@kbd{C-g}

@group
------ Buffer: foo ------
▽なく@point{}
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-delete-okuri-when-quit

この変数の値を @code{non-nil} に設定すると、送りありの変換中に @kbd{C-g} を
入力したときの挙動が変化します。▽モードに入るのは同じですが、同時に
送り仮名を消します。送り仮名の入力間違いを修正するのには便利です。
例えば、以下のようになります。
@end defvr

@example
@kbd{N a K u}

@group
------ Buffer: foo ------
▼泣く@point{}
------ Buffer: foo ------
@end group

@kbd{C-g}

@group
------ Buffer: foo ------
▽な@point{}
------ Buffer: foo ------
@end group
@end example

@node 変換位置の指定方法
@subsection 変換位置の指定方法
@cindex @file{skk-sticky.el}
@kindex ;

SKK では通常、「漢字変換の開始位置」と「送り仮名の開始位置」を大文字で指定します
が、これらを任意のキーで指定することで sticky-shift ライクな操作
@footnote{あくまでも「任意のキーで変換開始位置を指定する」ものであり、
sticky-shift そのものではありません。したがって、アスキーモードや 
abbrev モード、また SKK 以外でも sticky-shift を使いたい場合は前述のような
設定を併用する必要があります。}も可能です。

@lisp
(setq skk-sticky-key ";")
@end lisp

@noindent
と設定すると @kbd{;} キーで
@footnote{@file{skk-hint.el} を併用する場合は @code{skk-hint-start-char}
のデフォルトも @kbd{;} であるため、どちらかを別のキーに割り当てる必要が
あります。@w{@pxref{候補の絞り込み}}} 漢字変換位置が指定できるようになり
ます。

例えば @samp{有る} という単語を入力するには

@example
@kbd{; a ; r u}
@end example

というキー入力で可能となり、シフトキーを押す必要がなくなります。

操作上は
@w{@pxref{Q3-4 左手の小指を SHIFT で酷使したくありません。}} などにある通
常の sticky-shift と変わりませんが、画面表示は

@display
@group
@multitable {打鍵 } {通常の@tie{}sticky} {skk-sticky}
@item 打鍵
@tab 通常の@tie{}sticky
@tab skk-sticky
@item @kbd{;}
@tab 変化なし
@tab ▽
@item @kbd{a}
@tab ▽あ
@tab ▽あ
@item @kbd{;}
@tab ▽あ
@tab ▽あ*
@item @kbd{r}
@tab ▽あ*r
@tab ▽あ*r
@end multitable
@end group
@end display

@noindent
と遷移します。通常の sticky と比べて skk-sticky は @kbd{;} を押した時点で
画面表示が変化するので若干分かり易いと思います。

キーの設定方法は、割り当てるキーの種類によって異なります。

@enumerate
@item
表示を伴うキー

@kbd{;} などの表示を伴うキーの場合は

@lisp
(setq skk-sticky-key ";")
@end lisp

のように @code{string} を設定して下さい。@code{skk-sticky-key} に設定した
文字そのものを入力したい場合は2回続けて打つと入力できます。

@item
表示を伴わないキー

【@key{無変換}】のような表示を伴わないキーの場合は

@lisp
(setq skk-sticky-key [muhenkan]) ;Microsoft Windows では [noconvert]
@end lisp

のようにそのキーを表わす @code{vector} を設定して下さい。

@item
同時打鍵

２つのキーを同時に打鍵することでも漢字変換位置を指定できます。例えば
@kbd{f} と @kbd{j} の同時打鍵で指定する場合は

@lisp
(setq skk-sticky-key '(?f ?j))
@end lisp

のように @code{character} のリストを設定して下さい。

Dvorak 配列のような、押しやすい場所に適当なキーがない環境でもこの機能を使
いたい場合に便利かもしれません。
@end enumerate

@defvr {ユーザ変数} skk-sticky-double-interval

この変数が指定する秒数以内に打鍵されたものを同時打鍵と判定する。
デフォルトは 0.1 秒。

@end defvr

@node 1回の取り消し操作(undo)の対象
@subsection 1回の取り消し操作(undo)の対象
@cindex @file{keyboard.c}
@findex self-insert-command
@findex skk-abbrev-comma
@findex skk-abbrev-period
@findex skk-kana-input
@findex skk-insert
@findex skk-set-henkan-point
@findex skk-jisx0208-latin-insert
@vindex skk-self-insert-non-undo-count

Emacs では本来、連続する 20 文字の挿入が一回の取り消し操作 (アンドゥ) の
対象となっています。そこで DDSKK のかな・カナ・全英モードにおける入力も、
これと同様の動作をするように設計されています
@footnote{@code{buffer-undo-list} に Emacs が挿入したアンドゥの境目の目印を
取り除く方法でエミュレートしています。}。正確に言えば、
@code{skk-insert}, @code{skk-set-henkan-point},
@code{skk-jisx0208-latin-insert}
@footnote{SKK abbrev モードでは、アスキー文字入力が Emacs 本来の
@code{self-insert-command} により行われているので、エミュレーションの
ための内部変数である @code{skk-self-insert-non-undo-count} をインクリメ
ントすることができず、アンドゥをエミュレートできません。しかも、カンマや
ピリオドを挿入した時点で、コマンド @code{skk-abbrev-comma} や
@code{skk-abbrev-period} を使うことになるので、本来のアンドゥの機能も損
なってしまいます。ただし、現実問題として、元来 SKK abbrev モードは省略形
としての見出し語を挿入するためのモードですから、長い見出し語を挿入するこ
とはあまりないと考えられます。}の各関数にバインドされたキー入力について
は、連続して入力された 20 文字を 1 つのアンドゥの対象としています
@footnote{`20' は Emacs のソースファイルの一部である @file{keyboard.c}
に定められたマジックナンバーと一致します。}。

ただし、これらの DDSKK のコマンドと Emacs 本来の
@code{self-insert-command} を織り混ぜてキー入力した場合
@footnote{かなモードでの入力中、アスキーモードに移行して入力した場合など
がこれにあたります。}は、このエミュレーションは正常に動作しませんが、こ
れは現在の仕様です。

@example
@group
@kbd{a i u e o k a k i k u k e k o s a s i s u s e s o t a t i t u t e t o}

------------------------- Buffer: foo -------------------------
あいうえおかきくけこさしすせそたちつてと@point{} ;@r{連続する20文字。}
------------------------- Buffer: foo -------------------------
@end group
@group

@kbd{C-_}

------------------------- Buffer: foo -------------------------
@point{}                       ;@r{20文字全てがアンドゥの対象となる。}
------------------------- Buffer: foo -------------------------
@end group

@group
@kbd{a i u e o k a k i k u k e k o s a s i s u s e s o t a t i t u t e t o n a}

-------------------------- Buffer: foo --------------------------
あいうえおかきくけこさしすせそたちつてとな@point{} ;@r{連続する21文字。}
-------------------------- Buffer: foo --------------------------
@end group
@group

@kbd{C-_}

-------------------------- Buffer: foo --------------------------
あいうえおかきくけこさしすせそたちつてと@point{} ;@r{最後の1文字のみがアンドゥの対象となる。}
-------------------------- Buffer: foo --------------------------
@end group
@end example

@node 変換、確定の前後
@section 変換、確定の前後

@menu
* ポイントを戻して▽モードへ::   ▽モードに入り忘れた!
* 直前の確定を再変換::         間違って確定したら、再変換
* 自動変換開始::              @key{SPC} を押さなくても「を」「。」で変換開始。
* 暗黙の確定のタイミング::      変換の後、いつ確定するか。
* 積極的な確定::              候補が一つ? じゃ確定でしょ。
* 確定辞書::                 特定の語は一発確定
@end menu

関連事項:
@itemize @bullet
@item @w{@ref{送りあり変換の変換開始のタイミング}}
@item @w{@ref{変換位置の指定方法}} (大文字以外で変換位置を指定する方法を説明)
@end itemize

@node ポイントを戻して▽モードへ
@subsection ポイントを戻して▽モードへ
@cindex 後から▽モードに入る方法
@findex skk-backward-and-set-henkan-point
@vindex skk-allow-spaces-newlines-and-tabs

▽モードに入り忘れた場合に、手動で▽マークを付ける方法については、前述しました
@footnote{@w{@xref{後から▽モードに入る方法}.}}。
ここで述べる方法では、遡って▽マークを付ける位置を自動的に選び、しかもカーソルは動きません。

@kindex M-Q
@kbd{M-Q}
(大文字の @samp{Q} です。) とタイプすると現在位置の直前の文字列について走査し、
同種の文字 @footnote{ひらがな、カタカナ、全角アルファベット、アルファベットの 4 種
類のいずれか。}が続く限り後方に戻り、▽マークを付けます。ポイントは動きません。

@example
@kbd{k a n j i}

@group
------ Buffer: foo ------
かんじ@point{}
------ Buffer: foo ------
@end group

@kbd{M-Q}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group
@end example

変換開始位置を決定するとき、スペース文字、タブ文字、長音を表わす @samp{ー}
は無条件に無視されます。ただし、ひらがなの場合は @samp{を} が、カタカナ
の場合は @samp{ヲ} が見つかった時点で変換開始位置の走査を止め、▽モードに
入ります。変換開始ポイントを @samp{を}、@samp{ヲ} の直前で止めるのは、たい
ていその直後から単語が始まるからです。

以上は @kbd{M-Q} を引数を与えないで実行した場合です。一方で、@kbd{C-u 5
M-Q} のように引数を渡して実行すると、変換開始位置から現在位置までの文字
数を指定することができます。この場合は文字種別を問わず、与えられた文字数
だけ無条件にポイントを戻します。

@vindex skk-allow-spaces-newlines-and-tabs
後方にポイントを戻す途中で行頭に到達した場合は、更に上の行について、行末
の文字列から同様の走査を行い、必要があれば更にポイントを戻します。こうし
た「行を超えての走査」をやめるためには、変数
@code{skk-allow-spaces-newlines-and-tabs} の値を @code{nil} に設定します。

@node 直前の確定を再変換
@subsection 直前の確定を再変換
@cindex 確定アンドゥ
@cindex 再変換
@kindex M-x skk-undo-kakutei

一番最後（直近）の確定を取り消して、再変換することができます。
これを@b{「確定アンドゥ」}と呼びます。

例えば、辞書エントリが

@example
こうこう /高校/孝行/航行/
@end example

@noindent
のようになっているとします。

@example
@kbd{K o u k o u @key{SPC}}

@group
------ Buffer: foo ------
▼高校@point{}
------ Buffer: foo ------
@end group

@kbd{s u r u}

@group
------ Buffer: foo ------
高校する@point{}
------ Buffer: foo ------
@end group

@kbd{M-x skk-undo-kakutei}

@group
------ Buffer: foo ------
▼孝行@point{}する
------ Buffer: foo ------
@end group
@end example

@noindent
この例では、@samp{高校} の確定を取り消しています。すると、辞書の第
一候補である @samp{高校} をとばして、次候補である @samp{孝行} が現れます。
ここで更に @key{SPC} を押せば次候補である @samp{航行} が現れ、更にもう一
度 @key{SPC} を押せば候補が尽きて辞書登録モードに入ります。

この例のとおり、確定アンドゥは、確定した直後でなくとも有効です。
より正確には、次の新たな確定
@footnote{@kbd{C-j} をタイプして明示的に確定した場合は勿論、「暗黙の確定
」を行った場合も同様です。}を行うまでは確定に関する情報が保持されている
ので、確定アンドゥすることができます。

また、変換、確定に関連しない文字列は、確定アンドゥを行っても削除されな
いように設計されています。上記の例では、@samp{する} がそのままカレントバ
ッファに残っています。

@defvr {ユーザ変数} skk-undo-kakutei-return-previous-point

この変数の値が @code{non-nil} であれば、確定アンドゥ処理が完了した後に、
確定アンドゥ処理の直前の位置にカーソルが戻ります。

上の例の場合、確定アンドゥ処理が完了した後のカーソル位置は、デフォル
ト @code{nil} では @samp{孝行} の直後のままですが、@code{non-nil} であれ
ば @samp{する} の直後に復帰します。

@end defvr

@node 自動変換開始
@subsection 自動変換開始

▽モードで見出し語を入力しているときに「を」や「。」などの文字を打鍵する
と、@key{SPC} を押したかのように変換を開始@footnote{▽マークからポイント
の直前の文字までを見出し語とします。最後に入力された文字（「を」や「。」
）は見出し語には含まれません。}し、▼モードに入るようになっています。

@example
@kbd{K a n j i}

@group
------ Buffer: foo ------
▽かんじ@point{}
------ Buffer: foo ------
@end group

@group

@kbd{w o}
------ Buffer: foo ------
▼漢字を@point{}
------ Buffer: foo ------
@end group
@end example

@vindex skk-auto-okuri-process
変数 @code{skk-auto-okuri-process} の値を @code{non-nil} に設定して 送り
仮名の自動処理 @w{(@pxref{送り仮名の自動処理})} を行っている場合は、以下
のような変換も可能です。ただし、個人辞書に @samp{できr /出来/[る/出来/]/}
というようなエントリがあると仮定します。

@example
@kbd{D e k i r u n n d e s u}

@group
------ Buffer: foo ------
▽できるんです
------ Buffer: foo ------
@end group
@group

@kbd{.}
------ Buffer: foo ------
▼出来るんです。
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-auto-start-henkan-keyword-list

この変数の値は、単語や文節の区切りとなるような文字列のリストです。
デフォルトは以下のようになっています。
@end defvr

@lisp
@group
("を" "、" "。" "．" "，" "？" "」" "！" "；" "：" ")" ";"
 ":" "）" "”" "】" "』" "》" "〉" "｝" "］" "〕" "@}"
 "]" "?" "." "," "!" )
@end group
@end lisp

@defvr {ユーザ変数} skk-auto-start-henkan

この変数の値を @code{nil} に設定すると、本節で説明した自動変換開始機能
を無効にします。デフォルトは @code{t} です。
@end defvr

@node 暗黙の確定のタイミング
@subsection 暗黙の確定のタイミング
@cindex 暗黙の確定
@vindex skk-process-okuri-early

標準の設定では、確定が済む前に次の文字を入力すると、
直ちに確定されます
@footnote{正確には、印字可能な文字または @key{RET} が入力されたときです。}。
これを「暗黙の確定」と呼んでいます。具体的には以下のようになります。

@example
@kbd{K a k u t e i}

@group
------ Buffer: foo ------
▽かくてい@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼確定@point{}
------ Buffer: foo ------
@end group

@kbd{s}

@group
------ Buffer: foo ------
確定s@point{}      ; 暗黙の確定
------ Buffer: foo ------
@end group

@kbd{u}

@group
------ Buffer: foo ------
確定す@point{}
------ Buffer: foo ------
@end group
@end example

@defvr {ユーザ変数} skk-kakutei-early

この変数の値を @code{nil} にすると、「暗黙の確定」を遅らせます。
具体的には、

@itemize @bullet
@item 括弧 @kbd{(} @kbd{)} @kbd{[}  @kbd{]} の入力時
@item 句読点 @kbd{,} @kbd{.} の入力時
@item 次の変換開始時 (@kbd{A} から @kbd{Z} までの大文字の入力時)
@item @key{RET} 入力時
@end itemize

まで暗黙の確定が遅延されます
@footnote{@code{skk-kakutei-early} の機能と
@code{skk-process-okuri-early} の機能を同時に有効にすることはできません。
@code{skk-kakutei-early} の 値を @code{non-nil} にする場合は
@code{skk-process-okuri-early} の値を @code{nil} にする必要がありま
す。}。
@end defvr

@example
@kbd{K a k u t e i}

@group
------ Buffer: foo ------
▽かくてい@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼確定@point{}
------ Buffer: foo ------
@end group

@kbd{s}

@group
------ Buffer: foo ------
▼確定s@point{}
------ Buffer: foo ------
@end group

@kbd{u r u}

@group
------ Buffer: foo ------
▼確定する@point{}
------ Buffer: foo ------
@end group

@kbd{.}

@group
------ Buffer: foo ------
確定する。@point{}      ; 暗黙の確定
------ Buffer: foo ------
@end group
@end example

@node 積極的な確定
@subsection 積極的な確定

変換候補が一つしか見つからない場合は自動的に確定する、という設定ができます。

@defvr {ユーザ変数} skk-kakutei-when-unique-candidate

この値が @code{non-nil} の場合、この機能が有効になります。

@code{t} であれば送りあり変換、送りなし変換、abbrev モードでの変換、全て
でこの機能が有効になります。

また、@samp{okuri-ari}, @samp{okuri-nasi}, @samp{abbrev} を要素とするリス
トであることもできます。その場合は変換対象がその条件に合致した場合のみ確
定変換が機能します。

例: @samp{'(okuri-nasi abbrev)}

この機能は、全ての辞書を検索した上で変換候補が唯一か否かを調べます。その
ため、@code{skk-search-prog-list} の内容によってはレスポンスが悪くなる可
能性があります。(@w{@pxref{辞書の検索方法の設定}}

@end defvr

@defvr {ユーザ変数} skk-kakutei-search-prog-limit

この値が数値であった場合、積極的な確定(@code{skk-kakutei-when-unique-candidate}) に
おける「変換候補が唯一か否か」の判定を @code{skk-search-prog-list} の先頭か
ら数えてこの個数までの辞書に制限します。

数値以外であれば、無制限に全ての辞書を検索対象とします。
@end defvr

@node 確定辞書
@subsection 確定辞書
@cindex 確定変換
@cindex 確定辞書
@findex skk-search-kakutei-jisyo-file
@vindex skk-kakutei-jisyo

特定の語は、変換したら即座に確定させる事ができます。これを@b{確定変換}と
呼び、利用するには「確定辞書」を用意します。例えば、

@example
じしょ /辞書/
@end example

@noindent
というエントリが確定辞書にあったとします。このとき、

@example
@group
@kbd{Z i s h o}

@group
------ Buffer: foo ------
▽じしょ@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
辞書@point{}
------ Buffer: foo ------
@end group
@end group
@end example

@cindex 暗黙の確定
@noindent
のように、@key{SPC} を押しただけでいきなり確定します。エントリの候補がひ
とつだけだからです。

確定辞書以外の辞書に登録されているであろう同音異義語を得るには、確定変換
の直後に @kbd{x} をタイプします。すると、▼モードに戻って次の候補を検索す
ることができます。

次の例では、確定辞書に @samp{辞書} が、個人辞書（や共有辞書）に @samp{自署} が
登録されているとします。

@example
@group
@kbd{Z i s y o @key{SPC}}

@group
------ Buffer: foo ------
辞書@point{}
------ Buffer: foo ------
@end group

@kbd{x}

@group
------ Buffer: foo ------
▼自署@point{}
------ Buffer: foo ------
@end group

@end group
@end example

確定辞書の単語は、優先的に変換されます。

@defvr {ユーザ変数} skk-kakutei-jisyo

確定変換用の辞書ファイルを指定します
@footnote{確定変換用辞書の見出し語の配列については、サイズが大きい場合は
、共有辞書と同様、ソートして二分検索を行い、サイズが小さければ適当な配置
で直線的検索を行うことをお勧めします。次も参照してください。@*
@w{@ref{辞書検索のための関数}}@*
@w{@ref{エントリの配列}}
}。
この辞書は、標準の配布パッケージには含まれていないので、使用するのであれ
ばユーザ側で用意する必要があります。@*
(@w{@pxref{辞書の書式}})

@code{nil} であれば、確定変換は行われません。

@end defvr

@node 送り仮名関連
@section 送り仮名関連

SKK の送り仮名の処理は、好みが分かれるところです。色々な
対策が用意されていますので、試してみて下さい。

@menu
* 送り仮名の厳密なマッチ::   「多きい」対策、その 1
* 送り仮名の優先的なマッチ:: 「多きい」対策、その 2
* 送り仮名の自動処理::       送り仮名があっても、後から SPC
* 送りあり変換の変換開始のタイミング::
@end menu

@node 送り仮名の厳密なマッチ
@subsection 送り仮名の厳密なマッチ
@vindex minibuffer-exit-hook
@vindex minibuffer-setup-hook

今、個人辞書に

@example
おおk /大/多/[く/多/]/[き/大/]/
@end example

@noindent
という送りありエントリがあると仮定します。

ここで @kbd{O o K i i @key{SPC}} と入力した場合、普通は @samp{大きい} と
@samp{多きい} という 2 通りの候補が出力されますが、このうち @samp{多きい}
は現代の日本語として正しくありません。このような場合に、出力される候補を
正しい表現のみに絞りこむ方法について、説明します。


@defvr {ユーザ変数} skk-henkan-okuri-strictly
@vindex skk-process-okuri-early

この変数の値を @code{non-nil} に設定すると、見出し語がマッチするかどう
かのチェックの上に、送り仮名がマッチするかどうかのチェックが行われま
す。結果として送り仮名がマッチしない候補は出力されません。上記の例では、
送り仮名 @samp{き} がマッチする @samp{大きい} は出力されますが、
@samp{多きい} は出力されません
@footnote{この機能は、変数 @code{skk-process-okuri-early} の値を
@code{non-nil} に設定した状態と共存できません。この理由を知りたい場合は
@ref{送りあり変換の変換開始のタイミング}を参照してください。}。

個人辞書の送りありエントリが充実していれば、標準の設定よりも候補が絞り込
まれるので変換効率がアップしますが、さもなければ、すぐに辞書登録モードに
入ってしまうため逆に不便になります。
@end defvr

変数 @code{skk-henkan-okuri-strictly} の値を @code{non-nil} にすると、
辞書登録モードに入っても送り仮名のマッチが厳密に行われます。これは辞
書登録の際希望する候補を得るためには障害となります。そのような障害を避
けるためには、下記のようにフック変数を設定します。これにより、辞書登録
時だけは、一時的に送り仮名の厳密なマッチをしないようになります
@footnote{実は変数 @code{skk-henkan-okuri-strictly} の値は辞書バッファで
参照されるので、ミニバッファのバッファローカル値を変更してもうまくいきま
せん。将来のバージョンでは、これを改良し、辞書バッファでの動作に影響する
ユーザ変数をバッファローカル化できるようにする予定です。
@w{@xref{最新情報}.}}。

@lisp
@group
(add-hook 'minibuffer-setup-hook
          (lambda ()
              (when (and (boundp 'skk-henkan-okuri-strictly)
                         skk-henkan-okuri-strictly
                         (not (eq last-command 'skk-purge-jisyo)))
                (setq skk-henkan-okuri-strictly nil)
                (put 'skk-henkan-okuri-strictly 'temporary-nil t))))

@end group
@group
(add-hook 'minibuffer-exit-hook
          (lambda ()
              (when (and (get 'skk-henkan-okuri-strictly 'temporary-nil)
                         (<= (minibuffer-depth) 1))
                (put 'skk-henkan-okuri-strictly 'temporary-nil nil)
                (setq skk-henkan-okuri-strictly t))))
@end group
@end lisp

@node 送り仮名の優先的なマッチ
@subsection 送り仮名の優先的なマッチ

@ref{送り仮名の厳密なマッチ} では、見出し語と送り仮名が一致した場合のみ
候補を表示します。ここでは、その条件を緩めて優先的に表示する方法を紹介し
ます@footnote{@samp{大く}などの候補は鬱陶しいが、すぐに単語登録に入って
しまうのも嫌な人におすすめです。}。

今、個人辞書に

@example
おおk /大/多/[く/多/]/[き/大/]/
@end example

@noindent
という送りありエントリがあると仮定します。

ここで @kbd{O o K i i @key{SPC}} と入力した場合、普通は @samp{大きい} と
@samp{多きい} という 2 通りの候補が出力されますが、このうち @samp{多きい}
は現代の日本語として正しくありません。このような場合に、出力される候補を
正しい表現が優先的にする設定を紹介します。

@defvr {ユーザ変数} skk-henkan-strict-okuri-precedence
@vindex skk-henkan-okuri-strictly
@vindex skk-process-okuri-early

この変数の値を @code{non-nil} に設定すると、見出し語と送り仮名がマッチ
した候補を優先して表示します。

上記の例では @samp{▽おお*く} を変換したとき、まず @samp{多く} を出力し、
次に @samp{大く} を出力します。

この変数の値が @code{non-nil} の時は、変数
@code{skk-process-okuri-early} の値は @code{nil} でなければなりません
@footnote{理由を知りたい場合は、@ref{送りあり変換の変換開始のタイミング}
を参照してください。}。また変数 @code{skk-henkan-okuri-strictly} が
@code{non-nil} のときは、この変数は無視されます。
@end defvr

@node 送り仮名の自動処理
@subsection 送り仮名の自動処理

この節では、「あげる」と入力してから @key{SPC} を押しても「上げる」と変換
する機能を紹介します。

@menu
* どのように変換されるか::
* 辞書登録の際に注意すべきこと::
@end menu

@node どのように変換されるか
@subsubsection どのように変換されるか

@defvr {ユーザ変数} skk-auto-okuri-process
この変数の値を @code{non-nil} に設定すると、送り仮名の自動処理が行わ
れます。
@end defvr

例えば、@kbd{T a t i a g e r u @key{SPC}} と入力した場合を考えます。
このとき、検索される見出し語の変化を追うと、

@example
@samp{たちあげる} @result{} @samp{たちあげr} @result{} @samp{たちあg}
@result{} @samp{たちa} @result{} @samp{たt}
@end example

@noindent
のようになります。仮に個人辞書エントリが、

@example
@group
たちあg /立ち上/[げ/立ち上/]/[が/立ち上/]/
たt /建/断/経/立/[つ/建/断/経/立/]/[ち/建/断/経/立/]/[て/経/立/建/]/
@end group
@end example

@noindent
の 2 つのエントリを含むとすると、見出し語を後方から順に切り詰める過程で
@samp{たちあg} と @samp{たt} の 2 つの見出し語の検索時にこれらの辞書エン
トリがマッチします。

@noindent
つまり、@samp{たちあげる} という見出し語に対し、見出し語を最後尾から1文
字ずつ切り詰め、「切り詰めの結果残った文字列」と、「切り捨てられた先頭の
文字のローマ字プレフィックス」を連結した文字列を送りあり変換の見出し語と
して、
検索します。@footnote{実際には、普通の送りなし変換として最初は検索されます。
個人辞書まで調べて候補が見つからないときは、その後、送り仮名の自動処理の検索に
移ります。}

@noindent
次に、マッチしたエントリの各候補に対し、切り捨てられた先頭の文字を送り仮
名として取るかどうかをチェックします。この判断には、個人辞書の送り仮名ブロッ
ク部分
@footnote{@ref{送りありエントリのブロック形式}.}を利用します。

@samp{たちあg} の場合の送り仮名チェックの対象は、切り捨てられた最初の文
字の @samp{げ} です。個人辞書に

@example
[げ/立ち上/]
@end example

@noindent
の部分があることから、送り仮名として取るべきと判断します。また、@samp{た
t} の場合の送り仮名チェックの対象は、@samp{ち} です。個人辞書に

@example
[ち/建/断/経/立/]
@end example

@noindent
の部分があることから、送り仮名として取るべきと判断します。

@noindent
こうして、送り仮名がマッチする候補が @samp{立ち上}、@samp{建}、@samp{断}、
@samp{経}、@samp{立} の 5 つに絞られます。これらは文字列の長さ順に昇順に
ソートされ
@footnote{長さ順にソートするのは、変換された部分がより長い候補を先順位
として出力するためです。}、それぞれの候補と該当の見出し語から切り捨てら
れた文字列と連結したもの
@footnote{@samp{該当の見出し語から切り捨てられた文字列} を送り仮名とみな
して処理しています。}を、送り仮名の自動処理の最終候補として返します。上
記の例は、@samp{立ち上げる}、@samp{建ちあげる}、@samp{断ちあげる}、
@samp{経ちあげる}、@samp{立ちあげる} の 5 つが最終候補になります。

自動送り機能は、個人辞書のみを検索します。

ここで、自動送り機能の長所を考えてみると、

@itemize @bullet
@item 送り仮名の最初のローマ字表現を大文字で始める必要がない。
@item 送り仮名を正確に思い出せない場合に送り仮名を指定しなくとも変換でき
る。
@end itemize

などがあります。一方短所としては、

@itemize @bullet
@item 意図しない変換をされる割合が増える。
@item 個人辞書の送りありエントリが貧弱な場合は、自動処理ができない可能性
が高い。
@end itemize

などが考えられます。変数 @code{skk-auto-okuri-process} の値を
@code{non-nil} に設定しても、従来通りの送りあり変換も同時にできますから、
一度この機能を試してみることをお勧めします
@footnote{専ら補完的に自動送り処理を利用するのであれば、
@code{(skk-okuri-search)} を @code{skk-search-prog-list} の最後にもってく
るという手もあります。(@w{@pxref{辞書の検索方法の設定}})}。

@node 辞書登録の際に注意すべきこと
@subsubsection 辞書登録の際に注意すべきこと

送り仮名の自動処理を行っている場合@footnote{変数
@code{skk-auto-okuri-process} の値を @code{non-nil} に設定している。}に
は、辞書登録の際に注意すべきことがあります。

個人辞書に見出し語 @samp{わたs} についてのエントリが全くない場合、あるい
は個人辞書のエントリが

@example
わたs /渡/[し/渡/]/
@end example

@noindent
のような送り仮名のブロックを持たない場合を考えてみます。ここで、@kbd{W a
t a s i t a @key{SPC}}と入力すると、送り仮名の自動処理においては送り仮名
がマッチしないので、候補が見つからずに辞書登録モードに入ります。

@example
@group
@kbd{W a t a s i t a @key{SPC}}

------ Buffer: foo ------
▼わたした
------ Buffer: foo ------

------ Minibuffer -------
[辞書登録] わたした@point{}
------ Minibuffer -------
@end group
@end example

@noindent
辞書登録モードで @kbd{W a t a S i t a @key{RET}} と送り仮名を明示的に入
力し、@samp{渡した} と変換して登録したとします。この場合、登録する語の最
後が平仮名で終わるので、その最後の平仮名の文字列 (上記の例では、@samp{し
た}) が見出し語の最後と一致するかを調べます。一致する場合には、辞書の登
録を送りありエントリとして行うのかどうかの確認を求めます。

@example
@group
@kbd{W a t a S i t a}
------ Minibuffer -------
[辞書登録] わたした 渡した@point{}
------ Minibuffer -------
@end group
@group

@key{RET}

-------------------------- Echo Area --------------------------
Shall I register this as okuri-ari word: わたs /渡/ ? (y or n)
-------------------------- Echo Area --------------------------
@end group
@end example

@noindent
この確認に対し、@samp{y} と回答した場合は、

@example
わたs /渡/[し/渡/]/
@end example

@noindent
という辞書エントリが個人辞書の送りありエントリに書き込まれます。一方
@samp{n} と回答した場合は、個人辞書の送りなしエントリに

@example
わたした /渡した/
@end example

@noindent
というエントリが書き込まれます。本例の場合は、@samp{y} と回答するのが正
解です。

@table @code
@item skk-kana-rom-vector
@vindex skk-kana-rom-vector
@c XXX この変数は定数になった。

この変数は、送り仮名部分をローマ字プレフィックスに分解する際に、参照され
ます。
@end table

変数 @code{skk-kana-rom-vector} のデフォルトは以下のようになっています。

@example
@group
["x" "a" "x" "i" "x" "u" "x" "e" "x" "o" "k" "g" "k" "g" "k" "g"
 "k" "g" "k" "g" "s" "z" "s" "j" "s" "z" "s" "z" "s" "z" "t" "d"
 "t" "d" "x" "t" "d" "t" "d" "t" "d" "n" "n" "n" "n" "n" "h" "b"
 "p" "h" "b" "p" "h" "b" "p" "h" "b" "p" "h" "b" "p" "m" "m" "m"
 "m" "m" "x" "y" "x" "y" "x" "y" "r" "r" "r" "r" "r" "x" "w" "x"
 "x" "w" "n"]
@end group
@end example

このベクトルは、それぞれ下記のかな文字をそのローマ字プレフィックスで現し
たものです。

@example
@group
ぁ  あ  ぃ  い  ぅ  う  ぇ  え  ぉ  お  か  が  き  ぎ  く  ぐ
け  げ  こ  ご  さ  ざ  し  じ  す  ず  せ  ぜ  そ  ぞ  た  だ
ち  ぢ  っ  つ  づ  て  で  と  ど  な  に  ぬ  ね  の  は  ば
ぱ  ひ  び  ぴ  ふ  ぶ  ぷ  へ  べ  ぺ  ほ  ぼ  ぽ  ま  み  む
め  も  ゃ  や  ゅ  ゆ  ょ  よ  ら  り  る  れ  ろ  ゎ  わ  ゐ
ゑ  を  ん
@end group
@end example

@noindent
これに従うと、見出し語中の送り仮名がローマ字プレフィックスに分解される際、
例えば @samp{じ} は @samp{j} に、@samp{ち} は @samp{t} に、@samp{ふ} は
@samp{h} に、それぞれ分解されます。これらをそれぞれ @samp{z}、@samp{c}、
@samp{f} に変更することもできます。それには変数
@code{skk-kana-rom-vector} の該当部分を "z"、"c"、"f" に変更します。

@lisp
@group
(setq skk-rom-kana-vector
      ["x" "a" "x" "i" "x" "u" "x" "e" "x" "o" "k" "g" "k" "g" "k" "g"
       "k" "g" "k" "g" "s" "z" "s" "z" "s" "z" "s" "z" "s" "z" "t" "d"
       "c" "d" "x" "t" "d" "t" "d" "t" "d" "n" "n" "n" "n" "n" "h" "b"
       "p" "h" "b" "p" "f" "b" "p" "h" "b" "p" "h" "b" "p" "m" "m" "m"
       "m" "m" "x" "y" "x" "y" "x" "y" "r" "r" "r" "r" "r" "x" "w" "x"
       "x" "w" "n"])
@end group
@end lisp

次にもうひとつ例を挙げます。 @samp{ありがさつき} に対し @samp{有賀さつき}
を登録したい場合は、上記と同様に辞書登録をし、

@example
@group
Shall I register this as okuri-ari entry: ありがs /有賀/ ? (y or n)
@end group
@end example

@noindent
の確認に対し @samp{n} と回答します。この結果、個人辞書の送りなしエントリ
には、

@example
ありがさつき /有賀さつき/
@end example

@noindent
というエントリが書き込まれます。

@node 送りあり変換の変換開始のタイミング
@subsection 送りあり変換の変換開始のタイミング
@kindex C-x C-j
@kindex C-x j

@defvr {ユーザ変数} skk-process-okuri-early
@vindex skk-auto-okuri-process
@vindex skk-henkan-okuri-strictly
@vindex skk-kakutei-early

この変数の値を @code{non-nil} に設定すると、送りあり変換の変換開始のタ
イミングが早められます。つまり、送り仮名のローマ字プレフィックスの入力
時点で変換を開始します。

@example
@group
@kbd{U g o K}

------ Buffer: foo ------
▼動k
------ Buffer: foo ------
@end group
@end example

送り仮名が分からないまま変換しているため、個人辞書が送り仮名に対応した形に
成長しません。つまり @samp{うごk /動/} のような形態のままとなります。た
だし、

@example
@group
うごk /動/[く/動/]/[か/動/]/[け/動/]/[き/動/]/[こ/動/]/
@end group
@end example

@noindent
のようなエントリが既に個人辞書にある場合、それを破壊することはありません
@footnote{@ref{辞書の書式}を参照してください。}。

このユーザオプションを @code{non-nil} に設定して SKK モードを起動する
と、両立できないオプションである下記オプションは自動的に @code{nil} に
設定されます。

@itemize @bullet
@item @code{skk-kakutei-early}
@item @code{skk-auto-okuri-process}
@item @code{skk-henkan-okuri-strictly}
@end itemize

既に SKK モードに入った後でこの変数の設定を変更した場合は、カレントバッ
ファで @kbd{C-x C-j} もしくは @kbd{C-x j} を 2 回タイプして SKK モードを
起動し直すことで、これらの変数間の衝突を調整します。

@display
@xref{暗黙の確定のタイミング, , skk-kakutei-early}.
@xref{送り仮名の自動処理, , skk-auto-okuri-process}.
@xref{送り仮名の厳密なマッチ, , skk-henkan-okuri-strictly}.
@end display

@end defvr

@node 候補の順序
@section 候補の順序

skk の初期設定では、変換で確定された単語は、次の変換時では最初に表示され
ます。この動作を変更して、効率良く変換する方法があります。

@menu
* 変換の学習::               関連のある語は上位に表示
* 候補の順序の固定::          いつも同じ順序で候補を表示
* ベイズ統計を用いた学習::
@end menu

ここで解説するほか、確定辞書 (@w{@pxref{確定辞書}}) を用いた変換も、候補の順序に影響を与えます。

@node 変換の学習
@subsection 変換の学習
@cindex @file{skk-study.el}
@vindex skk-study-associates-number
@vindex skk-study-search-times

@file{skk-study.el} は、ある語 A を確定した場合に、A 及びその見出し
語 A' に対して、直前に変換した語 B とその見出し語 B' を関連語として登
録しておき、再度見出し語 A' の変換を行ったときに、B 及び B' のペアが直
前の何回かに確定した語の中に見つかれば、A を優先して出力する単純な学習
効果を提供するプログラムです。

@file{~/.skk} に @code{(require 'skk-study)} と書いて DDSKK を起動して下
さい。以降、かな漢字変換の学習を始めます。

例えば、@samp{梅雨には雨が降る} と変換した場合、

@itemize @bullet
@item
@samp{雨} (@samp{あめ}) の関連語 @expansion{} @samp{梅雨} (@samp{つゆ})、

@item
@samp{降る} (@samp{ふr}) の関連語 @expansion{} @samp{雨} (@samp{あめ})、
@end itemize

@noindent
という風に「直前に確定した語」を関連語として、語と語の関連性を学習します。

ここで続けて、@samp{傘を振る} と変換すると、個人辞書がアップデートされ
てしまい、見出し語 @samp{ふr} の第一候補は @samp{振る} になってしまい
ます。

しかし、更に続けて @kbd{A m e @key{SPC} g a H u R u} と type すると、
@kbd{H u R u} (@samp{ふr}) に対して @samp{雨} (@samp{あめ}) が関
連語になっているため、@samp{ふr} と対で記憶されている @samp{降る} に変
換されるというわけです。

では、またここで @samp{傘を振る} と変換し、個人辞書の第一候補が
@samp{振る} になった状態で、

@display
@kbd{A m e @key{SPC} g a T a i r y o u @key{SPC} n i H u R u}
@end display

@noindent
と変換すれば @kbd{ふr} はどう変換されるでしょうか？
　今度は @samp{雨} @w{(@samp{あめ})} と @kbd{ふr} の間に @samp{大量} @w{(@samp{たいりょう})}
が入っています@footnote{@samp{ふr} に対して @samp{大量} @w{(@samp{たいりょう})} が
関連語として保存されます。勿論 @w{(@samp{ふr})} に対する @samp{雨} @w{(@samp{あめ})} の学習も
まだ生きています。}。

実はちゃんと

@display
@samp{雨が大量に降る}
@end display

@noindent
と変換されます。何故なら @w{@samp{ふr}} の関連語を探す際、
@code{skk-study-search-times} @footnote{デフォルト値は 5 です。} に
指定された回数分だけ遡って、以前に確定した語の中に関連語がないか探すの
です。従って、この場合だと、2 つ前の確定情報を探した際に @samp{雨}
@w{(@samp{あめ})} 見つけ、これを関連語として、@w{@samp{ふr}} の値を
決めようとするのです。

@file{skk-study.el} に関するその他のオプションを説明します。

@defvr {ユーザ変数} skk-study-max-distance
この変数には integer を指定します。直前に確定したポイントと今回の変換ポ
イントがこの距離以上離れていると学習データを蓄積しないようにします。
この変数は、必ずしも文章がバッファの @code{point-min} か
ら @code{point-max} へ流れるように書かれるものではなく、ポイントを前に戻
したり後へ移動したりして書かれることを想定しています。
この変数に integer を設定すると、直前の変換よりも前のポイントで変換した
場合に学習データを蓄積しないようにします。この変数に @code{nil} を指定す
ると直前に確定したポイントとの距離を考慮せずに学習します。この変数のデフ
ォルト値は 30 です。

なお、この変数の値にかかわらず、直前の変換バッファと現在変換を行っている
バッファが異なる場合は学習データを蓄積しません。
@end defvr 

@defvr {ユーザ変数} skk-study-first-candidate
この変数が @code{non-nil} であれば、第一候補
で確定した際も学習します。@code{nil} であれば、第一候補で確定したとき
のみ学習データを蓄積しません。学習データをできるだけ小さくしたい場合、
この変数を @code{nil} にすると効果があるかもしれません。
この変数のデフォルト値は @code{t} です。
@end defvr

@defvr {ユーザ変数} skk-study-file
学習結果を保存するファイル名です。
この変数のデフォルト値は @file{~/.skk-study} です。
変数 @code{skk-user-directory} からも設定ができます。
(@w{@pxref{設定ファイル}})
@end defvr

@defvr {ユーザ変数} skk-study-backup-file
@file{~/.skk-study} のバックアップファイルです。
この変数のデフォルト値は @file{~/.skk-study.BAK} です。
@end defvr

@defvr {ユーザ変数} skk-study-sort-saving
学習データのデータ構造に関するものです。この変数の値が @code{non-nil} で
あれば学習結果をソートしてセーブします。この変数が影響を及ぼすのは学習デ
ータの単なる見映えの問題だけです。
この変数のデフォルト値は @code{nil} です。
@end defvr

@defvr {ユーザ変数} skk-study-check-alist-format
学習データのデータ構造に関するものです。この変数の値が  @code{non-nil} で
あれば、学習結果の読み込み時に連想リストのフォーマットをチェックします。
これは主に debug の目的で使います。
この変数のデフォルト値は @code{nil} です。
@end defvr

@table @kbd

@kindex M-x skk-study-switch-current-theme
@item M-x skk-study-switch-current-theme
そのバッファで利用する学習テーマを切り替えます。
プロンプト @samp{Theme of current buffer: } に対して学習テーマ名を入力し
てください。例えば、科学の話題を書くバッファでは science と、法律の話題
を書くバッファでは law などと入力してください。

@kindex M-x skk-study-remove-theme
@item M-x skk-study-remove-theme
不要な学習テーマを消去します。

@kindex M-x skk-study-copy-theme
@item M-x skk-study-copy-theme
学習テーマを複製します。

@end table

@node 候補の順序の固定
@subsection 候補の順序の固定

skk の初期設定では、変換、選択された候補は、次回の変換では最初に表示されます。
これに対し、毎回同じ順序で候補を表示させることができます。

@defvr {ユーザ変数} skk-jisyo-fix-order

@code{non-nil} であれば、確定の際に個人辞書の同音語の順序を変更せず、
個人辞書に新規追加する際は既出語の後に追加する。標準は @code{nil}。
@end defvr

これは、個人辞書のエントリの中の各候補の順序を変更しないことで実現されて
いますから、@file{skk-study.el} を用いた学習 @w{(@pxref{変換の学習})} と
併用できます。

@code{skk-jisyo-fix-order} が @code{non-nil} の時、個人辞書の候補を手軽に並べ替
える方法は、現時点ではありません。個人辞書ファイルを直接編集するか、
コマンド @kbd{M-x skk-edit-private-jisyo} を実行して下さい。
(@w{@pxref{個人辞書ファイルの編集}})

直前に変換したばかりの単語は、個人辞書の送りあり／なしエントリの一番上に
ありますので、すぐに見つけることができます。

@node ベイズ統計を用いた学習
@subsection ベイズ統計を用いた学習

@c 記載内容を充実すること
ベイズ統計を用いた学習のプログラム @file{bayesian/skk-bayesian.el} もあります。(@w{@pxref{ファイル構成}})

@node 辞書関連
@section 辞書関連

本節では、辞書の種別と形式、設定方法、その他辞書にまつわる動作や設定を説明しま
す。

@menu
辞書の設定
* 辞書の種類::
* 辞書ファイルの指定::
* 辞書の検索方法の設定::            検索対象と検索順序の設定。
* Emacs 付属の辞書::
* サーバ関連::
* サーバコンプリージョン::

@noindent
辞書の管理
* 辞書の書式::
* 強制的に辞書登録モードへ入る::
* 誤った登録の削除::            削除も登録みたいにできます。
* 個人辞書ファイルの編集::       個人辞書を編集するコマンドがあります。
* 個人辞書の保存動作::          いつ個人辞書が更新、保存されるか。
* 変換及び個人辞書に関する統計::

@noindent
他
* 辞書バッファ::
* 辞書バッファの文字コードの設定::
* 辞書バッファのbuffer-file-name::
@end menu

@node 辞書の種類
@subsection 辞書の種類

@table @b
@item 共有辞書
@cindex 共有辞書
@cindex L 辞書
@cindex M 辞書
@cindex S 辞書
@cindex @file{SKK-JISYO.L}
@cindex @file{SKK-JISYO.ML}
@cindex @file{SKK-JISYO.M}
@cindex @file{SKK-JISYO.S}

@file{SKK-JISYO.S} (S 辞書)、 @file{SKK-JISYO.M} (M 辞書)、
@file{SKK-JISYO.ML} (ML 辞書)、 @file{SKK-JISYO.L} (L 辞書) などがありま
す。通常、個人辞書よりもサイズが大きく、省資源の面からユーザ間で共有して
参照されます。

ユーザの変換操作によって内容が書き替えられることはありません。

これら以外にも、共有辞書として使えるファイルが配布されています。
それぞれの辞書の詳細については @url{http://openlab.jp/skk/dic.html} を
ご参照下さい。

@item 個人辞書
@cindex 個人辞書
@vindex skk-jisyo

変数 @code{skk-jisyo} で指定されるファイル。DDSKK を一番最初に使い始めた
ときにホームディレクトリに自動的に作られます。その後の使用により日々刻々
とエントリが追加され、更新されていきます。

なお、最初の個人辞書として S 辞書をリネームして使用するのも良いかもしれ
ません。

@item @code{skk-initial-search-jisyo}
@itemx @code{skk-kakutei-jisyo}
@vindex skk-initial-search-jisyo
@vindex skk-kakutei-jisyo

これらは共有辞書、個人辞書という区分のいずれにも属しません。これらは個人
毎に持つものを使用するか、ユーザ間で共有しているものを使用します。その性
格から、辞書内容の更新は行われず、参照のみ行われます。また使用目的から、
通常は小さい辞書を使用します。
@end table

個人辞書、@code{skk-initial-search-jisyo}, @code{skk-kakutei-jisyo} は
Emacs のバッファに読み込んで検索を行います。

共有辞書は設定により Emacs のバッファに読み込んで使用するか、または辞書
サーバ経由で使用します。

@node 辞書ファイルの指定
@subsection 辞書ファイルの指定

この節では、辞書ファイルを指定する変数を説明します。
個人辞書とバックアップのディレクトリは、変数 @code{skk-user-directory} で
も変更できます。(@w{@pxref{設定ファイル}})

@defvr {ユーザ変数} skk-kakutei-jisyo
確定変換(@w{@pxref{確定辞書}})のための辞書です。一番最初に参照されます。
確定変換をしない時は、初期設定の @code{nil} のままで良いです。
@end defvr

@defvr {ユーザ変数} skk-initial-search-jisyo
確定辞書の後、かつ、個人辞書の前に検索を行う辞書です。

この辞書を適当に指定することにより、最初に出てくる候補を操作することがで
きます。例えば、複数の専門用語毎の辞書を用意しておい
て @code{skk-initial-search-jisyo} の値を切り替えることにより、専門分野
毎の専門用語を切り替えて入力することができます。

この辞書は、標準の配布パッケージには含まれていないので、使用するのであれ
ばユーザ側で用意する必要があります。

不要ならば、初期設定の @code{nil} のままで良いです。
@end defvr

@defvr {ユーザ変数} skk-jisyo
個人辞書。DDSKK を一番最初に起動したとき、変数 @code{skk-jisyo} が指すフ
ァイルが存在しなければ自動的に作られます。
@end defvr

@defvr {ユーザ変数} skk-backup-jisyo
個人辞書の予備 (バックアップ) です。検索の対象ではなく、あくまで個人辞書
のバックアップとして指定してください。
@end defvr

@defvr {ユーザ変数} skk-cdb-large-jisyo
共有辞書のうち CDB 形式に変換した辞書です。指定した場合は @code{skk-large-jisyo} よ
りも先に検索されます。DDSKK 14.1 からは辞書サーバを経由せずとも CDB 形式
辞書ファイルを直接検索できるようになりました。
@end defvr

@defvr {ユーザ変数} skk-large-jisyo
共有辞書のひとつ。バッファに読み込んで検索を行います。

例えば @code{skk-large-jisyo} に S 辞書か M 辞書を指定し、
@code{skk-aux-large-jisyo} に L 辞書を指定する、という選択肢もあります。

また、辞書サーバ経由のアクセスも決して遅くはないので「共有辞書はバッファには
読み込まない」という設定も自然であり、これには @code{skk-large-jisyo} を
@code{nil} に設定します。
@end defvr

@defvr {ユーザ変数} skk-aux-large-jisyo
共有辞書のひとつ。辞書サーバに接続できない時にバッファに読み込んで検索を行う
辞書です。
@end defvr

@defvr {ユーザ変数} skk-extra-jisyo-file-list
SKK では個人辞書の他に、共有辞書 (@code{skk-large-jisyo}、
@code{skk-cdb-large-jisyo}) または辞書サーバを設定して利用するのが一般的
ですが、郵便番号辞書 @file{SKK-JISYO.zipcode} をはじめとした多彩な辞書も
メンテナンスされています。

これらの辞書を利用するために変数 @code{skk-search-prog-list} を手動で編集
することもできますが、この変数は厳密にはユーザ変数に分類されていないため、
予期しない問題が起こることもあります。

DDSKK 14.2 以降では追加の辞書を簡単に設定する方法を提供します。以下の例
を参考に変数 @code{skk-extra-jisyo-file-list} の設定を  @file{~/.skk} に
記述します。

@lisp
@group
(setq skk-extra-jisyo-file-list
      (list '("/usr/share/skk/SKK-JISYO.JIS3_4" . euc-jisx0213)
            "/usr/share/skk/SKK-JISYO.zipcode"))
@end group
@end lisp

このように、辞書のファイル名のリストを指定します
@footnote{@code{skk-search-prog-list} に登録されている関
数 @code{skk-search-extra-jisyo-files} が、@code{skk-extra-jisyo-file-list} の
各要素を逐次処理します。}。
ただし、変数 @code{skk-jisyo-code} (@w{@pxref{辞書バッファの文字コードの設定}}) と
は異なる文字コードのファイルについては、上記の例中の @file{SKK-JISYO.JIS3_4} の
ように「ファイル名と文字コードのペア」を記述します。
@end defvr

これらの変数の意味するところは初期設定でのものですが、
@code{skk-search-prog-list} の設定で変更することもできます。
(@w{@pxref{辞書検索のための関数}})

@node 辞書の検索方法の設定
@subsection 辞書の検索方法の設定

辞書の検索方法の指定は、変数 @code{skk-search-prog-list} で行われます。
特に必要が無ければ、読み飛ばして下さい。

@menu
* 辞書検索の設定の具体例::
* 辞書検索のための関数::
@end menu

@node 辞書検索の設定の具体例
@subsubsection 辞書検索の設定の具体例
@vindex skk-search-prog-list

この節では、@code{skk-search-prog-list} の初期設定を示し、大体
の流れを説明します。

DDSKK では、複数の辞書を扱うことが可能です。複数の辞書が同時に
検索されるのではなく、指定した順番に検索します。
@code{skk-search-prog-list} はリストであり、大雑把に言えば、
確定されるまで、先頭の要素から順に lisp として評価されます。

@lisp
@group
((skk-search-kakutei-jisyo-file skk-kakutei-jisyo 10000 t)
 (skk-search-jisyo-file skk-initial-search-jisyo 10000 t)
 (skk-search-jisyo-file skk-jisyo 0 t)
 (skk-okuri-search)
 (skk-search-cdb-jisyo skk-cdb-large-jisyo)
 (skk-search-jisyo-file skk-large-jisyo 10000)
 (skk-search-server skk-aux-large-jisyo 10000)
 (skk-search-ja-dic-maybe)
 (skk-search-extra-jisyo-files)
 (skk-search-katakana-maybe)
 (skk-search-sagyo-henkaku-maybe)))
@end group
@end lisp

この例では、

@enumerate
@item
@code{skk-kakutei-jisyo} (@w{@pxref{確定辞書}}),
@code{skk-initial-search-jisyo}, @code{skk-jisyo} (個人辞書) の順に検索を
行い、

@item
次に送り仮名の自動処理を行い、(@w{@pxref{送り仮名の自動処理}})

@item
その後、@code{skk-cdb-large-jisyo} と @code{skk-large-jisyo} の検索を順
に行い、

@item
最後に @code{skk-aux-large-jisyo} に辞書サーバ経由でアクセスしています。
@end enumerate

これらの辞書の意味については、@w{@pxref{辞書ファイルの指定}} 参照。

もし確定辞書で候補が見つかったらそのまま自動的に確定されます。1 回
@key{SPC} を押す動作に対し、プログラム側では新たな候補を見つけるまで上記
の動作を進めます。例えば、

@enumerate
@item
確定辞書では候補は見つけられなかったが @code{skk-initial-search-jisyo}
に候補がある場合、そこでいったん止まりユーザにその候補を表示します。

@item
更に @key{SPC} が押されると、次は個人辞書を検索します。そこで候補が見つ
かり、しかもその候補が @code{skk-initial-search-jisyo} で見つけた候補とは
異なるものであったときは、そこでまた止まりその候補をユーザに表示し
ます。
@end enumerate

以降、共有辞書についても同様の繰り返しを行います。最後まで候補が
見つからなかった時は、辞書登録モードに入ります。

@c DDSKK 14.1 では、以下はあてはまらない。
@c
@c @footnote{@file{skk-auto.el} を読みこむと、
@c
@c @lisp
@c (skk-okuri-search)
@c @end lisp
@c
@c @noindent
@c というリストが @code{skk-search-prog-list} に自動的に追加されます。実際
@c には、@file{skk-auto.el} は必要に応じてオートロードされるので明示的に読みこむ必
@c 要はありません。オートロードされるのは、具体的には
@c @code{skk-auto-okuri-process} を @code{non-nil} に設定したとき、 あるいは
@c
@c @lisp
@c (skk-okuri-search)
@c @end lisp
@c
@c @noindent
@c というリストを @code{skk-search-prog-list} に明示的に指定したときなどで
@c す。}
@c
@c @footnote{@file{skk-server.el} を読みこむと、
@c
@c @lisp
@c (skk-search-server skk-aux-large-jisyo 10000)
@c @end lisp
@c
@c @noindent
@c というリストが @code{skk-search-prog-list} に自動的に追加されます。実際
@c には、@file{skk-server.el} は必要に応じてオートロードされるので明示的に読みこむ
@c 必要はありません。オートロードされるのは、具体的には
@c @code{skk-server-host} または @code{skk-servers-list} を @code{non-nil}
@c に設定したとき、あるいは
@c
@c @lisp
@c (skk-search-server skk-aux-large-jisyo 10000)
@c @end lisp
@c
@c @noindent
@c というリストを @code{skk-search-prog-list} に明示的に指定したときなどで
@c す。}

@node 辞書検索のための関数
@subsubsection 辞書検索のための関数

前節で見たとおり、変数 @code{skk-search-prog-list} を適切に定義することによ
って辞書の検索方法を指定します。
そこで使われる辞書検索のための関数を使いこなすことで、
より細かい辞書検索の方法を指定することができます。

@defun skk-search-jisyo-file FILE LIMIT &optional NOMSG
通常の検索を行うプログラム。変数 @code{skk-henkan-key} を見出し語（検索文
字列）として、 FILE を被検索対象として変換検索を実施します。個人辞書、共
有辞書又は辞書サーバを使わずに検索を行いたい場合はこの関数を使用します。

第１引数 @code{FILE} は、被検索対象となる辞書ファイルを指定します。
@code{nil} を指定したときは、検索を行いません。
@code{FILE} で指定した辞書ファイルは Emacs のバッファに読み込まれます。

@cindex 二分検索
@cindex 直線的検索
第２引数 @code{LIMIT} は二分検索（バイナリ・サーチ）が行なわれる領域の大
きさを指定します。一つの見出し語に対する変換動作に対し、検索対象の領域の
大きさ@footnote{「検索領域の先頭ポイント」と「同末尾ポイント」の差}が第２
引数に指定された数値より小さくなるまでは二分検索が行われ、最後に直線的検
索（リニア・サーチ, search-forward）が１回行われます。

第２引数に 0 を指定すると、常に直線的検索のみが行われます。
個人辞書 @code{skk-jisyo} はソートされておらず二分検索が不可能であるため @code{LIMIT} を 0 にして下さい。

第３引数 @code{NOMSG} が @code{nil} ならば、辞書ファイルをバッファに
読み込む関数 @code{skk-get-jisyo-buffer} のメッセージをミニバッファに出力し
ます。@code{non-nil} を与えると出力しません。
@end defun

@defun skk-search-cdb-jisyo CDB-PATH

not documented

@end defun

@defun skk-search-kakutei-jisyo-file FILE LIMIT &optional NOMSG
@cindex 確定変換
@vindex skk-kakutei-henkan-flag
@b{「確定変換」}を行う検索プログラム。検索対象の辞書ファイルは Emacs の
バッファに読み込まれます。検索対象のファイルから候補を見つけると、内部
変数 @code{skk-kakutei-henkan-flag} を立てて、いきなり確定します。このため
ユーザーが確定操作を行う必要はありません。

引数の意味はいずれも @code{skk-search-jisyo-file} の場合と同様です。
@end defun

@w{@xref{確定辞書}.}

@defun skk-okuri-search
形式: (skk-okuri-search)

自動送り処理を行うプログラム。変数 @code{skk-auto-okuri-process} の値
が @code{non-nil} のときだけ機能します。

個人辞書の送りありエントリを検索対象としているので、個人辞書のバッファを
流用します。そのため、専用の辞書バッファは作りません。

@w{@xref{送り仮名の自動処理}.}
@end defun

@defun skk-search-server FILE LIMIT &optional NOMSG
辞書サーバ経由で検索するプログラム。

辞書サーバが使用不能になると辞書ファイルを Emacs のバッファに読み込んで
検索を行います。引数の意味はいずれも @code{skk-search-jisyo-file} と
同じですが、これらは辞書を Emacs のバッファに読み込んだときのみ利用されます。

辞書サーバが使う辞書ファイルの設定については、

@itemize @bullet
@item @w{@pxref{辞書サーバを使いたいときの設定}}
@item @w{@pxref{サーバ関連}}
@end itemize

をご覧下さい。
@end defun

@node Emacs 付属の辞書
@subsection Emacs 付属の辞書

GNU Emacs には、 @file{SKK-JISYO.L} を元に変換された @file{leim/ja-dic/ja-dic.el} とい
う辞書が付属しています。

DDSKK 14.2 からは、この @file{ja-dic.el} を利用したかな漢字変換 (送りあり、
送りなし、接頭辞、接尾辞) が可能となりました。
つまり、@file{SKK-JISYO.L} などの辞書ファイルを別途準備しなくても一応
は DDSKK の使用が可能、ということです。

DDSKK 14.2 から追加された「ja-dic.el 検索機能」(@code{skk-search-ja-dic}) は、

@itemize @bullet
@item @code{skk-large-jisyo}
@item @code{skk-aux-large-jisyo}
@item @code{skk-cdb-large-jisyo}
@item @code{skk-server-host}
@end itemize

の全てが無効な場合に有効となります。

ただし、@file{SKK-JISYO.L} を利用する場合と比べて英数変換や数値変換などが
できません。可能な限り @file{SKK-JISYO.L} などの辞書を利用することを推奨
します。

関連項目: @w{@ref{辞書の入手}}

@defvr {ユーザ変数} skk-inhibit-ja-dic-search

この変数を @code{Non-nil} に設定すると、@code{skk-large-jisyo} 等の値にか
かわらず、あらゆる場面で @code{skk-search-ja-dic} を無効とします。

@end defvr

@defun skk-search-ja-dic

GNU Emacs に付属するかな漢字変換辞書 @file{ja-dic.el} を用いて検索する。
現在の Emacs には @file{SKK-JISYO.L} を基に変換された @file{ja-dic.el} が付属している。
この辞書データを用いて送りあり、送りなし、接頭辞、接尾辞の変換を行う。
ただし、@file{SKK-JISYO.L} のような英数変換、数値変換などはできず、また「大丈夫」
のように複合語とみなしうる語彙が大幅に削除されている。

@end defun

@node サーバ関連
@subsection サーバ関連
                                    
辞書サーバの基本的な設定は、@w{@pxref{辞書サーバを使いたいときの設定}} を
ご覧下さい。

@defvr {ユーザ変数} skk-servers-list

この変数を使うと、複数のホスト上の辞書サーバを使い分けることができます。

この変数の値は、辞書サーバ毎の情報リストです。各リストは次の 4 つの要素か
ら成ります。

@itemize @bullet
@item ホスト名
@item 辞書サーバ名 (フルパス)
@item 辞書サーバが読み込む辞書ファイル名
@item 辞書サーバが使用するポート番号
@end itemize

ただし、辞書ファイル名及びポート番号は、辞書サーバ自身が決定することもあるため、そのような場合は @code{nil} として構いません。

例えば、以下のように設定します。

@lisp
@group
(setq skk-servers-list
      '(("host1" "/your/path/to/skkserv" nil nil)
        ("host2" "/your/path/to/skkserv" nil nil)))
@end group
@end lisp

上記の設定の場合、まず host1 上の辞書サーバと接続します。接続できなくなると、
次に host2 上の辞書サーバと接続します。
@end defvr

@defvr {ユーザ変数} skk-server-report-response

この変数の値が @code{non-nil} であれば、変換時に、辞書サーバの送出する文字を
受け取るまでに関数 @code{accept-process-output} が実行された回数をエコーエリ
アに報告します。

@example
@group
-------------------- Echo Area --------------------
辞書サーバの応答を 99 回待ちました
-------------------- Echo Area --------------------
@end group
@end example

@end defvr

@defvr {ユーザ変数} skk-server-inhibit-startup-server

デフォルト値は @code{t} です。この変数を @code{nil} に設定すると、辞書サ
ーバと接続できない場合に @code{call-process} で辞書サーバプログラムの起動
を試みます。

inetd 経由で起動する多くの辞書サーバは @code{call-process} で起動するこ
とができませんが、@file{skkserv} のように @code{call-process} で起動する
ことができる辞書サーバを利用している場合には、この変数を @code{nil} に設
定するのが良いかもしれません。

@end defvr

@defvr {ユーザ変数} skk-server-remote-shell-program

この変数には、リモートシェルのプログラム名を指定します。デフォルトは、システ
ム依存性を考慮する必要があるため、以下の Emacs Lisp コードを評価すること
により決定されています。

@lisp
@group
(or (getenv "REMOTESHELL")
    (and (boundp 'remote-shell-program) remote-shell-program)
    (cond
     ((eq system-type 'berkeley-unix)
      (if (file-exists-p "/usr/ucb/rsh") "/usr/ucb/rsh" "/usr/bin/rsh"))
     ((eq system-type 'usg-unix-v)
      (if (file-exists-p "/usr/ucb/remsh") "/usr/ucb/remsh" "/bin/rsh"))
     ((eq system-type 'hpux) "/usr/bin/remsh")
     ((eq system-type 'EWS-UX/V) "/usr/ucb/remsh")
     ((eq system-type 'pcux) "/usr/bin/rcmd")
     (t "rsh")))
@end group
@end lisp
@end defvr

@defun {コマンド} skk-server-version
辞書サーバから得たバージョン文字列とホスト名文字列を表示する。

@example
(skk-server-version)
@print{} SKK SERVER version (wceSKKSERV) 0.2.0.0 (ホスト名 foo:192.168.0.999: )
@end example

@end defun

@node サーバコンプリージョン
@subsection サーバコンプリージョン

Server completion に対応した辞書サーバであれば、見出し語から始まる全ての語句
の検索が可能です。

@defun skk-comp-by-server-completion
この関数を @code{skk-completion-prog-list} の要素に追加すると、▽モードにお
いて見出し語補完を実行します。

@lisp
@group
(add-to-list 'skk-completion-prog-list
             '(skk-comp-by-server-completion) t)
@end group
@end lisp

@end defun

@defun skk-server-completion-search
この関数を @code{skk-search-prog-list} の要素に追加すると、
変換を実行する際に @code{skk-server-completion-search-char} を付すことに
よって見出し語で始まるすべての候補を掲げます。

@lisp
@group
(add-to-list 'skk-search-prog-list
             '(skk-server-completion-search) t)
@end group
@end lisp

@example

@group
------ Buffer: foo ------
▽おおさか~@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: *候補* ------
A:おおさかいかだいがく
S:大阪医科大学
D:おおさかいがい
F:大阪以外
J:おおさかいだい
K:大阪医大
L:おおさかいちりつだいがく
------ Buffer: *候補* ------
@end group

@end example

@end defun

@defvr {ユーザ変数} skk-server-completion-search-char

デフォルトは @samp{~}（チルダ、#x7e）です。

@end defvr

@node 辞書の書式
@subsection 辞書の書式

@menu
* 送りありエントリと送りなしエントリ::
* 送りありエントリのブロック形式::
* エントリの配列::
@end menu

@node 送りありエントリと送りなしエントリ
@subsubsection 送りありエントリと送りなしエントリ

以下は個人辞書の一例です。

@cindex ;; okuri-ari entries.
@cindex ;; okuri-nasi entries.
@example
@group
;; okuri-ari entries.
たとe /例/[え/例/]/
もt /持/[つ/持/]/[って/持/]/[た/持/]/[て/持/]/[ち/持/]/[と/持/]/
たすk /助/[け/助/]/
うごk /動/[く/動/]/[か/動/]/[け/動/]/[き/動/]/[こ/動/]/
ふくm /含/[め/含/]/[む/含/]/[ま/含/]/[み/含/]/[も/含/]/
@dots{}
;; okuri-nasi entries.
てん /点/・/天/
ひつよう /必要/
さくじょ /削除/
へんこう /変更/
じゅんじょ /順序/
ぐん /群/郡/
こうほ /候補/
いち /位置/一/壱/
@dots{}
@end group
@end example

@noindent
@samp{てん /点/・/天/} を例にして説明します。これは @samp{てん} が見出し
語であり、その候補が、@samp{点}、@samp{・}、@samp{天} です。候補はそれぞ
れ、@samp{/} によって区切られています。SKK では、見出し語と候補群を合わ
せた @w{@samp{てん /点/・/天/}} の一行を@b{「エントリ」}と呼びます。
@cindex エントリ

辞書は単純なテキストファイルで、必ず下記の 2 つの行を持っています。

@example
@group
;; okuri-ari entries.
;; okuri-nasi entries.
@end group
@end example

@noindent
この 2 つの行は、それぞれ送り仮名あり、送り仮名なしのエントリの開始地点
を示すマークです。 @samp{;; okuri-ari entries.} までの行で @samp{;} を行
頭に持つ行はコメント行として無視されます。@samp{;; okuri-ari entries.}
以降にコメント行を含むことはできません。

@w{@samp{;; okuri-ari entries.}} と @w{@samp{;; okuri-nasi entries.}} の
間に囲まれた上半分の部分が送り仮名ありのエントリです。これを@b{「送りあ
りエントリ」}と呼びます。
@cindex 送りありエントリ
@w{@samp{;; okuri-nasi entries.}}以下の下半分部分が送り仮名なしのエント
リです。これを@b{「送りなしエントリ」}と呼びます。
@cindex 送りなしエントリ

@cindex 送りあり変換
@cindex 送りなし変換
送りありエントリを検索する変換を@b{「送りあり変換」}、送りなしエントリを
検索する変換を@b{「送りなし変換」}と呼びます。SKK では送り仮名の有無が変
換方法の 1 つの種別となっています。送り仮名がある変換では送りありエント
リのみが検索され、送り仮名がない変換では送りなしエントリのみが検索されま
す。

1 つの見出し語についてのエントリは 1 行内に書かれます。2 行以上にまたが
ることはできません。改行を含む候補については、@code{(concat "改\n行")}
のように、評価すると改行を該当個所に挿入するような Lisp プログラム
(@w{@pxref{プログラム実行変換}}) に候補を変換して辞書に収めています。

@cindex ローマ字プレフィックス
送りありエントリは、基本的には @samp{もt /持/} のようになっています。送
り仮名部分は、送り仮名をローマ字表現したときの 1 文字目
@footnote{あるかな文字をローマ字表現したときの 1 文字目を@b{「ローマ字プ
レフィックス」}と呼びます。}で表現されています。
この 1 エントリで @samp{持た}、@samp{持ち}、@samp{持つ}、@samp{持て}、
@samp{持と} の 5 つの候補に対応します。その 5 つの候補の送り仮名をローマ
字プレフィックスで表現すれば、いずれも @samp{t} になります。

@node 送りありエントリのブロック形式
@subsubsection 送りありエントリのブロック形式

個人辞書の送りありエントリには @samp{[} と @samp{]} に囲まれたブロックが
あります。これは、そのブロックの先頭にある平仮名を送り仮名に取る候補群で
す。

@example
@group
たとe /例/[え/例/]/
@dots{}
ふくm /含/[め/含/]/[む/含/]/[ま/含/]/[み/含/]/[も/含/]/
@end group
@end example

この例で見ると、見出し語 @samp{たとe} の場合は @samp{え} を送り仮名とす
る 1 つのブロックから構成されています。見出し語 @samp{ふくm} の場合は、
@samp{ま}、@samp{み}、@samp{む}、@samp{め}、@samp{も} を送り仮名とする 5
ブロックに分けられています。

@vindex skk-auto-okuri-process
@vindex skk-henkan-okuri-strictly
この送り仮名毎のブロック部分は、@code{skk-henkan-okuri-strictly} あるい
は @code{skk-auto-okuri-process} のいずれかの変数が @code{non-nil} で
ある場合に使用されます。その場合、検索において、見出し語の一致に加えて、
更に送り仮名もマッチするかどうかをテストします。例えば、

@example
おおk /大/多/[く/多/]/[き/大/]/
@end example

@noindent
というエントリがあるとします。同じ見出し語 @samp{おおk} であっても、送り
仮名が @samp{き} であれば、候補は @samp{大} のみで @samp{多} は無視されま
す。
@footnote{@xref{送り仮名の自動処理, , skk-henkan-okuri-strictly}.
@xref{送り仮名の厳密なマッチ, , skk-auto-okuri-process}.
@xref{送り仮名の優先的なマッチ, , skk-henkan-strict-okuri-precedence}.
}

@vindex skk-process-okuri-early
現在 @url{http://openlab.jp/skk/dic.html} で配布されている共有辞書では、
@samp{[} と @samp{]} を使用した送り仮名毎のブロックの形式に対応していません。
個人辞書のみがこの形式で書き込まれていきます。
@code{skk-henkan-okuri-strictly} が @code{nil} であっても送り仮名のブロッ
ク形式で書き込まれます。@footnote{ただし @code{skk-process-okuri-early}
の値が @code{non-nil} であれば、送り仮名を決定する前に変換を開始すること
になるので、送り仮名を明示的に入力していても個人辞書にはブロック形式は作
られません。}

@node エントリの配列
@subsubsection エントリの配列

@cindex 辞書のソート方法
共有辞書は、送りありエントリは @w{@samp{;; okuri-ari entries.}} から順
に下方向に見出し語をキーとして@b{降順}に配置され、送りなしエントリ
は @w{@samp{;; okuri-nasi entries.}} から順に下方向に見出し語をキーと
して@b{昇順}に配置されます。
降順／昇順に配置されるのは、辞書サイズが大きいことに配慮して二分検索
を行うためです
@footnote{ソートする際には、見出し語を unsigned-char と見なします。
この順序は Emacs が 関数 @code{string<} で文字列を比較するときの順序であ
り、UNIX の @command{sort} コマンドでの標準の順序とは異なります。
Emacs のコマンド @code{sort-lines}を用いればファイルをこの順序でソートす
ることができます。Emacs のコマンド @code{sort-columns} は内部的に UNIX コ
マンドの @command{sort} を使っているので、辞書のソートには使えません。}。

一方、個人辞書は、一番最後に変換された語が最も手前に置かれます。
つまり、送りなし／送りあり、それぞれのエントリが
@w{@samp{;; okuri-ari entries.}}, @w{@samp{;; okuri-nasi entries.}} を
基点として最小ポイントに挿入されて辞書が
更新されます @footnote{正確に言えば、送りあり変換では @w{@code{skk-okuri-ari-min}+ 1}
の位置、送りなし変換では @w{@code{skk-okuri-nasi-min}+ 1} の位置。}。
個人辞書は、通常は共有辞書ほどはサイズが大きくないので、検索時にはそれぞ
れの基点から直線的に検索が行われます。
                                    
最後に確定された語は、一つのエントリの中の最初の位置に置かれます。
                                    
@node 強制的に辞書登録モードへ入る
@subsection 強制的に辞書登録モードへ入る
@kindex .
▼モードにて、エコーエリアに変換候補が表示されているときに @kbd{.} をタイ
プすると、強制的に辞書登録モードへ入ります。

@defvr {ユーザ変数} skk-force-registration-mode-char
強制的に辞書登録モードへ入るためのキーキャラクタをこの変数で定義します。
標準設定は @kbd{.} です。
@end defvr

@node 誤った登録の削除
@subsection 誤った登録の削除
@cindex 個人辞書エントリの削除
@cindex 誤登録
@kindex X

誤って個人辞書に登録した単語は削除できます。

削除したい単語を変換により求め、その単語が表示された時点で @kbd{X} を入力
します。ミニバッファに確認プロンプトが出るので @kbd{y e s} と答えると、個
人辞書の対応するエントリが削除されます。現在のバッファに先程入力した「誤
りの変換結果」も削除されます。

例えば、

@example
さいきてき /再起的/
@end example

@noindent
というエントリを誤って登録してしまったという仮定で、この誤登録を削除する
場合を説明します。

@example
@kbd{S a i k i t e k i @key{SPC}}

@group
------ Buffer: foo ------
▼再起的@point{}
------ Buffer: foo ------
@end group

@kbd{X}

@group
------------------ MiniBuffer ------------------
Really purge ``さいきてき /再起的/''?(yes or no) @point{}
------------------ MiniBuffer ------------------
@end group

@kbd{y e s @key{RET}}

@group
------ Buffer: foo ------
@point{}
------ Buffer: foo ------
@end group

@end example

@node 個人辞書ファイルの編集
@subsection 個人辞書ファイルの編集
@kindex M-x skk-edit-private-jisyo

@b{構文チェックが十分ではありません。個人辞書ファイルの編集は、自己責任
のもと行ってください。}

コマンド @kbd{M-x skk-edit-private-jisyo} を使うと、個人辞書ファイルが
開かれます@footnote{前置引数を伴って実行 (@kbd{C-u M-x skk-edit-private-jisyo}) す
ることで、コーディングシステムを指定して個人辞書を開くことができます。}。

個人辞書ファイルを開いて編集している最中も skk を使えますが、
skk からの単語の登録、削除はできません。(他にも少し制限がありますが、
気にならないでしょう。)

編集が終わったら、@kbd{C-c C-c} と押すと個人辞書ファイルをセーブしてバッ
ファを閉じます。

@node 個人辞書の保存動作
@subsection 個人辞書の保存動作
@cindex 個人辞書
@cindex 個人辞書のオートセーブ
@kindex C-x C-c
@vindex skk-save-jisyo-instantly

個人辞書の保存動作について説明します。

個人辞書の保存が行われる場合として、次の４通りがあります。

@enumerate
@item
@kbd{C-x C-c} (または @kbd{M-x save-buffers-kill-emacs}) によって Emacs を
終了する場合。

@item
@kbd{M-x skk-save-jisyo} と入力したか、メニューバーの @samp{Save Jisyo} を
選択した場合。

@item
個人辞書が「変数 @code{skk-jisyo-save-count} で指定された回数」の更新が行
われた結果として、自動保存 (オートセーブ) 機能が働くとき。

@item 
変数 @code{skk-save-jisyo-instantly} が @code{non-nil} であれば、
単語登録（単語削除）のたびに個人辞書を保存する。
@end enumerate

保存動作を分析して考えます。まず、 Emacs に読み込んだ個人辞書が更新され
ているかどうかを調べます。更新されていたら保存動作に入ります。Emacs の個
人辞書バッファを一時ファイルに保存して、そのファイルサイズが現存の (セー
ブ前の) 個人辞書より小さくないかどうかをチェックします。個人辞書より小さ
いときは、保存動作を継続するかどうか、確認のための質問がされます
@footnote{通常の使用の範囲では @kbd{M-x skk-purge-from-jisyo} した場合、あ
るいは個人辞書をユーザが意図的に編集した場合、複数の Emacs で DDSKK を
使用した場合などに、個人辞書が小さくなることがあります。他の場合はバグの
可能性があります。}。

@example
@group

--------------------------- Minibuffer -----------------------------
New ~/.skk-jisyo will be 11bytes smaller.  Save anyway?(yes or no)
--------------------------- Minibuffer -----------------------------

@end group
@end example

@noindent
ここで @kbd{n o @key{RET}} と答えた場合は、そこで保存動作が中止され、個
人辞書は以前の状態のままになります。@kbd{y e s @key{RET}} と答えた場合は
元の個人辞書を退避用の辞書 @file{~/.skk-jisyo.BAK}  に退避し、一時ファイ
ルに保存した新しい個人辞書を @code{skk-jisyo} に保存します。

もし、一時ファイルのサイズが 0 である場合は、なんらかの異常と考えられる
ため保存動作は直ちに中止されます。その場合は

@kindex M-x skk-kill-emacs-without-saving-jisyo

@kbd{M-x skk-kill-emacs-without-saving-jisyo}

@noindent
で Emacs を終了させ、個人辞書 (@code{skk-jisyo}) 及び個人辞書の退避用辞
書 (@code{skk-backup-jisyo}) をチェックするよう強くお勧めします
@footnote{@code{skk-jisyo} が既に壊れていても、変数 @code{skk-backup-jisyo} が
指し示すファイルにそれ以前の個人辞書が残っている可能性があります。}。

@defvr {ユーザ変数} skk-compare-jisyo-size-when-saving
この変数の値を @code{nil} に設定すると、保存前の個人辞書とのサイズを比較
しません。
@end defvr

@defvr {ユーザ変数} skk-jisyo-save-count

この変数で指定された回数、個人辞書が更新された場合に個人辞書が自動保存さ
れます。デフォルトは 50 です。また、この値を @code{nil} にすると、個人辞
書の自動保存機能が無効になります。

ここで、個人辞書の更新回数は確定回数と一致します。また、同じ候補について
確定した場合でもそれぞれ 1 回と数えられます
@footnote{これは、個人辞書の最小ポイントに、常に最後に変換を行ったエン
トリを移動させるために、エントリ数、候補数が全く増えていなくとも、確定に
より個人辞書が更新されているからです。}。
@end defvr

@defvr {ユーザ変数} skk-save-jisyo-instantly
この変数が @code{non-nil} であれば、単語を登録するたび（削除するたび）に
個人辞書を保存します。
@end defvr

@defvr {ユーザ変数} skk-share-private-jisyo
@code{Non-nil} であれば、複数の SKK による個人辞書の共有を考慮して辞書を
更新する。 SKK 起動後にこの変数を変更した場合は @kbd{M-x skk-restart} で
反映させること。
@end defvr

@node 変換及び個人辞書に関する統計
@subsection 変換及び個人辞書に関する統計

DDSKK は、かな漢字変換及び個人辞書に関する統計を取っており、Emacs の終了
時にファイル @file{~/.skk-record} に保存します。保存する内容は、以下の形
式です。

@cartouche
Sun Jul 28 09:38:59 1996  登録:   4  確定:  285  確定率:  98%  語数:  3042
@end cartouche

上記の「語数:」の数は個人辞書 @file{skk-jisyo} に登録されている候補数です
が、ここでは 1 行を 1 語として数えています。そのため、1 つの見出し語に対
して複数の候補を持っている場合は、2 つ目以降の候補を無視しています。

@defvr {ユーザ変数} skk-record-file

統計情報を保存するファイル名を指定します。
(@w{@pxref{設定ファイル}})

@end defvr

@defvr {ユーザ変数} skk-keep-record

この変数の値を @code{nil} に設定すると、本節で説明した統計機能を無効に
します。数値を設定すると、@code{skk-record-file} を指定数値の行数よ
り大きくしません。

@end defvr

@defvr {ユーザ変数} skk-count-private-jisyo-candidates-exactly

この変数の値を @code{non-nil} に設定すると、「語数」の数え方を変更します。
具体的には、 1 行を 1 語として数えるのではなく、正確に語数を数えます。
なお、その分時間がかかります。また、この場合でも @samp{[} と @samp{]}
に囲まれた送り仮名毎のブロック形式内は数えません。

@end defvr

@cindex Menu Bars
@cindex メニューバー
@findex skk-count-jisyo-candidates
@kindex M-x skk-count-jisyo-candidates

@noindent
@kbd{M-x skk-count-jisyo-candidates}

このコマンドを使うと、辞書の候補数を数えることができます。

@example
@group
@kbd{M-x skk-count-jisyo-candidates}

--------------- MiniBuffer --------------
Jisyo file: (default: /your/home/.skk-jisyo) ~/@point{}
--------------- MiniBuffer --------------
@end group

@group
@kbd{. s k k - j i s y o @key{RET}}

-------------- Echo Area --------------
Counting jisyo candidates@dots{} 100% done
-------------- Echo Area --------------
@end group

@group
------ Echo Area ------
3530 candidates
------ Echo Area ------
@end group
@end example

ただし、@samp{[} と @samp{]} に囲まれた送り仮名毎のブロック形式内は数えませ
ん。

また、メニューバーが使用できる環境では、メニューバーを使ってこのコマンド
を呼び出すことができます。@w{@xref{Menu Bars, ,メニューバー, emacs, GNU Emacs Manual}.}

@node 辞書バッファ
@subsection 辞書バッファ
@cindex @file{dabbrev.el}
@cindex @samp{ *SKK-JISYO.L*}
@findex fundamental-mode
@vindex major-mode
@vindex mode-name
@vindex skk-large-jisyo
@cindex 辞書バッファの名付け規則

辞書検索プログラムを実行すると、必要ならば辞書が Emacs のバッファに読み
込まれます。このバッファを@b{辞書バッファ}と呼びます。

辞書バッファの名前は、

「空白+@samp{*}+辞書ファイル名(ディレクトリ抜き)+@samp{*}」

@noindent
という規則に基づいて付けられます。例えば、変数 @code{skk-large-jisyo} の
値が

@file{/usr/local/share/skk/SKK-JISYO.L}

@noindent
であるとき、これに対する辞書バッファ名は、

@samp{ *SKK-JISYO.L*}

@noindent
となります。

このバッファのメジャーモードは @code{fundamental-mode} です。しかし、諸
般の事情により、変数 @code{major-mode} の値をシンボル @code{skk-jisyo-mode} と、
変数 @code{mode-name} の値を文字列 @samp{SKK dic} としています
@footnote{これは、Emacs の @file{dabbrev.el} の機能との調和を考えての措
置です。
Dabbrev においては、現在のバッファと同じモードの他のバッファを検索して
abbreviation の展開を行うように設定することができるのですが、仮に辞書
バッファにおける変数 @code{major-mode} の値が @code{fundamental-mode} のま
まだとすると、 Dabbrev が辞書バッファを検索してしまう可能性があります。
この措置によって、そのような事態を回避しています。}。

@node 辞書バッファの文字コードの設定
@subsection 辞書バッファの文字コードの設定
@vindex skk-coding-system-alist
@findex skk-find-coding-system

@defvr {ユーザ変数} skk-jisyo-code

この変数の値は辞書ファイルの文字コードを決定します。
この変数は以下のような値を取ります。

@itemize @bullet
@item @samp{euc}, @samp{ujis}, @samp{sjis}, @samp{jis} などの文字列。順に @code{euc-jisx0213}, @code{euc-jisx0213}, @code{shift_jisx0213}, @code{iso-2022-jp-3-strict} の各シンボルへ変換されます (@code{skk-coding-system-alist})。
@item Emacs の coding system (コード系)
@footnote{coding system は GNU Emacs の場合 @code{euc-jp}, @code{shift_jis},
@code{junet} などの symbol で表され、@kbd{M-x describe-coding-system} で
調べることができます。XEmacs の場合 symbol は coding system そのものでは
なく coding system object を指示するための symbol として扱われます。
具体的には GNU Emacs では @code{(coding-system-p 'euc-jp)} が @code{t} を
返すのに対し、 XEmacs では @code{nil} を返しますが、代わりに symbol が示
す coding system object を返す @code{find-coding-system} 関数が存在します。}
@item @code{nil}
@end itemize

デフォルトは @code{nil} です。この場合、DDSKK 側で辞書の文字コードを設定する
ことはせず、Emacs に任せます。
@end defvr

@node 辞書バッファのbuffer-file-name
@subsection 辞書バッファのbuffer-file-name
@vindex buffer-file-name
@findex save-some-buffers

Emacs には @code{save-some-buffers} という関数があります。この関数は、ファ
イルに関連付けられている各バッファについて、変更があればファイルに保存し
ますが、実際に保存するかどうかをユーザに質問します。

Emacs のコマンドには @kbd{M-x compile} のように、
@code{save-some-buffers} を呼び出すものがあります。もし、個人辞書の辞書
バッファがファイル名と関連付けられていたとしたら、こうしたコマンドを
実行するたびに個人辞書を保存するかどうか質問されるので、面倒です。

DDSKK では、このような事態を避けるため、辞書バッファにおける変数
@code{buffer-file-name} の値を @code{nil} に設定しています。

@node 注釈 (アノテーション)
@section 注釈 (アノテーション)

かな漢字変換の際に、候補に注釈 (アノテーション) が登録されていれば、それ
を表示することができます。

@menu
* アノテーションの基礎::     予備知識
* アノテーションの使用:: 
* アノテーションの登録::
* アノテーションとして EPWING 辞書を表示する::
* Apple OS X 「辞書」サービスからアノテーションを取得する::
* Wikipedia/Wiktionary からアノテーションを取得する::
* 外部コマンドからアノテーションを取得する::
* 各種アノテーション機能を SKK の枠をこえて活用する::
@end menu

@node アノテーションの基礎
@subsection アノテーションの基礎

この節では、辞書の中でのアノテーションの取り扱いを説明します。

アノテーションは、ユーザが登録したものと、共有辞書に元々登録されている
もの、それ以外の情報源から取得されるものの 3 つに大別されます。

ユーザが付けたアノテーションを「ユーザアノテーション」
と呼びます。ユーザアノテーションは、次の形式で個人辞書に登録されます。

@example
「きかん /期間/機関;*機関投資家/基幹;*基幹業務/」
@end example

上記のとおり、@code{;} の直後に @code{*} が自動的に振られる
@footnote{@code{*} の文字は変換時には表示されません}ことによってユーザが
独自に登録したアノテーションであることが分かります。

一方、共有辞書に元々登録されているアノテーションを「システムアノテー
ション」と呼び、これは @code{;} の直後に @code{*} の文字を伴いません。
システムアノテーションは、次の形式で辞書に登録されています。

@example
「いぜん /以前;previous/依然;still/」
@end example

システムアノテーションは、L 辞書等に採用されています。

上記のいずれでもなく、外部の辞典その他の情報源から得られるものを「外部ア
ノテーション」といいます。外部アノテーションは Emacs Lisp パッケージであ
る lookup.el、 Apple OS X 付属の辞書、Wiktionary/Wikipedia などから取得可能
です。

@node アノテーションの使用
@subsection アノテーションの使用

@defvr {ユーザ変数} skk-show-annotation

この変数の値を @code{non-nil} に設定するとアノテーションを表示します
@footnote{Viper 対策はまだ行われていません。@file{~/.viper} に次のように
書いて下さい。

@lisp
(viper-harness-minor-mode "skk-annotation")
@end lisp
}。

@table @code

@item (setq skk-show-annotation t)

アノテーションを常に表示します。

@item (setq skk-show-annotation '(not list))

 *候補*バッファ@footnote{@code{skk-show-candidates-always-pop-to-buffer}}では、アノテーションを表示しません。

@item (setq skk-show-annotation '(not minibuf))

ミニバッファにおけるかな漢字変換（単語登録時）では、アノテーションを表示しません。

@item (setq skk-show-annotation '(not list minibuf))

 *候補*バッファ及びミニバッファでは、アノテーションを表示しません。

@item (setq skk-show-annotation nil)

いかなる場合もアノテーションを表示しません。

@end table

@end defvr

@defvr {ユーザ変数} skk-annotation-delay

アノテーションを表示するまでの遅延を秒で指定する。デフォルトは 1.0 秒。

@end defvr

@kindex C-w
@defvr {ユーザ変数} skk-annotation-copy-key

@kbd{C-w} をタイプすると、現在表示されているアノテーションを kill ring に
保存します。保存した内容を Emacs 以外のアプリケーションで利用したい場合は
変数 @code{interprogram-cut-function} を設定してください。

@end defvr

@defvr {ユーザ変数} skk-annotation-show-as-message

@code{Non-nil} (デフォルト) であれば、アノテーションをエコーエリアに表示します。

@code{nil} であれば、other-window を一時的に開いてアノテーションを表示します。
other-window は、その候補を確定するか、その候補の選択を止める (次の
候補の表示又は quit) と自動的に閉じます。

この変数の値にかかわらず、変数@code{skk-show-tooltip} が @code{non-nil} の
場合はアノテーションをツールティップで表示します。

@end defvr

@kindex ^
@defvr {ユーザ変数} skk-annotation-toggle-display-char

「*候補*バッファ」で変換候補を一覧表示しているときにアノテーションの
表示／非表示を動的に切り替えるキーを設定します。
デフォルトは @kbd{^} です。

@example
@group
----- Buffer: *候補* -----
A:射
S:亥;[十二支](12)いのしし
D:夷;夷狄
F:姨;おば
J:洟;はな
K:痍;満身創痍
L:維;維持
----- Buffer: *候補* -----
@end group

@kbd{^}

@group
----- Buffer: *候補* -----
A:射
S:亥;
D:夷;
F:姨;
J:洟;
K:痍;
L:維;
----- Buffer: *候補* -----
@end group
@end example

@end defvr

@defvr {ユーザ変数} skk-annotation-function

ユーザアノテーションとシステムアノテーションを区別することで、ユーザアノ
テーションだけを表示したり、あるいはその逆を行うことが可能です。

変数 @code{skk-annotation-function} に「表示したいアノテーション
を @code{non-nil} と判定する関数」を定義します。
アノテーション文字列を引数にして変数 @code{skk-annotation-function} が
指し示す関数が @code{funcall} されて、戻り値が @code{non-nil} である場合に
限ってアノテーションが表示されます。

@lisp
@group
(setq skk-annotation-function
      (lambda (annotation)
          (eq (aref annotation 0) ?*)))
@end group
@end lisp

@noindent
上記の例では、アノテーションの先頭が @code{*} で始まる「ユーザアノテー
ション」の場合に @code{t} を返すλ式を @code{skk-annotation-function} に
定義しました。これによってユーザアノテーションだけが表示されます。

@end defvr

@node アノテーションの登録
@subsection アノテーションの登録
@findex skk-annotation-add
@findex skk-annotation-kill
@findex skk-annotation-remove
@kindex M-x skk-annotation-add
@kindex M-x skk-annotation-kill
@kindex M-x skk-annotation-remove

@defun {コマンド} skk-annotation-add &optional NO-PREVIOUS-ANNOTATION

アノテーションを登録／修正するには、アノテーションを付けたい単語を確定し
た直後に同じバッファで @kbd{M-x skk-annotation-add} と実行します。

アノテーションを編集するバッファ(*SKK annotation*)が開いてカレントバッファ
になりますので、アノテーションとして表示する文章を編集してください。
編集が終わったら @kbd{C-c C-c} とタイプします。

その単語に既にアノテーションが付いている場合は、あらかじめ当該アノテーショ
ンを挿入して *SKK annotation* を開きます。

@end defun

@defun {コマンド} skk-annotation-kill

上記 @kbd{M-x skk-annotation-add} を実行したもののアノテーションを付けず
に *SKK annotation* を閉じたいときは、@kbd{C-c C-k} とタイプするか 
@kbd{M-x skk-annotation-kill} を実行してください。

@end defun

@defun {コマンド} skk-annotation-remove

最後に確定した候補からアノテーションを取り去りたいとき
は @kbd{M-x skk-annotation-remove} と実行します。

@end defun

@node アノテーションとして EPWING 辞書を表示する
@subsection アノテーションとして EPWING 辞書を表示する

@file{skk-lookup.el} に含まれる関数 @code{skk-lookup-get-content} を活用
することにより、EPWING 辞書から得た内容をアノテーション表示することが可能
です。

辞書検索ツールの Lookup (@url{http://openlab.jp/edict/lookup/}) が正常に
インストールされていることが前提です。Lookup を新規にインストールした場
合は、SKK をインストールし直す必要があります。

EPWING 辞書の内容をアノテーション表示するには、２つの方法があります。

@enumerate
@item
@code{skk-treat-candidate-appearance-function} を設定する方法

候補の表示を装飾する関数を指定する変数
@code{skk-treat-candidate-appearance-function} を設定する場合は、
@file{etc/dot.skk} に示されている設定例を以下のように変更してください。

@lisp
@group
+ (require 'skk-lookup)
  (setq skk-treat-candidate-appearance-function
        #'(lambda (candidate listing-p)
            (let* ((value (skk-treat-strip-note-from-word candidate))
                   (cand (car value))     ;候補
-                  (note (cdr value))     ;注釈
+                  (note (skk-lookup-get-content cand listing-p))
                   (sep (if note          ;セパレータ
                   :
@end group
@end lisp

@defun skk-lookup-get-content 単語 listing-p

単語の意味を EPWING 辞書から取得します。オプション引数 listing-p が
@code{non-nil} なら候補一覧用に一行の短い文字列を返しますが、@code{nil} な
らば全体を返します。

@end defun

@defvr {ユーザ変数} skk-lookup-get-content-nth-dic

関数 @code{skk-lookup-get-content} が「どの EPWING 辞書から単語の意味を
取得するのか」を、ゼロを起点とした数値で指定します。

docstring に例示した S 式を評価してみてください。

@end defvr

@noindent
@kbd{M-x skk-lookup-get-content-setup-dic}
@kindex M-x skk-lookup-get-content-setup-dic


@b{DDSKK の起動後に変数 @code{skk-lookup-get-content-nth-dic} の数値を変
更した場合は、このコマンドを必ず実行してください。}

@item
@code{skk-annotation-lookup-lookup} を設定する方法

次に変数 @code{skk-annotation-lookup-lookup} について説明します。この変
数は EPWING 経由アノテーションの設定を簡単にします。

@defvr {ユーザ変数} skk-annotation-lookup-lookup

@code{Non-nil} ならば @file{lookup.el} を利用してアノテーションを取得する。

@lisp
(setq skk-annotation-lookup-lookup t)
@end lisp

この値を @code{always} に設定すると、候補一覧でも辞書サービスを引く。
@footnote{この設定は変数 @code{skk-treat-candidate-appearance-function} 
の値を上書きします。@code{skk-treat-candidate-appearance-function} を
自分で設定する場合は @code{skk-annotation-lookup-lookup} には @code{t}
または @code{nil} を必要に応じて設定します。}

@lisp
(setq skk-annotation-lookup-lookup 'always)
@end lisp

@end defvr                                    

@end enumerate

@node Apple OS X 「辞書」サービスからアノテーションを取得する
@subsection Apple OS X 「辞書」サービスからアノテーションを取得する

Mac OS X 10.5 以降に標準で入っている国語辞典などからアノテーションが取得
できます。@footnote{この機能を利用するには、python の拡張機能として
readline と pyobject-framework-DictionaryServices が必要です。後者につい
ては OS X 10.5 (Leopard) 以降の OS 標準の python に初めからインストール
されています。readline については OS X 10.7 (Lion) 標準の python ではイ
ンストールする必要がありません。OS X 10.6 以前の場合は

@example
% easy_install readline 
@end example

@noindent
などの方法でインストールします。}

@defvr {ユーザ変数} skk-annotation-lookup-DictionaryServices

@code{Non-nil} ならば OS X の辞書サービスを利用してアノテーションを取得
する。

@lisp
(setq skk-annotation-lookup-DictionaryServices t)
@end lisp

この値を @code{always} に設定すると候補一覧でも辞書サービスを引く。
@footnote{この設定は変数 @code{skk-treat-candidate-appearance-function} 
の値を上書きします。@code{skk-treat-candidate-appearance-function} を
自分で設定したい場合は @code{skk-annotation-lookup-DictionaryServices}
には @code{t} または @code{nil} を必要に応じて設定します。}

@lisp
(setq skk-annotation-lookup-DictionaryServices 'always)
@end lisp

@end defvr

@defvr {ユーザ変数} skk-annotation-python-program

アノテーション取得のために呼びだす python のプログラム名。

@lisp
(setq skk-annotation-python-program "/usr/bin/python")
@end lisp

@end defvr

今のところ、アノテーションを取得する辞典を選択することはできません。
OS X の「辞書」アプリ (Dictionary.app) を起動し、環境設定から辞書の検索
順を指定してください。国語辞典を上位に指定すれば使いやすくなります。

@node Wikipedia/Wiktionary からアノテーションを取得する
@subsection Wikipedia/Wiktionary からアノテーションを取得する

候補にアノテーションの登録がない場合、アノテーションに代えて
@uref{http://ja.wiktionay.org/, Wiktionary},
@uref{http://ja.wikipedia.org/, Wikipedia} 
による解説を表示することができます。他のアノテーションが変換時に自動的に
表示されるのに対し、 Wikipedia/Wiktionary アノテーションは基本的にユーザ
の指示によって取得される点で異なります。

▼モードで候補を表示しているときに @kbd{C-i} を押すと、
@code{skk-annotation-other-sources} で指定された順で解説を取得して
エコーエリアに表示@footnote{変数@code{skk-show-tooltip} が @code{non-nil} の
場合、ツールティップで表示します。} します。

@example
B o k u j o u

@group
----- Buffer: foo -----
▽ぼくじょう@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▼牧場@point{}
----- Buffer: foo -----
@end group

@kbd{C-i}

@group
----------------------------- Echo Area ------------------------------
牧場（ぼくじょう）とは、ウシ、ウマなどの家畜を飼養する施設。訓読みされ
てまきばと呼ばれることもある。
----------------------------- Echo Area ------------------------------
@end group
@end example

エコーエリアに解説が表示されている最中に @kbd{C-o} を押すと、
関数 @code{browse-url} を用いて、その解説の元となった URL をブラウズしま
す。

@kindex C-i
@defvr {ユーザ変数} skk-annotation-wikipedia-key

デフォルトは @kbd{C-i} です。

@end defvr

@kindex C-o
@defvr {ユーザ変数} skk-annotation-browse-key

デフォルトは @kbd{C-o} です。eww で閲覧したい場合は、次のとおり設定して
ください。

@lisp
(setq browse-url-browser-function 'eww-browse-url)
@end lisp

@end defvr

@defvr {ユーザ変数} skk-annotation-other-sources

アノテーションを取得する SKK 辞書以外のソースを指定します。

@end defvr

@node 外部コマンドからアノテーションを取得する
@subsection 外部コマンドからアノテーションを取得する

外部コマンドからアノテーションを取得できます。

@defvr {ユーザ変数} skk-annotation-lookup-dict

@code{Non-nil} ならば、@code{skk-annotation-dict-program} に指定された外
部コマンドからアノテーションを指定します。

@end defvr

@defvr {ユーザ変数} skk-annotation-dict-program

アノテーションを取得するための外部コマンド名を指定します。

@end defvr

@defvr {ユーザ変数} skk-annotation-dict-program-arguments

アノテーションを取得に使う外部コマンドに渡す引数を指定します。

@end defvr

@node 各種アノテーション機能を SKK の枠をこえて活用する
@subsection 各種アノテーション機能を SKK の枠をこえて活用する

前述した各種外部アノテーション (lookup.el + EPWING 辞書、 Apple OS X 辞書、
Wikipedia/Wiktionary) は、SKK の変換モードだけでなく Emacs のあらゆる状
況で辞書引き機能として使うことができます。そのためには、コマンド
@code{skk-annotation-lookup-region-or-at-point} を任意にキー定義します。

@defun {コマンド} skk-annotation-lookup-region-or-at-point &optional PREFIX-ARG START END

このコマンドは、領域が指定されていればその領域の文字列をキーワードとして
Lookup.el, OS X 辞書サービス、または Wikipedia/Wiktionary アノテーション
を探し、表示します。領域が指定されていなければ、可能な範囲でその位置にあ
る単語 (始点と終点) を推測します。
@end defun

一例として、以下のキー割当を紹介します。

@lisp
(global-set-key "\M-i" 'skk-annotation-lookup-region-or-at-point)
@end lisp

@noindent
このようにしておくと、何かの意味が調べたくなったとき、領域選択して
@kbd{M-i} とタイプすればその場で辞書を引くことができます。

@noindent
さらに、ユーザオプション @code{skk-annotation-other-sources} の 3 番
目 (Apple OS X では 4 番目) は標準で @code{en.wiktionary} になっています。
例えば、英文を読んでいて buffer という語の正確な意味を参照したくなったと
します。そのときは 単語 buffer にポイントを合わせ、@kbd{M-3 M-i} 
(Max OS X では @kbd{M-4 M-i}) とプレフィックス付でコマンドを実行してみて
ください。@footnote{@code{skk-annotation-other-sources} の標準の値は環境
によって異なります。@file{lookup.el} と @file{skk-lookup.el} の設定が有
効になっている場合は @code{en.wiktionary} は 4 番目 (Apple OS X では 5 番
目) になります。}

@example
@group
----- Buffer: *scratch* -----
;; This buffer@point{} is for notes you don't want to save, and for @dots{}
----- Buffer: *scratch* -----
@end group

@kbd{M-3 M-i} (Max OS X では @kbd{M-4 M-i})
@end example

@noindent
すると SKK モードでのアノテーションと同様、以下のような説明が表示されま
す。

@example
@group
-------------------- Echo Area --------------------
 English, Noun
buffer (plural&#160;buffers)
 1: Someone or something that buffs.
 2: (chemistry) A solution used to stabilize the pH (acidity) of a
 liquid.
 3: (computing) A portion of memory set aside to store data, often
 before it is sent to an external device or as it is received from an
 external device.
[@dots{}]
-------------------- Echo Area --------------------
@end group
@end example

@node 文字コード関連
@section 文字コード関連

@menu
* 文字コードまたはメニューによる文字入力::
* メニューによる文字入力::
* 文字コード一覧::
* 文字コードを知る方法::
@end menu

関連項目 @w{@xref{辞書バッファの文字コードの設定}.}

@node 文字コードまたはメニューによる文字入力
@subsection 文字コードまたはメニューによる文字入力

@cindex JISコード
@cindex EUCコード
@kindex \
@kindex C-u \
@vindex skk-kcode-charset

かなモードで @kbd{\} キーを入力すると、ミニバッファに
@example
@group
---------------------------- Minibuffer -----------------------------
○○の文字を指定します。7/8 ビット JIS コード (00nn), 区点コード (00-00),
UNICODE (U+00nn), または [RET] (文字一覧): @point{}
---------------------------- Minibuffer -----------------------------
@end group
@end example

@noindent
というプロンプトが表示され、文字コード（JIS コード、EUC コードまたは区点番号）
またはメニューによる文字入力が促されます。

上記例示の○○部分は 変数 @code{skk-kcode-charset} の値であり、
その初期値は @code{japanese-jisx0208} 又は @code{japanese-jisx0213-1} です。
初期値は環境によって自動的に設定されます。
キー @kbd{\} の代わりに @kbd{C-u \} と入力すると、異なる文字集合 (charset) を指定す
る事ができます。

ここで、文字コードがあらかじめ分かっている場合には、その文字コードを入力
します。例えば @samp{℃} の文字コードは、JIS コードでは @samp{216e}、EUC
コードでは @samp{a1ee} なので、いずれかの文字コードを入力すれば @samp{℃}
が現在のバッファに挿入されます。

区点番号で入力するには @samp{01-78} のように区と点の間にハイフン @samp{-} を
入れる必要があります。ハイフン @samp{-} で区切った３組の数字は JIS X 0213 の
２面を指定したとみなします。例えば @samp{2-93-44} で「魚花」（ほっけ）が入力
できます。

@node メニューによる文字入力
@subsection メニューによる文字入力

文字コードが不明の文字を入力するには、文字コードを入力せずにそのまま
@key{RET} キーを入力します。するとミニバッファに以下のような表示が現れま
す。

@c 次の例示中では空欄となっているが、実行時は W: は U+ff0d (－),
@c R: は U+2295 (⊕), Y: は U+2194 (↔) である。
@example
@group
---------------------------- Minibuffer -----------------------------
A:　  S:￣  D:〜  F:｝  G:＝  H:¢  Q:◆  W:　  E:∩  R:　  T:≡  Y:　
---------------------------- Minibuffer -----------------------------
@end group
@end example

@kindex x
これを@b{「第１段階のメニュー」}と呼びます。第１段階のメニューでは、JIS 漢字を
コードの順に 16 文字毎に１文字抽出し、ミニバッファに一度に 12 文字ずつ
表示しています
@footnote{上記の例では、JIS コード 2121 (全角スペース)、2131、2141、2151、
@dots{} の文字がそれぞれ表示されています。}。ここで @key{SPC} を入力する
と次の候補群を表示します
@footnote{文字コードの値を @w{16x12 @equiv{}192} ずつ増やします。}。
@kbd{x} を入力すると１つ前の候補群に戻ります。

キー @kbd{a}, @kbd{s}, @kbd{d}, @kbd{f}, @kbd{g}, @kbd{h},
@kbd{q}, @kbd{w}, @kbd{e}, @kbd{r}, @kbd{t}, @kbd{y} のいずれかを
入力すると
@footnote{大文字でも小文字でも構いません。なお、第１段階・第２段階とも
に、メニューのキーを変更することができます。
@w{@ref{候補の選択に用いるキー}} を参照してください。}
、そのキーに対応する文字から始まる 16 個の文字が文字コード順に表示されま
す。これを@b{「第２段階のメニュー」}と呼びます。例えば、第１段階のメニュ
ーが上記の状態のときに @kbd{d} を入力すると 第２段階のメニューは以下のよ
うになります。

@smallexample
@group
--------------------------------- Minibuffer ----------------------------------
A:〜 S:‖ D:｜ F:… G:‥ H:‘ J:’ K:“ L:” Q:（ W:） E:〔 R:〕 T:［ Y:］ U:｛
--------------------------------- Minibuffer ----------------------------------
@end group
@end smallexample

ここで、キー @kbd{a}, @kbd{s}, @kbd{d}, @kbd{f}, @kbd{g}, @kbd{h}, @kbd{j},
@kbd{k}, @kbd{l}, @kbd{q}, @kbd{w}, @kbd{e}, @kbd{r}, @kbd{t}, @kbd{y},
@kbd{u}, のいずれかを
入力すると、対応する文字がカレントバッファに挿入されてメニューによる入力
が終了します。

第２段階のメニューが表示されているときも @key{SPC} と @kbd{x} キーによ
り第２段階のメニューが前進、後退します。

@kindex <
@kindex >
@kindex ?
また @kbd{<}、@kbd{>} によりメニューを１文字分だけ移動します。例えば、
第２段階のメニューが上記の状態のときに @kbd{<} を入力すると、メニューは
以下のようになります。

@smallexample
@group
--------------------------------- Minibuffer ----------------------------------
A:＼ S:〜 D:‖ F:｜ G:… H:‥ J:‘ K:’ L:“ Q:” W:（ E:） R:〔 T:〕 Y:［ U:］
--------------------------------- Minibuffer ----------------------------------
@end group
@end smallexample

第１段階あるいは第２段階のメニューが表示されているときに @kbd{?} を入
力すると、そのときのキー @kbd{A} に対応する文字 (上記の例では、@samp{＼})
の文字コードが表示されます。

@defvr {ユーザ変数} skk-kcode-method

@kbd{\} の打鍵で起動する @code{skk-input-by-code-or-menu} の挙動を調節します。

@table @code
@item 'char-list
@kbd{\} の打鍵で「文字コード一覧」（skk-list-chars）を起動します。

@item 'code-or-char-list
@kbd{\} の打鍵で「文字コード」（skk-input-by-code）を起動します。
JIS コード/区点コード入力プロンプトの表示に対して単に @key{RET} をタイプした場合、
「文字コード一覧」（skk-list-chars）を起動します。

@item 'this-key
@kbd{\} の打鍵で @samp{\} を挿入します。

@item 上記シンボル以外
@kbd{\} の打鍵で「文字コード」（skk-input-by-code）を起動します。
JIS コード/区点コード入力プロンプトの表示に対して単に @key{RET} をタイプした場合、
「メニュー入力」を起動します。

@end table

@end defvr

@node 文字コード一覧
@subsection 文字コード一覧
@kindex M-x skk-list-chars
@vindex skk-kcode-charset

@kbd{M-x skk-list-chars} と実行すると、変数 @code{skk-kcode-charset} が指
す文字集合に従ってバッファ @code{*skk-list-chars*} に文字の JIS コード一
覧が表示されます。

プレフィックス付きで、つまり @kbd{C-u M-x skk-list-chars} と実行すると、
カーソル位置の文字に照準をあわすようコード一覧を表示します。

@example
@group
-------------------- *skk-list-chars* --------------------
variable skk-kcode-charset's value is `japanese-jisx0208'.

01-#x--- 0-- 1-- 2-- 3-- 4-- 5-- 6-- 7-- 8-- 9-- A-- B-- C-- D-- E-- F
　 2120 　　　　、　。　，　．　・　：　；　？　！　゛　゜　´　｀　¨
　 2130 ＾　￣　＿　ヽ　ヾ　ゝ　ゞ　〃　仝　々　〆　〇　ー　—　‐　／
　 2140 ＼　〜　‖　｜　…　‥　‘　’　“　”　（　）　〔　〕　［　］
　 2150 ｛　｝　〈　〉　《　》　「　」　『　』　【　】　＋　−　±　×
　 2160 ÷　＝　≠　＜　＞　≦　≧　∞　∴　♂　♀　°　′　″　℃　￥
　 2170 ＄　¢　£　％　＃　＆　＊　＠　§　☆　★　○　●　◎　◇
-------------------- *skk-list-chars* --------------------
@end group
@end example

@table @kbd
@item f
@itemx C-f
@itemx l
カーソル移動

@item b
@itemx C-b
@itemx h
カーソル移動

@item n
@itemx C-n
@itemx j
カーソル移動

@item p
@itemx C-p
@itemx k
カーソル移動

@item C-x C-x
カーソル移動

@item \
@itemx o
文字集合の切り替え

@item c
文字コード入力

@item i
@itemx RET
文書バッファへ文字を挿入

@item q
skk-list-chars を抜ける。

@item $
カーソル位置の文字の文字コードを表示

@end table

ほか、Emacs のコマンド @kbd{M-x list-charset-chars} も有用でしょう。

@defvr {ユーザ変数} skk-list-chars-table-header-face
コード一覧の枠線などに適用するフェイスです。
@end defvr

@defvr {ユーザ変数} skk-list-chars-face
プレフィックス付きで実行したときの照準のフェイスです。
@end defvr

@node 文字コードを知る方法
@subsection 文字コードを知る方法
@kindex $
@cindex JISコード
@cindex EUCコード
@kindex M-x skk-display-code-for-char-at-point

かな/カナモードで @kbd{$} を入力する
@footnote{リードオンリーなバッファでは @kbd{M-x skk-display-code-for-char-at-point} を実行してください。}
と、現在のポイント位置の直後にある
文字の文字コードをエコーエリア@footnote{変数 @code{skk-show-tooltip} が
@code{non-nil} であればツールティップで表示します。
変数 @code{skk-show-candidates-always-pop-to-buffer} が @code{non-nil} で
あれば other-window に表示します。@code{skk-show-tooltip} が優先します。}
に表示します。

例えば、カーソルを文字 @samp{А} の上に置いて @kbd{$} を入力すると、

@example
@group
-------------------- Echo Area --------------------
`А',KUTEN:07-01, JIS:#x2721, EUC:#xa7a1, SJIS:#x8440, UNICODE:U+0410, キリール大文字A,CYRILLIC CAPITAL LETTER A
-------------------- Echo Area --------------------
@end group
@end example

@noindent
とエコーエリアに表示され、この文字がキリル文字であることがわかります。

@c プレフィックス付きで @kbd{\}（つまり @kbd{C-u \}）とタイプすると、
@c ポイント直後の文字について文字コード一覧が表示されます。
@c
@c @example
@c @group
@c -------------------- *skk-list-chars* --------------------
@c 07-#x--- 0-- 1-- 2-- 3-- 4-- 5-- 6-- 7-- 8-- 9-- A-- B-- C-- D-- E-- F
@c 　 2720 　　А　Б　В　Г　Д　Е　Ё　Ж　З　И　Й　К　Л　М　Н
@c 　 2730 О　П　Р　С　Т　У　Ф　Х　Ц　Ч　Ш　Щ　Ъ　Ы　Ь　Э
@c -------------------- *skk-list-chars* --------------------
@c @end group
@c @end example
@c
ほか、 Emacs のコマンド @kbd{M-x describe-char} も@footnote{Emacs 21 では @kbd{M-x describe-char-after} です。}有用でしょう。

@defvr {ユーザ変数} skk-display-code-prompt-face
エコーエリアに表示されるメッセージ中 @samp{KUTEN:}、@samp{JIS:}@samp{EUC:}、@samp{SJIS:} 及び @samp{UNICODE:} に適用するフェイスです。
@end defvr

@defvr {ユーザ変数} skk-display-code-char-face
エコーエリアに表示されるメッセージ中の当該文字に適用するフェイスです。
@end defvr

@defvr {ユーザ変数} skk-display-code-tankan-radical-face
エコーエリアに表示されるメッセージ中の総画数表示に適用するフェイスです。
@end defvr

@defvr {ユーザ変数} skk-display-code-tankan-annotation-face
エコーエリアに表示されるメッセージ中の文字名表示に適用するフェイスです。
@end defvr

@node DDSKK 以外のツールを用いた辞書変換
@section DDSKK 以外のツールを用いた辞書変換

@menu
* skk-lookup::                  Lookup を用いた辞書変換
* skk-look::                    look コマンドを用いた辞書変換
* Lisp シンボル名の補完検索変換::
@end menu

@node skk-lookup
@subsection skk-lookup
@cindex @file{skk-lookup.el}
@cindex Lookup
@vindex skk-lookup-search-agents
@findex skk-lookup-search

@file{skk-lookup.el} を使用すると、辞書検索ツールの Lookup
(@url{http://openlab.jp/edict/lookup/}) で検索できる辞書を用いて単語
の候補を出すことができるようになります @footnote{@file{skk-lookup.el}
は @file{skk-look.el} とは別ものです。}。

DDSKK のインストール過程で @code{(require 'lookup)} が成功する場合は
@file{skk-lookup.el} も自動的にインストールされます。
まずは @samp{make what-where} を実行して、@samp{SKK modules:} 欄
に @samp{skk-lookup} が含まれていることを確認してください。

Lookup がインストールされているにも関わらず、うまく @file{skk-lookup.el} が
インストールされない場合は、@file{SKK-CFG} を編集して @file{lookup.el}
が置かれているパスを @code{ADDITIONAL_LISPDIR} に設定し、再度 DDSKK をイ
ンストールして下さい
@footnote{関数 @code{skk-lookup-search} が @file{skk-autoloads.el} に
追加されます (@pxref{辞書検索のための関数}).}。

@file{~/.skk} に以下のように設定します。

@lisp
@group
(setq skk-search-prog-list
      (append skk-search-prog-list
              (list
               '(skk-lookup-search))))
@end group
@end lisp

@noindent
@code{skk-lookup-search} は、 DDSKK が用意している検索プログラムの中で最
も遅いものです。したがって、@code{skk-search-prog-list} の設定にあっては
辞書サーバの検索 (@code{skk-search-server}) よりも後方に置くよう設定します。

Lookup の agent で利用するのは、 @code{lookup-search-agents} から @code{ndkks},
@code{ndcookie} 及び @code{ndnmz} を取り去ったものです
@footnote{@code{skk-lookup-search-agents} にセットして検索するように
しています。Lookup とは異なる設定をする場合、この変数の設定を変更すれば
可能です}。

@node skk-look
@subsection skk-look
@cindex @file{skk-look.el}

@file{skk-look.el} は、 @command{look} コマンドを使って次の 3 つの機能を提供します
@footnote{@file{skk-look.el} は @file{skk-lookup.el} とは名前が似てい
ますが全くの別ものです}。

@menu
* 英単語の補完::
* 英単語をあいまいに変換して取り出す::
* 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う::
@end menu

@node 英単語の補完
@subsubsection 英単語の補完
@vindex skk-use-look

@code{skk-use-look} を @code{non-nil} に設定すると @file{skk-look.el}
が使用できるようになります。

例えば、 @file{~/.skk} で以下のように設定します。

@lisp
(setq skk-use-look t)
@end lisp

@noindent
SKK abbrev モードが拡張されて、@command{look} コマンドを使用した補完が有効
になります。

@example
@kbd{/ a b s t r}

@group
------ Buffer: foo ------
▽abstr@point{}
------ Buffer: foo ------
@end group

@kbd{@key{TAB}}

@group
------ Buffer: foo ------
▽abstract@point{}
------ Buffer: foo ------
@end group

@end example

と補完してくれます。通常の補完と同様に @kbd{.} で次の補完候補に、@kbd{,} で
ひとつ前の補完候補に移動できます。

SKK 形式の英和辞書@footnote{SKK 形式の英和辞書 edict が提供されています。
@xref{辞書の入手}.}があれば、ここから @key{SPC} を押して英和変換ができます。

@node 英単語をあいまいに変換して取り出す
@subsubsection 英単語をあいまいに変換して取り出す
@vindex skk-search-excluding-word-pattern-function

見出し語にアスタリスク @samp{*} を入れて @key{SPC} を押すと英単語をあいまい
にして変換できます。

@example

@group
------ Buffer: foo ------
▽abstr@point{}
------ Buffer: foo ------
@end group

@key{SPC}

@group
------ Buffer: foo ------
▼abstract@point{}
------ Buffer: foo ------
@end group

@end example

確定すると、@samp{abstr*} を見出し語と、@samp{abstract} を候補とする
エントリが個人辞書に追加されます。このようなエントリを追加したくない場合、
ユーザ変数 @code{skk-search-excluding-word-pattern-function} を適切に
設定します。

例えば次のような設定です。

@lisp
@group
(add-hook 'skk-search-excluding-word-pattern-function
          ;; 返り値が non-nil の時、個人辞書に取り込まない。
          ;; KAKUTEI-WORD を引数にしてコールされるので、不要でも引数を取る
          ;; 必要あり
          (lambda (kakutei-word)
              (and skk-abbrev-mode
                   (save-match-data
                     ;; SKK-HENKAN-KEY が "*" で終わるとき
                     (string-match "\\*$" skk-henkan-key)))))
@end group
@end lisp


@node 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う
@subsubsection 英単語をあいまいに変換して取り出した後、更に再帰的な英和変換を行う
@vindex skk-look-recursive-search
@vindex skk-look-expanded-word-only

SKK 辞書に

@example
   abstract /アブストラクト/抽象/
   abstraction /アブストラクション/
@end example

@noindent
というエントリがあるとして解説します
@footnote{edict 辞書 @file{SKK-JISYO.edict} があれば、例えば、

@lisp
@group
(setq skk-search-prog-list
      (append skk-search-prog-list
              (list
               '(skk-search-jisyo-file "/your-path/SKK-JISYO.edict" 0 t))))
@end group
@end lisp

@noindent
のように設定することにより、 edict 辞書を使用できます。}。

変数 @code{skk-look-recursive-search} の値を @code{non-nil} にセットして
下さい。

@example
▽abstr*

@key{SPC}

▼abstract

@key{SPC}

▼アブストラクト

@key{SPC}

▼抽象

@key{SPC}

▼abstraction

@key{SPC}

▼アブストラクション
@end example

@noindent
このように英単語 + その英単語を見出し語にした候補の「セット」を変換
結果として出力することができます。

@defvr {ユーザ変数} skk-look-expanded-word-only

この変数の値が @code{non-nil} であれば、再帰検索に成功した英単語の「セッ
ト」だけを出力することができます。再帰検索で検出されなかった英単語は無視
して出力しません。

@end defvr

@node Lisp シンボル名の補完検索変換
@subsection Lisp シンボル名の補完検索変換

SKK abbrev モードにて、Lisp シンボル名を補完して検索し、検索結果を候補と
して返すことができます。英文字の後ろに @samp{~} を付加してから変換を開始
してください。

まずは動作例を示します。

@example
/ d e f i ~

@group
----- Buffer: foo -----
▽defi~@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▽defimage@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▽define-abbrev@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▽define-abbrev-table@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: foo -----
▽define-abbrevs@point{}
----- Buffer: foo -----
@end group

@key{SPC}

@group
----- Buffer: *候補* -----
A:define-auto-insert
S:define-category
D:define-ccl-codepoint-translation-table
F:define-ccl-constant-translation-table
J:define-ccl-identity-translation-table
K:define-ccl-program
L:define-ccl-slide-translation-table
----- Buffer: *候補* -----
@end group
@end example

この機能を有効とするには、リスト @code{skk-search-prog-list} の要素に
関数 @code{skk-search-lisp-symbol} を加えてください。

@lisp
@group
(add-to-list 'skk-search-prog-list
	     '(skk-search-lisp-symbol) t)
@end group
@end lisp

なお、見出し語に @samp{~} を含む辞書もあります。例えば @file{SKK-JISYO.JIS3_4} には
@lisp
A~ /チルド付きA(LATIN CAPITAL LETTER A WITH TILDE)/
@end lisp
と登録@footnote{実際には JIS X 0213 の1面9区26点の1文字が登録されています。
この文字を @file{skk.texi} に直接記載するのは避けました。}されています。
したがって、▽A~ @key{SPC} と変換したときに「チルド付きA」が表示されるか、Lisp シンボル名が補完されるかは、リスト @code{skk-search-prog-list} 内の要素の順によります。

@defun skk-search-lisp-symbol &optional PREDICATE NOT-ABBREV-ONLY WITHOUT-CHAR-MAYBE
オプション @code{PREDICATE} で補完検索する範囲（関数名、変数名、コマンド名）を限定することができます。
詳細は docstring を参照してください。
@end defun

@defvr {ユーザ変数} skk-completion-search-char
@code{skk-completion-search} による変換機能を指示するキーキャラクタ。
デフォルトは @kbd{~} です。

@end defvr

@node 飾りつけ
@section 飾りつけ

@menu
* 仮名文字のローマ字プレフィックスのエコー::
* 入力モードを示すモードラインの文字列の変更::
* 入力モードを示すカーソル色に関する設定::
* 変換候補一覧の表示方法::
* ▼モードにおける変換候補のハイライト表示::
* 変換候補の更なる装飾::
* モードラインの装飾::
@end menu

@node 仮名文字のローマ字プレフィックスのエコー
@subsection 仮名文字のローマ字プレフィックスのエコー

@defvr {ユーザ変数} skk-echo

この変数の値は、仮名文字のローマ字プレフィックス
@footnote{@xref{送りありエントリと送りなしエントリ, ローマ字プレフィックス}.}
のエコーの有無を制御します。
@end defvr

変数 @code{skk-echo} の値が @code{non-nil} であれば、仮名文字のローマ字
プレフィックスが、入力時点でいったん現在のバッファに挿入され、続く母音の入
力の際に、かな文字に変換された時点で現在のバッファから消去されます。

@example
@group
@kbd{t}

------ Buffer: foo ------
t@point{}
------ Buffer: foo ------

@end group
@group
@kbd{a}

------ Buffer: foo ------
た@point{}
------ Buffer: foo ------
@end group
@end example

変数 @code{skk-echo} の値が @code{nil} であれば、仮名文字のローマ字プレ
フィックスのエコーは行われません。これを上記の例で考えると、@samp{t} が現
在のバッファに挿入されず、続く母音 (@kbd{a}) が入力されたとき @samp{た}
の文字が挿入されます。

@defvr {ユーザ変数} skk-prefix-hiragana-face

かなモードにおけるローマ字プレフィックスのフェイスを指定します。

@end defvr

@defvr {ユーザ変数} skk-prefix-katakana-face

カナモードにおけるローマ字プレフィックスのフェイスを指定します。

@end defvr

@defvr {ユーザ変数} skk-prefix-jisx0201-face

JIS X 0201 モードにおけるローマ字プレフィックスのフェイスを指定します。

@end defvr

@node 入力モードを示すモードラインの文字列の変更
@subsection 入力モードを示すモードラインの文字列の変更

下記の変数の値を変更することによって、モードライン上の「入力モードを示す文字
列」を変更することができます@footnote{skk-show-mode の表示も連動します。}。

@defvr {ユーザ変数} skk-latin-mode-string
アスキーモードを示す文字列。標準は、``SKK''。
@end defvr

@defvr {ユーザ変数} skk-hiragana-mode-string
かなモードを示す文字列。標準は、``かな''。
@end defvr

@defvr {ユーザ変数} skk-katakana-mode-string
カナモードを示す文字列。標準は、``カナ''。
@end defvr

@defvr {ユーザ変数} skk-jisx0208-latin-mode-string
全英モードを示す文字列。標準は、``全英''。
@end defvr

@defvr {ユーザ変数} skk-abbrev-mode-string
SKK abbrev モードを示す文字列。標準は、``aあ''。
@end defvr

@node 入力モードを示すカーソル色に関する設定
@subsection 入力モードを示すカーソル色に関する設定

@defvr {ユーザ変数} skk-use-color-cursor
この変数が @code{non-nil} ならば、カーソルを色付けします。@code{nil}
ならば、この機能を無効にします。

標準では、ウィンドウシステムを使用して、かつ、色表示が可能な場合に限
って、この機能が有効になります。
@end defvr

この機能が有効になっているとき、以下の変数の値を変更することで、各モード
におけるカーソルの色を変更できます。

@defvr {ユーザ変数} skk-cursor-default-color
SKK モードがオフであることを示すカーソル色。標準では、カーソルのある該当
フレームにおける標準のカーソル色を使います。
@end defvr

@defvr {ユーザ変数} skk-cursor-hiragana-color
かなモードであることを示すカーソル色。標準は、背景の明暗により coral4 また
は pink です。
@end defvr

@defvr {ユーザ変数} skk-cursor-katakana-color
カナモードであることを示すカーソル色。標準は、背景の明暗により forestgreen また
は green です。
@end defvr

@defvr {ユーザ変数} skk-cursor-jisx0201-color
JIS X 0201 モードであることを示すカーソル色。標準は、背景の明暗により blueviolet また
は thistle です。
@end defvr

@defvr {ユーザ変数} skk-cursor-jisx0208-latin-color
全英モードであることを示すカーソル色。標準は、gold です。
@end defvr

@defvr {ユーザ変数} skk-cursor-latin-color
アスキーモードであることを示すカーソル色。標準は、背景の明暗により ivory4 また
は gray です。
@end defvr

@defvr {ユーザ変数} skk-cursor-abbrev-color
skk abbrev モードであることを示すカーソル色。標準は、royalblue です。

@end defvr

@page

@node 変換候補一覧の表示方法
@subsection 変換候補一覧の表示方法

変換候補一覧の表示方法は、次の４つに大別されます。

@itemize @bullet
@item 現在のウィンドウにインライン表示する
@item ツールティップで表示する
@item 現在のウィンドウの隣に別なウィンドウを開いて表示する (ポップアップ)
@item エコーエリアに表示する
@end itemize

ここではその表示方法の制御について解説します。

@defvr {ユーザ変数} skk-show-inline

@b{XEmacs ではこの機能はサポートされません。}

この変数の値が @code{non-nil} であれば、候補一覧を現在のポイント位置でインライン表
示します。
値が シンボル @code{'vertical} であれば、各候補を縦方向にインライン表示します。

@cartouche
@defvr {ユーザ変数} skk-inline-show-face
インライン表示する変換候補を装飾するフェイスを指定します。デフォルト
は @code{'underline} です。

@lisp
(setq skk-inline-show-face 'font-lock-doc-face)
@end lisp

@code{skk-treat-candidate-appearance-function} による装飾を優先するには
@code{nil} に設定して下さい。
@end defvr

@defvr {ユーザ変数} skk-inline-show-background-color
インライン表示する変換候補の背景色を指定します。

@code{skk-inline-show-face} または
@code{skk-treat-candidate-appearance-function} にて、背景色が指定されてい
ない文字に対してのみ作用します。
@end defvr

@defvr {ユーザ変数} skk-inline-show-background-color-odd
インライン表示する変換候補の背景色（奇数ライン）を指定します。
@end defvr

@end cartouche
@end defvr

@page

@defvr {ユーザ変数} skk-show-tooltip
この変数の値が @code{non-nil} であれば、候補一覧をツールティップで表示し
ます。同時に、「注釈 (アノテーション) の表示方法」と「文字コードの表示方
法」も制御します。

@xref{注釈 (アノテーション)}.

@xref{文字コードまたはメニューによる文字入力}.

@cartouche
@defvr {ユーザ変数} skk-tooltip-face
ツールティップ表示する文字列に適用するフェイスを指定する変数です。

@lisp
(setq skk-tooltip-face 'font-lock-doc-face)
;; (make-face 'skk-tooltip-face) ではないことに注意
@end lisp

候補文字列のフェイス属性（@code{skk-treat-candidate-appearance-function} による加工など）をそのまま使いたい場合は @code{nil} に設定して下さい。
@end defvr

@defvr {ユーザ変数} skk-tooltip-mouse-behavior

ツールティップを表示する位置及びマウスポインタの挙動を指定します。
下記に掲げるシンボル以外のシンボルを指定した場合は @code{nil} となります。

@table @code
@item 'follow
マウスポインタをカーソル位置へ移動させてツールティップを表示します。
ツールティップの表示を終えるとマウスポインタは元の位置へ戻ります。ただし、元のマウスポインタが Emacs フレーム外であったならばツールティップの表示を終えてもマウスポインタはカーソル位置のままです。

@item 'banish
マウスポインタを Emacs フレーム右上隅へ移動させてツールティップを表示します。
ツールティップの表示を終えもてマウスポインタは Emacs フレーム右上隅のままです。

@item 'avoid
マウスポインタを Emacs フレーム右上隅へ移動させてツールティップを表示します。
ツールティップの表示を終えるとマウスポインタは元の位置へ戻ります。ただし、元のマウスポインタが Emacs フレーム外であったならばツールティップの表示を終えてもマウスポインタは Emacs フレーム右上隅のままです。

@item 'avoid-maybe
マウスポインタが Emacs フレーム内であれば @code{'avoid} と同じ動作です。
マウスポインタが Emacs フレーム外であればマウスポインタ位置を変更せず、その位置にツールティップを表示します。

@item nil
マウスポインタを一切移動せず、その位置にツールティップを表示します。
ツールティップのテキストとマウスポインタが重なったり、うまくツールティップが表示できなかったりする場合があります。

@end table

@end defvr

@defvr {ユーザ変数} skk-tooltip-hide-delay

ツールティップを表示する秒数。デフォルトは 1,000秒。この時間が経過すると、
ツールティップは自動的に消える。

@end defvr

@defvr {ユーザ変数} skk-tooltip-parameters

デフォルトは @code{nil}。SKK 独自のフレームパラメータを設定する。
@code{nil} の場合、@code{tooltip-frame-parameters} が適用される。

@end defvr

@end cartouche
@end defvr

@page

@defvr {ユーザ変数} skk-show-candidates-always-pop-to-buffer
この値が @code{non-nil} であれば、画面を上下に分割したうえで、変換一覧を専用
の「*候補*バッファ」で表示します。

候補一覧表示中に、この値を動的に切り換える手段が用意されています。

@cartouche
@defvr {ユーザ変数} skk-show-candidates-toggle-display-place-char
@kindex C-f
デフォルトは @kbd{C-f} です。このキーを候補一覧表示時にタイプすると、候補
一覧の表示位置をエコーエリアとバッファとで切り替えます。
@end defvr

@defvr {ユーザ変数} skk-candidate-buffer-background-color
 *候補*バッファの背景色を指定します。
背景色を付けたくない場合は @code{nil} を指定すること（デフォルト）。
@end defvr

@defvr {ユーザ変数} skk-candidate-buffer-background-color-odd
 *候補*バッファの背景色（奇数ライン）を指定します。
@end defvr

@end cartouche
@end defvr

@noindent
デフォルトでは３つの変数

@itemize @bullet
@item @code{skk-show-inline}
@item @code{skk-show-tooltip}
@item @code{skk-show-candidates-always-pop-to-buffer}
@end itemize

とも @code{nil} であり、この状態では候補一覧はエコーエリアに表示
@footnote{@code{frame-width} が不足する場合は *候補*バッファに表示します。}
します。

もしも、これら変数のうち２つ以上が @code{non-nil} の場合、優先順位は上記
の解説の順です。

@page

@node ▼モードにおける変換候補のハイライト表示
@subsection ▼モードにおける変換候補のハイライト表示
@cindex @file{canna.el}
@cindex @file{rgb.txt}

@defvr {ユーザ変数} skk-use-face

この変数の値が @code{non-nil} であれば、Emacs のフェイス機能を使って変換
候補をハイライト表示します。

@cindex Overlays
@cindex Extents
@cindex Text Properties
このハイライト表示には Emacs のオーバーレイ (overlay) の機能を使います
@footnote{以前のバージョンではテキスト属性 (text property) を使用してい
ました。

オーバーレイ属性はテキスト属性と異なり、テキストの一部とは見なされません。
そのため、テキストのコピーの際にオーバーレイ属性は保存されません。その他
にも、オーバーレイの移動やその属性の変更はバッファの変更とは見なされない
こと、オーバーレイの変更はバッファのアンドゥリストに記録されないこと、な
どが特徴として挙げられます。

なお、XEmacs にはオーバーレイ機能はありません。代わりに extent というも
のが用意されているのでそれを利用します。}。
@end defvr

@defvr {ユーザ変数} skk-henkan-face

この変数の値はフェイスであり、このフェイスによって変換候補がハイライト表
示されます。標準では、背景の明暗により ``black/darkseagreen2'' 又は
``white/darkolivegreen'' を用います。

なお、この変数よりも @code{skk-treat-candidate-appearance-function} の設
定が優先されます。
@end defvr

変数 @code{skk-henkan-face} には、既存のフェイス
@footnote{Emacs 標準 では @code{default}, @code{modeline}, @code{region},
@code{secondary-selection}, @code{highlight}, @code{underline},
@code{bold}, @code{italic}, @code{bold-italic} があります。}を指定できま
すが、新たにフェイスを作ることもできます。そのために、以下の関数が用意さ
れています。

@defun skk-make-face FACE

形式: (skk-make-face FACE)

この関数は、引数 FACE と同じ名前のフェイスを作成して、そのフェイスを返し
ます。フェイスの前景色・背景色は、引数 FACE にスラッシュを含めることよっ
て、例えば以下の例のように決定されます。

@lisp
(setq skk-henkan-face (skk-make-face 'DimGray/PeachPuff1))
@end lisp

この場合、前景色は DimGray に、背景色は PeachPuff1 になります。

もうひとつ例を挙げます。

@lisp
(setq skk-henkan-face (skk-make-face 'RosyBrown1))
@end lisp

この場合、前景色は RosyBrown1 になります。背景色が無指定の場合はバッファ
の背景色がそのまま見えます。
@end defun

@node 変換候補の更なる装飾
@subsection 変換候補の更なる装飾

変換候補についてユーザの任意の加工を施すための変数を用意してあります。

@defvr {ユーザ変数} skk-treat-candidate-appearance-function

この変数に適切な形式で関数を収めることによって、変換候補をユーザの任意に
加工することができます。「適切な形式」とは、次のとおりです。

@cartouche
@enumerate
@item
引数を２つ取ること。

@item
第１引数は文字列として扱うこと。これは加工前の文字列に相当する。

@item
第２引数が @code{nil} の時は通常の変換時、@code{non-nil} の時は候補一覧表
示時を表すものとして扱うこと。

@item
返り値は次のいずれかとすること。

@table @samp
@item 文字列

この場合、この文字列は候補と注釈を両方含みうるものとして処理される。

@item (候補 . 注釈)

この場合、候補はもう注釈を含まないものとして処理される。注釈については先
頭が @samp{;} かどうかを調べた上で処理される。

@item (候補 . (セパレータ . 注釈))

この場合、候補はもう注釈を含まないものとして処理される。セパレータは通常
の @samp{;} の代わりに利用される。注釈はもうセパレータを含まないものとして処
理される。
@end table

@end enumerate
@end cartouche

ファイル @file{etc/dot.skk} に設定例があるほか、サンプルとして関数
@code{skk-treat-candidate-sample1} と @code{skk-treat-candidate-sample2}
を用意してあります。
ファイル @file{~/.skk} に次のいずれかを書いてみて変換候補の装飾を試して
ください。

@lisp
(setq skk-treat-candidate-appearance-function
      'skk-treat-candidate-sample1)
@end lisp

@lisp
(setq skk-treat-candidate-appearance-function
      'skk-treat-candidate-sample2)
@end lisp

@end defvr

@node モードラインの装飾
@subsection モードラインの装飾

XEmacs 及び Emacs 21 以降では、以下の機能が使用できます。

@menu
* インジケータ::
* アイコン::
@end menu

@node インジケータ
@subsubsection インジケータ

@defvr {ユーザ変数} skk-indicator-use-cursor-color

DDSKK のインジケータをモードラインの左に表示
@footnote{デフォルトでは、左です。@w{@xref{起動と終了}.}}
している場合、インジケータの色がカーソルの色と同期します。
インジケータに色を付けたくない場合は、この変数を @code{nil} にします。

@end defvr

@xref{入力モードを示すカーソル色に関する設定}.

インジケータに独自色を使いたい場合は、以下のフェイス@footnote{
変数 @code{window-system} が @code{nil} の場合は、これらフェイスは未定義と
なります。} を設定します。この場合カーソルの色は参照されません。

Emacs 21 以上 @footnote{変数 @code{mule-version} の値が 5.0 以上の Emacs} の場合

@vindex skk-emacs-hiragana-face
@vindex skk-emacs-katakana-face
@vindex skk-emacs-jisx0208-latin-face
@vindex skk-emacs-jisx0201-face
@vindex skk-emacs-abbrev-face

@itemize @bullet
@item @code{skk-emacs-hiragana-face} 
@item @code{skk-emacs-katakana-face} 
@item @code{skk-emacs-jisx0208-latin-face} 
@item @code{skk-emacs-jisx0201-face} 
@item @code{skk-emacs-abbrev-face} 
@end itemize

XEmacs の場合

@vindex skk-xemacs-hiragana-face
@vindex skk-xemacs-katakana-face
@vindex skk-xemacs-jisx0208-latin-face
@vindex skk-xemacs-latin-face
@vindex skk-xemacs-jisx0201-face
@vindex skk-xemacs-abbrev-face

@itemize @bullet
@item @code{skk-xemacs-hiragana-face}
@item @code{skk-xemacs-katakana-face}
@item @code{skk-xemacs-jisx0208-latin-face}
@item @code{skk-xemacs-latin-face}
@item @code{skk-xemacs-jisx0201-face}
@item @code{skk-xemacs-abbrev-face}
@end itemize

なお、インジケータを右クリックするとポップアップメニューが表示されます。

@node アイコン
@subsubsection アイコン
@cindex @file{skk-icon}

@defvr {ユーザ変数} skk-show-icon

変数 @code{skk-show-icon} の値を @code{non-nil} と設定することにより、モー
ドラインに SKK のアイコンが表示されます@footnote{@code{(image-type-available-p 'xpm)} が @code{t} を返す必要があるため、Emacsen の実行環境に依存します。}。

@end defvr

@defvr {ユーザ変数} skk-icon

アイコンの画像ファイル @file{skk.xpm} へのパス。
関数 @code{skk-emacs-prepare-modeline-properties} で定義しています。

@end defvr

@node ユーザガイダンス関連
@section ユーザガイダンス関連

@menu
* エラーなどの日本語表示::
* 冗長な案内メッセージの表示::
@end menu

@node エラーなどの日本語表示
@subsection エラーなどの日本語表示

標準では、エラー、メッセージ及びミニバッファでのプロンプトは、英語で表示
されます。

@defvr {ユーザ変数} skk-japanese-message-and-error

この変数の値を @code{non-nil} に設定すると、エラー、メッセージ及びミニバ
ッファでのプロンプトを日本語で表示します。標準では @code{nil} です。
@end defvr

@defvr {ユーザ変数} skk-show-japanese-menu

この変数の値を @code{non-nil} に設定すると、メニューバーを日本語で表示します。
@end defvr

@defvr {ユーザ変数} skk-version-codename-ja

この変数の値を @code{non-nil} に設定すると、関数 skk-version を評価したと
きのコードネームを日本語で表示します。

@end defvr

@node 冗長な案内メッセージの表示
@subsection 冗長な案内メッセージの表示

@c http://mail.ring.gr.jp/skk/200704/msg00036.html
@defvr {ユーザ変数} skk-verbose

この変数の値を @code{non-nil} に設定すると、入力中／変換中に冗長なメッセ
ージを表示します。

@lisp
(setq skk-verbose t)
@end lisp
@end defvr

@table @asis
@item ▽モード

ファンクションキー (@key{F1} 〜 @key{F10}) に割り当てられている機能を表示
します。変数 @code{skk-verbose} の設定と同時に変数 @code{skk-j-mode-function-key-usage} を以下のように設定してみてください。
@vindex skk-j-mode-function-key-usage

@lisp
(setq skk-j-mode-function-key-usage 'conversion)
@end lisp

@noindent
▽モードにおいてキー入力が一定時間 (標準では 1.5 秒) なされなかったとき、
エコーエリアに以下のようなメッセージが表示されます。

@smallexample
@group
-------------------- Echo Area --------------------
[F5]単漢字 [F6]無変換 [F7]カタカナ [F8]半角カナ [F9]全角ローマ [F10]ローマ
-------------------- Echo Area --------------------
@end group
@end smallexample

@noindent
この案内に従ってファンクションキーを押すことで、一時的に単漢字変換やカタ
カナ変換を行うことができます。

@item ▼モード

Wikipedia アノテーション機能の使い方をメッセージで案内します。
変数 @code{skk-verbose} の設定と同時に変数 @code{skk-show-annotation} を @code{non-nil} に設定してみてください。
@vindex skk-show-annotation

@lisp
(setq skk-show-annotation t)
@end lisp

@noindent
▼モードにおいてキー入力が一定時間 (標準では 1.5 秒) なされなかったとき、
エコーエリアに以下のようなメッセージが表示されます。

@smallexample
@group
-------------------- Echo Area --------------------
@b{@{どれを参照?@}}[C-1 C-i]ja.wikipedia [C-2 C-i]en.wiktionary
[C-3 C-i]simple.wikipedia [C-4 C-i]en.wikipedia [C-5 C-i]ja.wiktionary
-------------------- Echo Area --------------------
@end group
@end smallexample

@noindent
この案内に従って、例えば @kbd{C-1 C-i} をタイプすると日本語 Wikipedia の該当記
事を調べて、あればその一部をアノテーションとして表示します。

一方、現在の変換候補に対するアノテーションが既に表示されているときは、
以下のメッセージが上記のものと交互に表示されます。

@smallexample
@group
-------------------- Echo Area --------------------
@b{@{アノテーション@}}[C-w]コピー [C-o]URLブラウズ [C-i]デフォルトのソースを参照
-------------------- Echo Area --------------------
@end group
@end smallexample

@noindent
この案内に従って @kbd{C-w} をタイプすればアノテーションの全文を kill ring に
保存して利用することができます。また @kbd{C-o} を押した場合には、もし現
在のアノテーションが Wikipedia アノテーションであればその出典となる
Wikipedia/Wiktionary のページをウェブブラウザで表示します。
@end table

@defvr {ユーザ変数} skk-verbose-wait
冗長なメッセージを表示するまでの待ち時間 (秒)。標準は 1.5 秒です。
@end defvr

@defvr {ユーザ変数} skk-verbose-message-interval
冗長なメッセージが複数ある場合の１メッセージあたり表示時間を秒で指定する。
標準は 5.0 秒です。
この時間が経過したら表示を次の冗長なメッセージに切り替えます。
@end defvr

@defvr {ユーザ変数} skk-verbose-intention-face
「どれを参照?」と「アノテーション」に適用するフェイスです。
@end defvr

@defvr {ユーザ変数} skk-verbose-kbd-face
@samp{[F5]} や @samp{[C-1 C-i]} に適用するフェイスです。
@end defvr

@node I-search関連
@section I-search関連
@cindex I-search
@cindex Incremental search
@cindex @file{~/.skk}

@menu
* 起動時の入力モードの指定::
* 間に空白等を含む文字列の検索::
@end menu

@node 起動時の入力モードの指定
@subsection 起動時の入力モードの指定

@defvr {ユーザ変数} skk-isearch-start-mode

インクリメンタル・サーチを起動したときの入力モードをこの変数で指定できます。
以下のいずれかのシンボルを指定できますが、変数 @code{skk-isearch-use-previous-mode} の
設定が優先されます。

@table @code

@item nil
カレントバッファで SKK モードが起動されていれば、そのモードを。
起動されていなければアスキーモード。

@item hiragana

かなモード

@item jisx0208-latin

全英モード

@item latin

アスキーモード

@end table

@end defvr

@defvr {ユーザ変数} skk-isearch-use-previous-mode

この変数の値が @code{non-nil} であれば、次のインクリメンタル・サーチ起動
時の入力モードは、前回のインクリメンタル・サーチでの入力モードになります。
@code{nil} であれば、変数 @code{skk-isearch-start-mode} の設定が優先され
ます。

@end defvr

@node 間に空白等を含む文字列の検索
@subsection 間に空白等を含む文字列の検索
@cindex Incremental regexp search

@samp{検索} という文字列をインクリメンタル・サーチにより検索する場合に、
バッファが以下のような状態になっていることがあります。

@example
@group
-------- Buffer: foo --------
この行末から始まる文字列を検
索して下さい。
-------- Buffer: foo --------
@end group
@end example

このような場合のために、Emacs は正規表現によるインクリメンタル・サーチを
提供しています。DDSKK はこの正規表現によるインクリメンタル・サーチにも対
応しているため、空白や改行を含んだ検索も可能です。

@table @kbd

@item M-x isearch-forward-regexp

@findex isearch-forward-regexp
@kindex M-x isearch-forward-regexp
@kindex C-u C-s
@kindex M-C-s

前方への正規表現によるインクリメンタル・サーチ。
@kbd{C-u C-s} または @kbd{M-C-s} で起動します。

@item M-x isearch-backward-regexp

@findex isearch-backward-regexp
@kindex M-x isearch-backward-regexp
@kindex C-u C-r
@kindex M-C-r

後方への正規表現によるインクリメンタル・サーチ。
@kbd{C-u C-r} または @kbd{M-C-r} で起動します。

@end table

@c 以下は空白や改行の処理を制御する変数です。

@defvr {ユーザ変数} skk-isearch-whitespace-regexp

この変数の値は正規表現です。この正規表現にマッチする要素は「正規表現によ
るインクリメンタル・サーチにおいては、単語を区切る要素ではない」と判断さ
れます。この変数のデフォルトは以下のようになっています。

@example
"\\(\\s \\|[ \t\n\r\f]\\)*"
@end example

この変数の値を変更することで、正規表現
によるインクリメンタル・サーチを拡張することができます。例えば、電子メー
ルの引用部分を検索する場合を考えます。

@example
> 引用部分も検
> 索できる。
@end example

上記のうち、「検索」という語は 2 行に渡っている上、引用マークが挿入さ
れています。ここで

@lisp
(setq skk-isearch-whitespace-regexp "\\(\\s \\|[ \t\n\r\f<>|]\\)*")
@end lisp

と設定することにより、「検索」を検索できるようになります。

@end defvr

@node VIP/VIPERとの併用
@section VIP/VIPERとの併用
@cindex VIP
@cindex VIPER
@cindex @file{vip.el}
@cindex @file{viper.el}

@defvr {ユーザ変数} skk-use-viper
@c XXX VIP 3.7 について言及する。

この変数の値を @code{non-nil} に設定すると、VIPER に対応します。
@end defvr

VIPER については @ref{Top, , VIPER, viper, VIPER Manual}. を参照してください。

また、VIPER の前身である VIP にも対応します。ただし、正式に対応している
バージョンは 3.5 のみです。これは Mule 2.3 に標準添付します
@footnote{ちなみに、VIP 3.5 の作者は、SKK の原作者でもある佐藤雅彦氏（京
都大学名誉教授）です。VIP 3.5 の発展版である VIPER は現在もメンテナンスさ
れています。Emacs19, 20 には、VIP 、VIPER とも標準添付します。}。

@node picture-modeとの併用
@section picture-modeとの併用
@cindex @key{BS}
@cindex move-to-column
@cindex move-to-column-force
@cindex @file{picture.el}
@cindex picture-mode

SKK モードを @code{picture-mode} において使用した場合は、以下のような問
題点があります。ただし、これらは @code{picture-mode} の問題なので、現在
のところ DDSKK 側では対処していません。

@enumerate
@item
SKK モードで全角文字を入力した場合に、@key{BS} で全角文字を消すことができ
ません。現状では、後方にある文字を消したい場合は、その文字にポイントを合
わせ、@kbd{C-c C-d} で一文字ずつ消す必要があります。

@item
コマンド @code{picture-movement-up} や @code{picture-movement-down} によ
り上下に全角文字を挿入した場合に、桁がずれる場合があります。
@end enumerate

関数 @code{move-to-column-force} の中で使用されている関数
@code{move-to-column} の引数として、全角文字を無視した桁数が与えられるこ
とがあり、そのときカーソル移動ができないため、これらの問題が生じます。

@node Org-modeとの併用
@section Org-modeとの併用

SKK モードを @code{Org-mode} において使用した場合は、以下のような問題点が
あります。

@enumerate
@item
org-mode の表中で Enter キーを押下したときの動作が報告されています (@url{http://mail.ring.gr.jp/skk/201401/msg00001.html})。

対処方法は @file{dot.skk} に記載してあります。

@end enumerate

@node ローマ字入力以外の入力方式
@chapter ローマ字入力以外の入力方式

DDSKK は、SKK 旧来のローマ字式かな入力 (訓令式、ヘボン式) 方式のほか、各
種キー配列と入力方式に対応しています。

@menu
* AZIK::
* ACT::
* TUT-code::
* かな入力と親指シフト::
@end menu

@node AZIK
@section AZIK
@cindex AZIK

AZIK (エイズィック) は QWERTY 配列をベースとした拡張ローマ字入力です。
一般のローマ字入力がそのまま使える上での拡張であることが特徴です。

@uref{http://hp.vector.co.jp/authors/VA002116/azik/azikindx.htm, 拡張ローマ字入力『ＡＺＩＫ』・『ＡＣＴ』で快適な日本語入力を！}

azik と skk で仕様が重なる部分があるため、@file{skk-azik.el} では以下のと
おり対応しています。
@table @b
@item @kbd{q}

AZIK では撥音「ん」を入力するには @kbd{q} を使うこととされていますが、skk で
は既に @kbd{q} に @code{skk-toggle-kana} を割り当てています。

そのため @file{skk-azik.el} では @code{skk-toggle-kana} の実行を
@itemize @bullet
@item 日本語キーボードであれば @kbd{@@} を、
@item 英語キーボードであれば @kbd{[} を
@end itemize
それぞれ使用します。

@item @kbd{@@}

上記のとおり、@code{skk-toggle-kana} の実行に
は @kbd{@@} (日本語キーボード) や @kbd{[} (英語キーボード) を使用しますが、
skk では既に @kbd{@@} には「今日の日付の入力」（プログラム実行変換）を割
り当てています。

そのため、skk 本来の動作には @kbd{x} を付けて、それぞれ @kbd{x@@} と、
@kbd{x[} で代用できるようにしてあります。

@item @kbd{l}
@itemx @kbd{xx}

AZIK では単独の拗音「ゃゅょぁぃぅぇぉゎ」を入力するには @kbd{l} を前置す
ることとされていますが、skk では既に @kbd{l} に「アスキーモードへの切り
替え」を割り当てています。

そのため @file{skk-azik.el} では、拗音のうち「ぁぃぅぇぉ」の入力について
は @kbd{xx} を前置することとしています。

@itemize @bullet
@item @kbd{xxa} @expansion{} ぁ
@item @kbd{xxi} @expansion{} ぃ
@item @kbd{xxu} @expansion{} ぅ
@item @kbd{xxe} @expansion{} ぇ
@item @kbd{xxo} @expansion{} ぉ
@end itemize

なお、拗音のうち「ゃゅょゎ」の単独入力は、AZIK 拡張 @file{skk-azik.el} で
はなく、標準 @file{skk-vars.el} です。
@itemize @bullet
@item @kbd{xya} @expansion{} ゃ
@item @kbd{xyu} @expansion{} ゅ
@item @kbd{xyo} @expansion{} ょ
@item @kbd{xwa} @expansion{} ゎ
@end itemize

@item @kbd{X}
@itemx 誤った登録の削除
skk では、▼モードでの @kbd{X} は 関数 @code{skk-purge-from-jisyo} を実行
しますが、AZIK では X は「シャ行」の入力に使われます。
そのため、@file{skk-azik.el} での「誤った登録の削除」は、
▼モードで @kbd{M-x skk-purge-from-jisyo} を実行してください。

関連項目: @w{@ref{誤った登録の削除}}

@end table

@defvr {ユーザ変数} skk-use-azik

この値が @code{non-nil} であれば AZIK 拡張が有効となります。
@file{~/.skk} に

@lisp
(setq skk-use-azik t)
@end lisp

@noindent
と書きます。

@end defvr

@defvr {ユーザ変数} skk-azik-keyboard-type

AZIK で使うときのキーボードのタイプを、シンボルで指定する。

@itemize @bullet
@item @code{'jp106} @expansion{} 日本語 106 キーボード (デフォルト)
@item @code{'jp-pc98} @expansion{} NEC PC-98 キーボード
@item @code{'us101} @expansion{} 英語キーボード
@item @code{nil} @expansion{} キーボード依存処理を無効にする

@end itemize
@end defvr

@node ACT
@section ACT
@cindex ACT

ACT は AZIK の考え方を Dvorak 配列に適用し、Dvorak 配列でかなを快適にタ
イプできるように考案された方式です。

@uref{http://www1.vecceed.ne.jp/~bemu/act/act_index.html, ACT (AZIK on Dvorak)}

@defvr {ユーザ変数} skk-use-act

この値が @code{non-nil} であれば ACT 拡張が有効となります。@file{~/.skk}
に

@lisp
(setq skk-use-act t)
@end lisp

@noindent
と書きます。
@end defvr

@node TUT-code
@section TUT-code
@cindex TUT-code

TUT-code は 2 ストローク系の日本語直接入力方式の一つです。

@url{http://plone.crew.sfc.keio.ac.jp/groups/tut-code}

使用するには、SKK のインストール時にいくつかのファイルをインストールする
必要があります。SKK ソースの @file{tut-code} ディレクトリにある
@file{skk-tutcdef.el} と @file{skk-tutcode.el} を、SKK ソースのトップディレクトリにコピーして、SKK のインストールを再度行います。

@xref{DDSKK のインストール}.

その後、@file{~/.skk} に

@lisp
(require 'skk-tutcdef)
@end lisp

@noindent
と書きます。

@node かな入力と親指シフト
@section かな入力と親指シフト
@cindex かな入力
@cindex 親指シフト
@cindex NICOLA

DDSKK はローマ字式ではない、いわゆるかな入力方式をサポートします。具体的
には

@itemize @bullet
@item 旧 JIS 配列でのかな入力
@item 親指シフト方式でのかな入力
@end itemize

@noindent
に対応しています。これを使うにはまず、nicola-ddskk 拡張パッケージをイン
ストールする必要があります。SKK ソースディレクトリの @file{nicola} ディ
レクトリに移動し、ドキュメントに従ってインストールしてください。

@url{https://github.com/skk-dev/ddskk/nicola/README.ja}

続いて設定をします。

@defvr {ユーザ変数} skk-use-kana-keyboard

この変数を @code{non-nil} に設定すると、かな入力サポートが SKK 起動時に有効に
なります。

@lisp
(setq skk-use-kana-keyboard t)
@end lisp

@end defvr

@defvr {ユーザ変数} skk-kanagaki-keyboard-type

この変数で、かな入力サポートの種類を切換えます。適切なシンボルを設定してください。

@table @samp
@item 106-jis

日本語 106 キーボード (旧 JIS 配列) でのかな入力に対応します。

@lisp
(setq skk-kanagaki-keyboard-type '106-jis)
@end lisp

@item nicola-jis

日本語 106 キーボード (旧 JIS 配列) での親指シフトエミュレーションに対応
します。

@lisp
(setq skk-kanagaki-keyboard-type 'nicola-jis)
@end lisp

@item nicola-us

@item nicola-dvorak

@item nicola-colemak

@item omelet-jis

@code{nicola-jis} と同様ですが、より入力しやすい配列が考慮されています。

@lisp
(setq skk-kanagaki-keyboard-type 'omelet-jis)
@end lisp

@item omelet-us

@item omelet-dvorak

@item omelet-colemak

@item oasys

@end table

@end defvr

かな入力方式使用時の■モードでは以下のコマンドなどが役に立ちます。

@table @kbd
@item F1 1
@kindex F1 1

かな入力方式での特殊キー定義の一覧を表示します。

@item F1 2
@kindex F1 2

かな入力方式でのかなキー配列を表示します。

@item F12
@itemx M-x skk-kanagaki-toggle-rom-kana
@kindex F12
@kindex M-x skk-kanagaki-toggle-rom-kana

かな入力方式とローマ字入力方式とを切り換えます。
@end table

なお、親指シフト方式については @uref{http://nicola.sunicom.co.jp/, NICOLA 日本語入力コンソーシアム} が参考になります。

@node そのほかの拡張機能
@chapter そのほかの拡張機能

十分にテストされていない等の理由がありますが、便利・有益と思われる拡張機
能を紹介します。

@menu
* 交ぜ書き変換::
* Google CGI API for Japanese Input を利用したかな漢字変換::
@end menu

@node 交ぜ書き変換
@section 交ぜ書き変換

@file{skk-mazegaki.el} をインストールすると、交ぜ書き変換が可能となります。

@itemize @bullet
@item き車 @expansion{} 汽車
@item き者 @expansion{} 記者
@item き社 @expansion{} 貴社
@end itemize

インストール方法などは、次の投稿を参考にしてください。

@url{http://mail.ring.gr.jp/skk/201111/msg00037.html}

@node Google CGI API for Japanese Input を利用したかな漢字変換
@section Google CGI API for Japanese Input を利用したかな漢字変換

@file{experimental/skk-search-web.el} をインストールすると、
Google CGI API for Japanese Input を利用したかな漢字変換（連文節変換）が
可能となります。

Google CGI API for Japanese Input については次の URL を参照してください。

@url{http://www.google.co.jp/ime/cgiapi.html}

@node SKKに関する情報
@chapter SKKに関する情報

@menu
* 最新情報::
* SKKメーリングリスト::
* SKK関連ソフトウェア::
* SKK辞書について::
* 辞書ツール::
* SKKの作者::
* SKKの歴史::
* このマニュアルについて::
* 謝辞::
@end menu

@node 最新情報
@section 最新情報

DDSKK についての最新情報は、

@display
@url{http://openlab.jp/skk/}
@end display

@noindent
から得ることができます。

SKK の開発は、 GitHub を利用して行われています。

@display
@url{https://github.com/skk-dev/ddskk}
@end display

最新版 DDSKK の変更内容と更に過去の変更点については以下のリソースを参照
してください。

@display
@url{https://github.com/skk-dev/ddskk/READMEs/NEWS.ja}
@end display

また、将来のバージョンにおける拡張アイディアについては、TODO としてまと
められています。

@display
@url{https://github.com/skk-dev/ddskk/READMEs/TODO.ja}
@end display

SKK Openlab では、開発者、文章の整備にご協力いただける方、テスター、よろ
ずものを言う人などなど、常に募集しています。また要望、拡張の具体的アイディ
アがあれば、メーリングリストに連絡いただけることを期待します。

@display
@xref{SKKメーリングリスト}.
@end display

@node SKKメーリングリスト
@section SKKメーリングリスト

SKK Openlab メーリングリストは、統一された一つの ML です。利用者用、開発
者用などと分かれていない他、SKK 辞書、DDSKK の開発議論が中心ですが、辞書
サーバやフロントエンド、 SKK 辞書ツールの話題なども議論の範囲に入ります。

@table @asis
@item メーリングリストに参加する

アドレス @email{skk-subscribe@@ring.gr.jp} 宛てに空のメールを送って下さい。
確認の為のメッセージが指定されたアドレス宛に送信されます。その確認の為の
メッセージに対して返信することで加入手続きは終了します。

@item メーリングリストから脱会する

アドレス @email{skk-unsubscribe@@ring.gr.jp} 宛てに空のメールを送って下さ
い。確認の為のメッセージが指定されたアドレス宛に送信されます。その確認の
為のメッセージに対して返信することで脱退手続きは終了します。

@item 登録したアドレスを変更する

古いアドレスについていったん unsubscribe して、新しいアドレスから再度
subscribe して下さい。

@item 記事の投稿

アドレス @email{skk@@ring.gr.jp} へ送ります。メーリングリストに登録されて
いる人全員にメールが配信されます。

@item 過去ログの閲覧

@url{http://mail.ring.gr.jp/skk}

@url{news://news.ring.gr.jp/ring.openlab.skk}
@end table

@node SKK関連ソフトウェア
@section SKK関連ソフトウェア

SKK 関連ソフトウェアに関しては、次の URL にリンクをまとめてありますの
で参照してください。

@uref{http://openlab.jp/skk/wiki/wiki.cgi?page=%A5%EA%A5%F3%A5%AF%BD%B8, SKK 辞書 Wiki におけるリンク集}

@node SKK辞書について
@section SKK辞書について

SKK 辞書は多くのユーザの方々から提供された辞書によりコピーフリーの辞書と
しては最大規模の辞書になっています。今後もこの方式により SKK 辞書をより
充実したものにしていきたいと思います。

@url{http://openlab.jp/skk/registdic.cgi} にて Web/cgi を利用
した登録・削除希望フォームを運用しています。
SKK 辞書に追加したい単語、誤登録として削除したい単語がありましたら、
是非ご利用下さい。

@node  辞書ツール
@section 辞書ツール

SKK 辞書に関するツールには、Perl, C, Ruby の各言語により書かれたツールがありますが、Perl によるツールは現在十分メンテナンスされていません。
現在は C, Ruby のツールが開発・メンテナンスされています。

@uref{http://openlab.jp/skk/wiki/wiki.cgi?page=%BC%AD%BD%F1%A5%E1%A5%F3%A5%C6%A5%CA%A5%F3%A5%B9%A5%C4%A1%BC%A5%EB, 辞書メンテナンスツール}

@node SKKの作者
@section SKKの作者

SKK の原作者は、現京都大学名誉教授の
@uref{http://www.sato.kuis.kyoto-u.ac.jp/~masahiko/masahiko-j.html,
佐藤雅彦氏}です。

現在の DDSKK は、大勢のボランティアの貢献により成立しています。以下は確
認されている貢献者名です。ここに入っていない貢献者がおられる場合、email
address が変更になり credit をこれに合わせたい場合には、追加、修正いたし
ますので、ご遠慮なく @email{skk-owner@@ring.gr.jp, SKK Openlab の管理人} ま
でご一報ください。

@itemize @minus
@item @email{hisashi@@rst.fujixerox.co.jp, 中津山 恒}
@item @email{kose@@emailizard.tamra.co.jp, 小関 吉則}
@item @email{takao@@hirata.nuee.nagoya-u.ac.jp, 小野 孝男}
@item @email{mat@@nuis.ac.jp, 松井孝雄/MATUI Takao}
@item @email{shindo@@super.ees.saitama-u.ac.jp, 進藤裕志}
@item @email{jshen@@cas.org, 沈志勇}
@item @email{ma-tsuge@@kdd.co.jp, 柘植 正大}
@item @email{amotoki@@dd.iij4u.or.jp, Akihiro Motoki}
@item @email{unbound@@papaya.juice.or.jp, Chikanobu Toyofuku}
@item @email{ueno@@unixuser.org, Daiki Ueno}
@item @email{eguchi@@kyoto-wu.ac.jp, EGUCHI Satoshi}
@item @email{obata@@suzuki.kuee.kyoto-u.ac.jp, Eiji Obata}
@item @email{fukano-m@@alp.cs.uec.ac.jp, FUKANO Masaaki}
@item @email{SFUKAYA@@oracle.co.jp, Fukaya Shigeru}
@item @email{machida@@users.sourceforge.jp, Fumihiko MACHIDA}
@item @email{furue@@kke.co.jp, FURUE Hideyuki}
@item @email{gunji@@sils.shoin.ac.jp, GUNJI Takao}
@item @email{grothendieck@@max.hi-ho.ne.jp, G. Yoshida}
@item @email{mizu@@cs3.cs.oki.co.jp, Haru Mizuno}
@item @email{hal@@sics.se, Haru'yasu Ueda}
@item @email{sakurada@@kuis.kyoto-u.ac.jp, Hideki Sakurada}
@item @email{lapis-lazuli@@pop06.odn.ne.jp, Hiroya Murata}
@item @email{noir@@st.rim.or.jp, Hiroyuki KUROSAKI }
@item @email{kuroda@@msi.co.jp, Hisao Kuroda}
@item @email{iida@@ring.gr.jp, IIDA Yosiaki}
@item @email{irie@@t.email.ne.jp, IRIE Tetsuya}
@item @email{ml@@be.to, ISHIKAWA Naoya}
@item @email{nakamura@@pluto.ai.kyutech.ac.jp, Jun-ichi Nakamura}
@item @email{tomioka@@culle.l.chiba-u.ac.jp, Katuya Tomioka}
@item @email{hirokawa@@rics.co.jp, Kazuo Hirokawa}
@item @email{kazushi@@kubota.co.jp, Kazushi Marukawa}
@item @email{kxn30@@po.cwru.edu, Keisuke Nishida}
@item @email{okada@@opaopa.org, Kenichi OKADA}
@item @email{kenji@@reseau.toyonaka.osaka.jp, Kenji Rikitake}
@item @email{kenji@@cs.titech.ac.jp, Kenji Yamashita}
@item @email{fukuchi@@users.sourceforge.net, Kentaro Fukuchi}
@item @email{deton@@m1.interq.or.jp, KIHARA Hideto}
@item @email{kimura@@oa1.kb.nec.co.jp, Kimura Chikahiro}
@item @email{fuyuki@@hadaly.org, Kimura Fuyuki}
@item @email{tsuyoshi.kitamoto@@gmail.com, Kitamoto Tsuyoshi}
@item @email{kmori@@onsei2.rilp.m.u-tokyo.ac.jp, Koichi MORI}
@item @email{hide@@koie.org, KOIE Hidetaka (鯉江英隆)}
@item @email{uchida@@cfd.tytlabs.co.jp, Koji Uchida}
@item @email{kenichi_kurihara@@nifty.com, KURIHARA Kenichi}
@item @email{matusita@@ics.es.osaka-u.ac.jp, Makoto MATSUSHITA}
@item @email{kaw@@lp.nm.fujitsu.co.jp, Manabu Kawashima}
@item @email{martin@@xemacs.org, Martin Buchholz}
@item @email{suzmasa@@sm.sony.co.jp, Masahiko Suzuki}
@item @email{xdote@@rp.open.cs.fujitsu.co.jp, Masahiro Doteguchi}
@item @email{masaka-t@@ascii.co.jp, Masakazu Takahashi}
@item @email{masata-y@@is.aist-nara.ac.jp, Masatake YAMATO}
@item @email{minakaji@@osaka.email.ne.jp, NAKAJIMA Mikio}
@item @email{minoura@@uni.zool.s.u-tokyo.ac.jp, MINOURA Itsushi}
@item @email{clefs@@mail.goo.ne.jp, MITA Yuusuke}
@item @email{minkov@@fuzzy.or.jp, MIYOSHI Tsutomu}
@item @email{mouri@@jaist.ac.jp, Motohiko Mouri}
@item @email{mrt@@notwork.org, Murata Shuuichirou}
@item @email{nao@@mimo.jaist-east.ac.jp, Naoki HAMADA}
@item @email{naoki-w@@ht-net21.ne.jp, Naoki Wakamatsu}
@item @email{tnemoto@@mvi.biglobe.ne.jp, NEMOTO Takashi}
@item @email{knishida@@nn.iij4u.or.jp, NISHIDA Keisuke}
@item @email{nmaeda@@dd.iij4u.or.jp, Norio Maeda }
@item @email{onoto@@ma.nma.ne.jp, ONODA Arata }
@item @email{furukawa@@tcp-ip.or.jp, Rei FURUKAWA}
@item @email{gnu@@ipri.go.jp, Ryoichi Hashimoto}
@item @email{ksakai@@kso.netwk.ntt-at.co.jp, SAKAI Kiyotaka}
@item @email{satoshi@@sys.sdl.melco.co.jp, Satoshi Harauchi}
@item @email{sn@@asahi-net.email.ne.jp, Seiichi NAMBA}
@item @email{sekita@@mri.co.jp, Sekita Daigo}
@item @email{shigeru@@okunet.gr.jp, Shigeru OKUMURA}
@item @email{shuhei@@aqua.ocn.ne.jp, Shuhei KOBAYASHI}
@item @email{ashizawa@@zuken.co.jp, Shuji Ashizawa}
@item @email{simo@@festa.or.jp, SIMOYAMA Takasi}
@item @email{steve@@altair.xemacs.org, SL Baur}
@item @email{sphere@@pop12.odn.ne.jp, sphere}
@item @email{turnbull@@sk.tsukuba.ac.jp, Stephen Turnbull}
@item @email{sigh@@kuzirabekon.econ.nagasaki-u.ac.jp, SUZUKI Hitoshi}
@item @email{kaoru@@kaisei.org, TAKAHASHI Kaoru}
@item @email{kawamura@@ike.tottori-u.ac.jp, Takao KAWAMURA}
@item @email{ohtani@@iias.flab.fujitsu.co.jp, Takeshi OHTANI}
@item @email{tats@@vega.ocn.ne.jp, Tatsuya Kinoshita}
@item @email{teika@@lavabit.com, Teika Kazura }
@item @email{Thierry.Emery@@nmu.alcatel.fr, Thierry Emery}
@item @email{tokuya@@crab.fuji-ric.co.jp, TOKUYA Junichi}
@item @email{cooper@@saitama.fujimic.fujisankei-g.co.jp, Tomotaka SUWA}
@item @email{hiro@@momo.it.okayama-u.ac.jp, Tomoyuki Hiro}
@item @email{toru@@maid.ne.jp, Toru YANO}
@item @email{toyono-y@@is.aist-nara.ac.jp, Toyonobu Yoshida}
@item @email{enami@@ptgd.sony.co.jp, Tsugutomo Enami}
@item @email{czkmt@@remus.dti.ne.jp, Tsukamoto Tetsuo}
@item @email{tsumura@@kuis.kyoto-u.ac.jp, TSUMURA Tomoaki}
@item @email{akiho@@sky.email.ne.jp, Tsuyoshi AKIHO}
@item @email{matsui@@atr-rd.atr.co.jp, Wataru Matsui}
@item @email{matsui@@gf.hm.rd.sanyo.co.jp, Wataru Matsui}
@item @email{ynyaaa@@ybb.ne.jp, YAGI Tatsuya}
@item @email{ysjj@@unixuser.org, YAMASHITA Junji}
@item @email{yano@@moon.email.ne.jp, Yano Keisuke}
@item @email{toyono-y@@is.aist-nara.ac.jp, Yoshida Toyonobu}
@item @email{ynakai@@redhat.com, Yukihiro Nakai}
@item @email{yoshiki@@xemacs.org, Yoshiki Hayashi}
@item @email{manbou@@ceres.dti.ne.jp, YOSHIZAWA Masahiro}
@item @email{yutopia@@y6.dion.ne.jp, Yuh Ohmura}
@item @email{yu-ji@@hoso.net, Yu-ji Hosokawa}
@item @email{kameyama@@kuis.kyoto-u.ac.jp, Yukiyoshi Kameyama}
@item @email{yusuke@@example.com, Yusuke Shinyama}
@item @email{kiyoka@@sumibi.org, Kiyoka Nishiyama.}
@item @email{aaa707b@@gmail.com, Yuichi Higashi}
@item @email{takenari.shinohara@@gmail.com, Takenari Shinohara}
@item @email{yasushi.abe@@gmail.com, Yasushi Abe}
@item @email{yuhei.maeda@@gmail.com, Yuhei Maeda}
@c @item @email{}
@end itemize

@node SKKの歴史
@section SKKの歴史

SKK の成り立ちと歴史に関しては以下の URL を参照してください。

@uref{http://openlab.jp/skk/born-ja.html, SKK の誕生秘話}

@uref{http://openlab.jp/skk/SKK.html, ``SKK = I''}

@uref{http://openlab.jp/skk/history-ja.html, SKK の歴史 (付 Emacs の歴史の一部)}

@uref{http://mail.ring.gr.jp/skk/201212/msg00007.html, SKK の 25年}

@node このマニュアルについて
@section このマニュアルについて

本マニュアルは、SKK オープンラボの有志の貢献により、従来のマニュアルに加
筆修正したものです。

@node 謝辞
@section 謝辞

DDSKK の開発は、@uref{http://openlab.jp, Ring Server Open
Laboratory} (オープンラボラトリ) に @samp{SKK Openlab} として参加する形
で行われています。@samp{SKK Openlab} は Ring から共有ディスク、CVS 及び
ML の提供を受けています。オープンラボラトリの運営は、完全にボランティア
により行われております。Ring 並びにオープンラボラトリにかかわる皆さんに
深く感謝いたします。

(以降の記載は、SKK の原作者、佐藤雅彦教授により記載された旧来のマニュア
ルのものですが、歴史的意義を踏まえて、そのまま掲載します。)

SKK の設計方針は TAO/ELIS 上の日本語入力システム Kanzen の影響を受けてい
ます。Kanzen のデモを行ってくださり、また Kanzen を使う機会を与えてくだ
さった NTT の竹内郁雄さんに感謝します。

第 1 版の辞書作成のための読みの入力を行ってくださった東北大学電気通信研
究所佐藤研究室の 安藤大君、猪岡美紀さん、奥川淳一君、佐々木昭彦君、佐藤
克志君、山岸信寛君に感謝します。

SKK 辞書第 2, 3, 4, 5, 6, 7, 8 版作成のためのデータを提供してくださっ
た方々に感謝します。

SKK 辞書第 6, 7 版作成にあたり協力してくださった高橋裕信氏に感謝します。

@node よくある質問とその回答(FAQ)
@chapter よくある質問とその回答(FAQ)

これは SKK に対するよくある質問と、それに対する回答集です。

@menu
* Introduction::                SKK のなぜなに。
* Installation::                SKK の入手から導入まで。
* Customization::               SKK の基本設定からお好みのカスタマイズまで。
* Dictionaries::                SKK 辞書関連。
* Miscellaneous::               SKK の活用法その他。
@end menu

@node Introduction
@section SKK のなぜなに

@menu
* Q1-1 Daredevil SKK って SKK とは違うのですか?::
* Q1-2 SKK はシンプルなのが長所だったのでは?::
* Q1-3 DDSKK はどの Emacs で使えますか?::
* Q1-4 DDSKK はどんなオペレーティングシステムで使えますか?::
* Q1-5 APEL って何? 必要ですか?::
@end menu

@node Q1-1 Daredevil SKK って SKK とは違うのですか?
@unnumberedsubsec Q1-1 Daredevil SKK って SKK とは違うのですか?

SKK Openlab で開発、リリースされる SKK は、京大の佐藤先生が中心になっ
て開発していた SKK と区別するために、@samp{Daredevil SKK} と呼ぶことに
しました。その略称は @samp{DDSKK} で、SKK Openlab で最初に
@samp{Daredevil SKK} としてリリースされた version は 11.1 です (オリジ
ナルの version を継承しました)。

なお、@samp{Daredevil} の名前の採択は、開発陣の一人が講読している某ラ
ジオ英会話講座の、ある日のスキット名が「Daredevil なんとか」で、その内
容は「とにかくやってみよう。うぎゃぁぁぁ、やられたぁ」というものでした。
これがあまりに自分の開発ポリシーに合致していた、ということに由来します。

@node Q1-2 SKK はシンプルなのが長所だったのでは?
@unnumberedsubsec Q1-2 SKK はシンプルなのが長所だったのでは?

かような議論は 10 年来行われてきており、結論は出ていませんが、事実として
現在まで開発が続けられています。

@display
「シンプルな操作性の維持と多機能化・高機能化は両立できる」
@end display

@noindent
というのが現在の開発陣の考えであるようです。

SKK が Simple Kana to Kanji conversion program の略であるとおり、かなを漢
字に変換するルーチンの簡単さが SKK を定義付けています。その周辺の拡張に
関する制約は基本的にはありません。

多機能化と言っても多くはユーザオプションによって無効にすることができま
すし、@file{skk.el} 本体が複雑化しないようにモジュール化されています。

@node Q1-3 DDSKK はどの Emacs で使えますか?
@unnumberedsubsec Q1-3 DDSKK はどの Emacs で使えますか?

基本的には、GNU Emacs と Mule 機能付きの XEmacs で使えます。

対応する Emacs のバージョンについては以下をご覧ください。

@display
@xref{このバージョンのSKKについて}.
@end display

@node Q1-4 DDSKK はどんなオペレーティングシステムで使えますか?
@unnumberedsubsec Q1-4 DDSKK はどんなオペレーティングシステムで使えますか?

SKK がサポートしている Emacs がその OS で動いているなら、SKK の基本的
な機能は動くはずです。 Microsoft Windows でも Apple OS X でも使えます。

拡張機能については、UNIX の各種コマンドを前提としているものがいくつか
あります (@command{look} や @command{ispell} など)。これらのコマンドがお使いの OS にも
存在すれば該当の拡張機能も基本的には使えるでしょう。

Apple OS X 版 Emacs に特化した情報については、以下のファイルを参照してください。
@display
@url{https://github.com/skk-dev/ddskk/READMEs/README.MacOSX.ja}
@end display

@node Q1-5 APEL って何? 必要ですか?
@unnumberedsubsec Q1-5 APEL って何? 必要ですか?

APEL は A Portable Emacs Library の略です。APEL の主な機能は異なる Emacs
間の非互換性を吸収することです。

XEmacs では APEL が必要です。

GNU Emacs 22 以上では APEL は不要となりました。この変更は 2010 年 9 月に CVS に commit され、2011 年 1 月に DDSKK 14.2 としてリリースされました。

@node Installation
@section SKK の入手から導入まで

@menu
* Q2-1 SKK を使うのに何が必要ですか?::
* Q2-2 SKK 辞書はどこにありますか?::
* Q2-3 SKK サーバはどこにありますか?::
@end menu

@node Q2-1 SKK を使うのに何が必要ですか?
@unnumberedsubsec Q2-1 SKK を使うのに何が必要ですか?

SKK 本体と SKK 辞書が必要です。オプションで辞書サーバを用意す
ることができます。
XEmacs では事前に APEL をインストールしてください。

@display
@xref{APEL のインストール}.
@end display

SKK 本体は以下から入手できます。

@display
@url{http://openlab.jp/skk/maintrunk}
@end display

@node Q2-2 SKK 辞書はどこにありますか?
@unnumberedsubsec Q2-2 SKK 辞書はどこにありますか?

以下を参照してください。

@display
@xref{SKK辞書について}.
@end display

@node Q2-3 SKK サーバはどこにありますか?
@unnumberedsubsec Q2-3 SKK サーバはどこにありますか?

DDSKK は辞書サーバの種類、バージョンには依存していません。

@display
@url{http://openlab.jp/skk/skkserv-ja.html}
@end display

@noindent
からお好きな辞書サーバを入手して下さい。

@node Customization
@section SKK の基本設定からお好みのカスタマイズまで

@menu
* Q3-1 「．」、「，」 が入力できるようにカスタマイズしたいのですが。::
* Q3-2 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。::
* Q3-3 検索する辞書を増やしたいのですが。::
* Q3-4 左手の小指を SHIFT で酷使したくありません。::
* Q3-5 全く漢字が出てきません。::
* Q3-6 チュートリアルが起動できません。::
* Q3-7 C-x C-j で dired が起動してしまいます。::
@end menu

@node Q3-1 「．」、「，」 が入力できるようにカスタマイズしたいのですが。
@unnumberedsubsec Q3-1 「．」、「，」 が入力できるようにカスタマイズしたいのですが。

3通りの方法を紹介します。

@enumerate
@item
通常 @samp{.} で「．」、@samp{,} で「，」を入力したい場合

@file{~/.skk} に以下を設定します。

@lisp
(setq skk-kutouten-type 'en)
@end lisp

@item
一時的に @samp{.} で「．」、@samp{,} で「，」を入力したい場合

@kbd{M-x skk-toggle-kutouten} を実行すると、その場で「，」「．」に切り替える
ことができます。「、」「。」に戻すには、もう一度
@kbd{M-x skk-toggle-kutouten} を実行を実行します。
特定のバッファでのみ「，」「．」に切り替えたい場合は、 File Variables
(@pxref{File Variables, , File Variables, emacs, GNU Emacs Manual})
を参照下さい。
例えば、 tex モードでのみ「，」「．」に切り替えたい場合は、つぎの設定を
tex ファイルの最後に追加します。

@example
% Local Variables:
% skk-kutouten-type: en
% end:
@end example

@item
常に @samp{.} で「．」、@samp{,} で「，」を入力したい場合

@code{skk-rom-kana-rule-list} を直接変更します。
なお、この設定をすると、@kbd{M-x skk-toggle-kutouten} での切り替えが
効かなくなるので、注意して下さい。

@file{~/.skk} に以下を追加します。

@lisp
@group
(setq skk-rom-kana-rule-list
      (append '(("." nil "．") ("," nil "，"))
              skk-rom-kana-rule-list))
@end group
@end lisp

この設定方法は応用が効き、細かく制御することが可能です。
@samp{．} と @samp{，} のところをそれぞれ、@samp{.} と @samp{,} とすることで、
「かなモード」「カナモード」でも、@samp{.} と@samp{,} を直接入力することが
できます。
@end enumerate

@node Q3-2 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。
@unnumberedsubsec Q3-2 「ゐ」や「ヰ」 が入力できるようにカスタマイズしたいのですが。

一つ前の Q の変形問題ですね。かな/カナモードでそれぞれ出力する文字
を変えるやり方です。

@file{~/.skk} に

@lisp
@group
(setq skk-rom-kana-rule-list
      (append '(("wi" nil ("ヰ" . "ゐ")))
              skk-rom-kana-rule-list))
@end group
@end lisp

@noindent
と書いてみましょう。

一番内側の cons cell は car がカナモード、cdr がかなモー
ドでの入力文字を表しています。

一つ前の Q に対する答えのように、カナモード、かなモードともに入力す
る文字が変わらなければ、cons cell の代りに文字列を書くことができます。

@node Q3-3 検索する辞書を増やしたいのですが。
@unnumberedsubsec Q3-3 検索する辞書を増やしたいのですが。

@code{skk-search-prog-list} で設定をしましょう。
@vindex skk-search-prog-list

まず、現在の設定を確認しましょうね。*scratch* バッファに
@code{skk-search-prog-list} と書いてそのシンボルの末尾にポイントを置いて
@kbd{C-j} してみましょう。例えば次のように出力されます。

@lisp
@group
((skk-search-jisyo-file skk-jisyo 0 t)
 (skk-search-server skk-aux-large-jisyo 10000))
@end group
@end lisp

上記の例は 2 つの要素を持ったリストになっています。設定によりもっと多
くの要素があるかもしれません。

各要素は検索する関数と辞書を指定したリストです。要素の順番に検索がなさ
れます。上記の例だとまず最初に @code{skk-jisyo} (個人辞書) を
@code{skk-search-jisyo} という関数を使ってリニアサーチ、次に
@code{skk-search-server} という関数を使って @code{skk-aux-large-jisyo}
をサーチします。

変換の際、@key{SPC} を押しますよね?  1 回 @key{SPC} を押すと、SKK は候
補が見つかるまでの間、@code{skk-search-prog-list} の要素を前から読んでいっ
て検索を行い、見つかればそこでいったん検索を止めてユーザに候補を提示します。

ユーザが @key{SPC} を更に押してゆき最初の要素のプログラムが見つけた候補が尽
きると、SKK は中断していた個所から再び @code{skk-search-prog-list} の次
の要素を見つけ、ここで指定されている関数を使って検索する、で新しい候補が
見つかればまた提示する、というシステムになっています。

では、辞書サーバを使って検索した後に、JIS 第 2 水準の単漢字辞書、
@file{SKK-JISYO.JIS2} を検索したい場合はどうすれば良いでしょう?  もう分
かりますよね?  辞書サーバを使った検索式の次に第 2 水準辞書の検索式を書いた
リストを @code{skk-search-prog-list} に指定すれば良いのです。
@file{~/.skk} に次のように書きましょう。

@lisp
@group
(setq skk-search-prog-list
      '((skk-search-jisyo-file skk-jisyo 0 t)
        (skk-search-server skk-aux-large-jisyo 10000)
        (skk-search-jisyo-file "~/dic/SKK-JISYO.JIS2" 0)))
@end group
@end lisp

@code{skk-search-jisyo-file} の第 2 引数、0 の数字はリニアサーチにて検索
するよう指定しています。第 2 水準辞書はあまり大きくないので、リニアサー
チで十分でしょう。大きな辞書を検索する場合などは、

@lisp
(skk-search-jisyo-file "~/dic/SKK-JISYO.L" 10000)
@end lisp

@noindent
のようにすると良いでしょう。SKK は Emacs のバッファに読み込まれた
@file{~/dic/SKK-JISYO.L} の検索リージョンのポイント差が 10,000 未満にな
るまではバイナリサーチを行い、その後リニアサーチを行います。大きな辞
書ではバイナリサーチを行う方がはるかに効率が良いです。嘘だと思うなら、
@file{SKK-JISYO.L} を読み込んでリニアサーチするような設定にして試してみ
て下さい。

ちなみに、@file{SKK-JISYO.JIS2} は、最大でもリージョン間のポイント差が
8,500 程度です。

@node Q3-4 左手の小指を SHIFT で酷使したくありません。
@unnumberedsubsec Q3-4 左手の小指を SHIFT で酷使したくありません。

SKK を標準の状態で使っている場合、変換のためにシフトキーを多用しますの
で小指への負担が大きくなります。
@footnote{このため、ある人々は SKK を小指キラーと呼びます。}

この苦しみを回避するためにここでは 4 つの方法を紹介します。

@enumerate
@item
親指の近くにあるキーを利用してシフトキーの代用とする。

日本語 106 キーボードのように無変換、変換などのキーがある場合は、これ
らをシフトキーの代用とすることが可能です。こうすると、例えば

@display
@key{SHIFT} を押しながら @kbd{a} を押す
@end display

@noindent
というキー操作は

@display
@key{無変換} を押して、その後で @kbd{a} を押す
@end display

@noindent
という操作で置き換えることができるようになります。

それでは具体的なやり方を説明しましょう。まず、使用中の Emacs が無変換
キーを何という名前で認識しているか調べます。それには

@example
@kbd{M-x describe-key}
@end example

@noindent
というコマンドを実行し、続いて 無変換キーを押してみます。XFree86 上で
なら、おそらく

@example
muhenkan is undefined
@end example

@noindent
という答えが返ってくるでしょう。次に、この名前を使って @file{~/.emacs.d/init.el}
に設定を書きこみます。以下は @key{無変換} = @key{muhenkan} の場合の例で
す。

@lisp
@group
(unless (keymapp key-translation-map)
  (setq key-translation-map (make-sparse-keymap)))

(let ((i ?a))
  (while (<= i ?z)
    (define-key key-translation-map
                (vector 'muhenkan i) (vector (- i 32)))
    (setq i (1+ i))))
@end group
@end lisp
@vindex key-translation-map

この設定を終えると、@kbd{@key{muhenkan}-a} で @kbd{A} が入力できるように
なります。続いて SKK を起動してみましょう。@kbd{@key{muhenkan}-a} で
@samp{▽あ} となります。送りの開始点も、もちろん同様の操作で指定できます。
@footnote{変数 @code{key-translation-map} の意味を調べてみてください。

@kbd{M-x describe-variable} @key{RET} key-translation-map}

@item
xmodmap を使う。

X Window System 上では、@command{xmodmap} というプログラムを使ってキー配列を変更で
きます。例えば、無変換キーをシフトキーとして使いたければ
@cindex xmodmap

@example
% xmodmap -e 'add Shift = Muhenkan'
@end example

@noindent
とします。これで無変換キーは通常のシフトキーと同じような感じで使えるよ
うになります。

@item
@file{skk-sticky.el} を使う。

@w{@xref{変換位置の指定方法}.}

@item
親指シフト入力のエミュレーション機能を利用する。
@cindex 親指シフト入力

これは 1, 2 とはかなり違ったアプローチです。SKK 本来のローマ字的入力を捨
てて、富士通のワープロ OASYS のような親指シフト入力を修得します。
@footnote{親指シフト入力の詳細については、ここでは述べません。興味がある
場合は、日本語入力コンソーシアムの Web サイト

@display
@url{http://nicola.sunicom.co.jp/}
@end display

@noindent
を訪れてください。}
@cindex OASYS
@cindex NICOLA
@cindex 日本語入力コンソーシアム

DDSKK には NICOLA-DDSKK というプログラムが付属しており、これをインストー
ルすると親指シフト入力が可能になります。インストール自体は簡単で、

@example
% cd nicola
% make install
@end example

@noindent
とした後に、@file{~/.skk} に

@lisp
@group
(setq skk-use-kana-keyboard t)
(setq skk-kanagaki-keyboard-type 'omelet-jis)
@end group
@end lisp

@noindent
と書くだけです。詳しいことは、NICOLA-DDSKK 付属のドキュメントを参照し
てください。

NICOLA 配列は、特別に日本語入力のために考えられた配列なので、慣れれば
非常に効率的な日本語入力ができるようになると期待されます。一方で、ロー
マ字的入力方式に慣れてしまっている人にとっては、NICOLA 配列に慣れるま
でかなり練習を要することは確かです。
@end enumerate

@node Q3-5 全く漢字が出てきません。
@unnumberedsubsec Q3-5 全く漢字が出てきません。

恐らく辞書の設定ができていないのでしょう。

@file{SKK-JISYO.L} というファイルがインストールされている場所を確認して
ください。普通は

@display
@file{/usr/local/share/skk}
@file{/usr/share/skk}
@end display

@noindent
といった場所にインストールされています。XEmacs のパッケージならば

@display
@file{/usr/local/lib/xemacs/mule-packages/etc/skk}
@end display

@noindent
などを確認します。その後で @file{~/.skk} に

@lisp
(setq skk-large-jisyo "/usr/local/share/skk/SKK-JISYO.L")
@end lisp

@noindent
のように設定します。

なお、辞書サーバを使っている場合はこの設定は必要ありません。その場合は、
辞書サーバの設定や、それがちゃんと起動しているかどうかを確認してくださ
い。

また、どこにも辞書がインストールされていない場合は

@display
@url{http://openlab.jp/skk/dic/}
@end display

@noindent
から取得します。

@node Q3-6 チュートリアルが起動できません。
@unnumberedsubsec Q3-6 チュートリアルが起動できません。
@cindex チュートリアル

@file{SKK.tut} というファイルがインストールされている場所を確認してくだ
さい。普通は

@display
@file{/usr/local/share/skk}
@file{/usr/share/skk}
@end display

@noindent
といった場所にインストールされています。XEmacs のパッケージならば
@cindex パッケージ

@display
@file{/usr/local/lib/xemacs/mule-packages/etc/skk}
@end display

@noindent
などを確認します。その後で @file{~/.emacs.d/init.el} に

@lisp
(setq skk-tut-file "/usr/local/share/skk/SKK.tut")
@end lisp
@vindex skk-tut-file

@noindent
のように設定します。

@node Q3-7 C-x C-j で dired が起動してしまいます。
@unnumberedsubsec Q3-7 C-x C-j で dired が起動してしまいます。

@code{dired-x} を読み込むと @kbd{C-x C-j} が @code{dired-jump} にバインドされます。
この状態でも SKK を @kbd{C-x C-j} で起動したいときは、変数 @code{dired-bind-jump} に
@code{nil} を設定します。

@lisp
(setq dired-bind-jump nil)
@end lisp

なお、この設定は @code{dired-x} を読み込む前である必要があります。

@node Dictionaries
@section SKK 辞書関連

@menu
* Q4-1 SKK には郵便番号辞書がありますか?::
* Q4-2 SKK の辞書には、品詞情報がないんですね。::
* Q4-3 複数の SKK 辞書を結合できますか?::
* Q4-4 SKK 形式の英和辞書があると聞いたのですが。::
@end menu

@node Q4-1 SKK には郵便番号辞書がありますか?
@unnumberedsubsec Q4-1 SKK には郵便番号辞書がありますか?

CVS から辞書を取得した場合は、@file{zipcode} というディレクトリに入って
います。WWW では、

@display
@url{http://openlab.jp/skk/dic/}
@end display

@noindent
より入手できます。使用方法は

@display
@url{http://openlab.jp/skk/skk/dic/zipcode/README.ja}
@end display

@noindent
を御覧下さい。

@node Q4-2 SKK の辞書には、品詞情報がないんですね。
@unnumberedsubsec Q4-2 SKK の辞書には、品詞情報がないんですね。
@cindex 品詞情報

SKK は漢字とかなとの区切りをユーザが指定する方式により、品詞情報を使っ
た解析を用いることなく効率的入力ができます。

TODO としては、辞書に品詞情報を持たせることで更なる入力の効率化ができ
るという提案がなされており、そのような辞書の作成が既に試みられています。
興味のある方は

@display
@url{http://openlab.jp/skk/wiki/wiki.cgi?page=SKK%BC%AD%BD%F1}
@end display

における @file{SKK-JISYO.notes} の項目をご覧ください。

@node Q4-3 複数の SKK 辞書を結合できますか?
@unnumberedsubsec Q4-3 複数の SKK 辞書を結合できますか?
@cindex 辞書のマージ

SKK 本体のパッケージには同封されていませんが、skk-tools という別パッケー
ジがあります。以下をご覧ください。

@display
@xref{辞書ツール}.
@end display

@node Q4-4 SKK 形式の英和辞書があると聞いたのですが。
@unnumberedsubsec Q4-4 SKK 形式の英和辞書があると聞いたのですが。
@cindex @file{edict2skk.awk}
@cindex @code{skkdic-expr}
@cindex @code{skkdic-sort}
@cindex edict
@cindex 英和辞書

edict は和英辞書ですが、これを SKK 辞書形式の英和辞書に変換したものを

@display
@url{http://openlab.jp/skk/dic/SKK-JISYO.edict}
@end display

@noindent
として置いています。これは edict を単純に機械的に変換した後、バグの修正
や、エントリ・候補の追加が SKK Openlab で独自に行われているものです。

edict を自分で加工して上記と同等のものを作成することもできます。edict は

@display
@url{ftp://ftp.u-aizu.ac.jp:/pub/SciEng/nihongo/ftp.cc.monash.edu.au/}
@end display

@noindent
などから入手できます。

加工には日本語の通る @command{gawk} と skk-tools の中のプログラムを使い、下
記のように行います。

@example
% jgawk -f edict2skk.awk edict > temp
% skkdic-expr temp | skkdic-sort > SKK-JISYO.E2J
% rm temp
@end example

できた @file{SKK-JISYO.E2J} の利用方法は色々ありますが、

@example
% skkdic-expr SKK-JISYO.E2J + /usr/local/share/skk/SKK-JISYO.L | \
  skkdic-sort > SKK-JISYO.L
@end example

@noindent
などとして、@file{SKK-JISYO.L} とマージして使うのが手軽です。

なお、edict の配布条件は GNU GPL (General Public License) ではありません。

@display
@url{http://www.csse.monash.edu.au/groups/edrdg/newlic.html}
@end display

@noindent
をご覧下さい。@file{SKK-JISYO.edict} のヘッダー部分にもそのダイジェスト
が記載されています。

@node Miscellaneous
@section SKK の活用法その他

@menu
* Q5-1 SKK abbrev モードでもっと英単語を利用した変換ができませんか?::
* Q5-2 市販の CD-ROM 辞書やネットワークの辞書サーバが利用できますか?::
* Q5-3 他の FEP を使用中にも SHIFT を押してしまいます。::
@end menu

@node Q5-1 SKK abbrev モードでもっと英単語を利用した変換ができませんか?
@unnumberedsubsec Q5-1 SKK abbrev モードでもっと英単語を利用した変換ができませんか?
@cindex @code{look}
@cindex @file{skk-look.el}
@cindex edict
@cindex 英単語の検索
@cindex 和英変換
@kindex ,
@kindex .
@vindex skk-look-expanded-word-only
@vindex skk-look-recursive-search
@vindex skk-look-use-ispell
@vindex skk-use-look

UNIX @command{look} コマンドと @file{skk-look.el} を利用すると、色々できま
すよ。まず、 @file{~/.skk} で @code{skk-use-look} を @code{t} にセットして Emacs/SKK を立ち上げ直して下さい。

さぁ、下記のような芸当が可能になりました。

@enumerate
@item
英単語の補完ができます。

@example
  ▽abstr(@key{TAB}) @expansion{} ▽abstract
@end example

通常の補完機能と同様に @kbd{.} で次の補完候補に、@kbd{,} でひとつ前の補完候補
に移動できます。SKK 形式の英和辞書があれば、ここから @key{SPC} を押して
英和変換ができますね。また、@code{skk-look-use-ispell} の値が
@code{non-nil} であれば、@command{look} で検索する前に @command{ispell} でス
ペルチェック・修正をします。

@item
英単語をあいまいに変換して取り出すことができます。上記同様、
@code{skk-look-use-ispell} の値が @code{non-nil} であれば、@command{look}
で検索する前に @command{ispell} でスペルチェック・修正をします。

@example
  ▽abstr* (@key{SPC}) @expansion{} ▼abstract
@end example

見出し語に @samp{*} を入れるのをお忘れなく。

@item
あいまいに変換した後、更に再帰的な英和変換を行うことができます。

まず、@code{skk-look-recursive-search} の値を @code{non-nil} にセット
して下さい。Emacs/SKK を再起動する必要はありません。すると、例えば、

@example
  ▽abstr* (@key{SPC})
       @expansion{} ▼abstract (@key{SPC})
       @expansion{} ▼アブストラクト (@key{SPC})
       @expansion{} ▼抽象 (@key{SPC})
       @expansion{} ▼abstraction (@key{SPC})
       @expansion{} ▼アブストラクション
@end example

このように英単語 + その英単語を見出し語にした候補の「セット」を変換結果
として出力することができます。

この際、@code{skk-look-expanded-word-only} の値が @code{non-nil} であ
れば、再帰検索に成功した英単語の「セット」だけを出力することができます
(再帰検索で検出されなかった英単語は無視して出力しません) 。

もちろん、SKK 辞書に

@example
  abstract /アブストラクト/抽象/
  abstraction /アブストラクション/
@end example

@noindent
というエントリがあることを前提としています。edict を SKK 辞書形式に変換
すると良いですね。
@end enumerate

なお、@file{skk-look.el} を使った補完・変換が期待するスピードよりも遅
い、補完・変換で余分な候補が出る、とお感じの貴方は、
@code{skk-look-use-ispell} の値を @code{nil} にして @command{ispell} によ
るスペルチェック・修正をオフにしてお試し下さい。

@node Q5-2 市販の CD-ROM 辞書やネットワークの辞書サーバが利用できますか?
@unnumberedsubsec Q5-2 市販の CD-ROM 辞書やネットワークの辞書サーバが利用できますか?
@cindex @file{skk-lookup.el}
@cindex Lookup
@vindex skk-search-prog-list
@findex skk-lookup-search

Lookup が扱える辞書はほとんど使えます。Lookup がインストールされている
状態で SKK をインストールすると、SKK と Lookup のゲートウェイプログラ
ム @file{skk-lookup.el} がインストールされます。

インストールで注意すべきは、@command{make} で呼び出される Emacs は
@option{-q -no-site-file} フラグ付きで呼ばれるので、@file{~/.emacs.d/init.el} や
@file{site-start.el} などは読み込まれないことです。デフォルトで
@code{load-path} の通っているディレクトリに lookup をインストールするか、
@file{SKK-CFG} の中で @var{VERSION_SPECIFIC_LISPDIR} などにディレクトリ
を明示することで解決できます。

さぁ、@file{~/.skk} で @code{skk-search-prog-list} の
要素に @code{(skk-lookup-search)} を追加しましょう。他の検索エンジンより
も検索は比較的遅いので、最後の方が良いと思います。

こんな感じです。

@lisp
@group
(setq skk-search-prog-list
      '((skk-search-jisyo-file skk-jisyo 0 t)
        (skk-search-server skk-aux-large-jisyo 10000)
        (skk-lookup-search)))
@end group
@end lisp

Lookup については、

@display
@url{http://openlab.jp/edict/lookup/}
@end display

@noindent
をご参照下さい。

@node Q5-3 他の FEP を使用中にも SHIFT を押してしまいます。
@unnumberedsubsec Q5-3 他の FEP を使用中にも SHIFT を押してしまいます。

治すには SKK をやめるしかありません :-)

Emacs 上以外でも SKK みたいな操作性を実現するソフトウェアがあります。
@ref{SKK関連ソフトウェア} をご覧になってください。

@node 事項索引
@unnumbered 事項索引

@printindex cp

@node 変数索引
@unnumbered 変数索引

@printindex vr

@node 関数索引
@unnumbered 関数索引

@printindex fn

@node キー索引
@unnumbered キー索引

@printindex ky

@summarycontents
@contents
@bye

@c Local Variables:
@c fill-column: 72
@c skk-kutouten-type: jp
@c End:
